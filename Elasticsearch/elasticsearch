（1）基础
一、运行索引
1、./bin/elasticsearch
    curl命令是一个利用URL规则在命令行下工作的文件传输工具
2、curl 'http://localhost:9200/?pretty'(查看索引状态)
3、curl -XPOST 'http://localhost:9200/_shutdown'（停止服务）
   curl -X<VERB> '<PROTOCOL>://<HOST>:<PORT>/<PATH>?<QUERY_STRING>' -d '<BODY>'
   具体列子：
   curl -XGET 'http://localhost:9200/_count?pretty' -d '
   {
       "query": {
           "match_all": {}
       }
   }'

二、Elastic客户端
1、节点客户端:
    节点客户端以无数据节点身份加入集群，换言之，它自己不存储任何数据，但是它知道在集群中的具体位置，并且能够直接转发请求到对应的节点上
2、传输客户端:
    它自己不加入集群，只是简单转发请求给集群中的节点。
3、两种java客户端都是:
   基于9300端口与集群交互。

三、基于http协议: 以JSON为数据交互格式的RESTful API 端口9200

四、ES是面向文档: 可以存储整个对象或文档(document)。然而它不仅仅是存储，还会索引(index)每个文档的内容使之可以被搜索
   在Elasticsearch中，你可以对文档（而非成行成列的数据）进行索引、搜索、排序、过滤。这种理解数据的方式与以往完全不同，这也是Elasticsearch能够执行复杂的全文搜索的原因之一。

1、ES使用json，作为文档序列化格式
2、ES与关系型数据库对比
    Relational DB -> Databases -> Tables -> Rows -> Columns
    Elasticsearch -> Indices   -> Types  -> Documents -> Fields
3、ES使用倒排索引

4、检索文档:
    curl -XGET 'http://localhost:9200/megacorp/employee/1'
5、简单搜索: 注意_all表示所有的索引,q=qipuId:750767441'是查询条件
    curl -XGET 'http://10.15.226.153:9200/_all/chapter/_search?q=qipuId:750767441'
6、聚合功能 : ES同样具有聚合功能

五、分布式
1、将文档保存到不同的分片中，分片均匀的分配到各个节点，对索引和搜索做负载均衡
2、每个分片，都是有副本的
3、增加和删除新的节点是，分片会重新分片

(2)集群
一、主节点: 管理集群级变更
二、集群状态
{
    cluster_name: lego_search_backup
    status: green
    timed_out: false
    number_of_nodes: 6
    number_of_data_nodes: 6
    active_primary_shards: 121
    active_shards: 242
    relocating_shards: 0
    initializing_shards: 0
    unassigned_shards: 0
}

三、添加索引
1、索引是一个用来指向一个或多个分片的逻辑命名空间,应用程序不会直接与他们通信，直接与索引通信

(3) 数据
一个json对象
{
    "name":         "John Smith",
    "age":          42,
    "confirmed":    true,
    "join_date":    "2014-06-01",
    "home": {
        "lat":      51.5,
        "lon":      0.1
    },
    "accounts": [
        {
            "type": "facebook",
            "id":   "johnsmith"
        },
        {
            "type": "twitter",
            "id":   "johnsmith"
        }
    ]
}
1、文档的元数据 : 最基本的三个要素
       _index 文档存储的地方
       _type 文档代表的对象的类型
       _id 文档的唯一标识
2、创建索引，自增id
    POST /website/blog/
    {
      "title": "My second blog entry",
      "text":  "Still trying this out...",
      "date":  "2014/01/01"
    }
3、检索文档
    curl -i -XGET http://localhost:9200/website/blog/124?pretty

   带查询匹配条件
    curl -XGET  'http://localhost:9200/website/blog/_search' -d '{ "query" : {"match" : {"last_name" : "Smith"}}}'

4、检索文档的一部分
    GET /website/blog/123?_source=title,text

5、检查文档是否存在
    curl -i -XHEAD http://localhost:9200/website/blog/123
    如果文档存在，返回200状态码,不存在返回404

6、更新整个文档
    方式一、更新整个文档时，会新增一个文档把_version增加，并标记旧文档
    方式二、update API修改文档的局部时，步骤如下
    1、从旧文档中检索JSON 2、修改它 3、删除旧文档 4、索引新文档

7、创建一个新文档
如果想使用自定义的_id，我们必须告诉Elasticsearch应该在_index、_type、_id三者都不同时才接受请求
可以通过下面的方式
PUT /website/blog/123/_create { ... }
Elasticsearch将返回正常的元数据且响应状态码是201 Created
如果包含相同的_index、_type和_id的文档已经存在，Elasticsearch将返回409 Conflict响应状态码

8、删除文档
DELETE /website/blog/123
如果文档被找到: 返回响应体
{
  "found" :    true,
  "_index" :   "website",
  "_type" :    "blog",
  "_id" :      "123",
  "_version" : 3
}
如果文档未找到: 返回响应体
{
  "found" :    false,
  "_index" :   "website",
  "_type" :    "blog",
  "_id" :      "123",
  "_version" : 4
}

9 版本控制
当使用index API更新文档的时候，我们读取原始文档，做修改，然后将整个文档一次性重新索引
Elasticsearch中只存储最后被索引的任何文档

(1)、悲观并发控制
读一行数据前锁定这行，然后确保只有加锁的那个线程可以修改这行数据

(2)、乐观并发控制
更新的时候使用版本号，做参数
PUT /website/blog/1?version=1 <1>
如果另一个web，通过也使用PUT /website/blog/1?version=1 <1>更新，会错误。

10 局部更新:update请求表单接受一个局部文档参数doc，存在的字段被覆盖，新字段被添加
POST /website/blog/1/_update
{
   "doc" : {
      "tags" : [ "testing" ],
      "views": 0
   }
}

11 检索多个文档
POST /_mget
结果
{
   "docs" : [
      {
         "_index" : "website",
         "_type" :  "blog",
         "_id" :    2
      },
      {
         "_index" : "website",
         "_type" :  "pageviews",
         "_id" :    1,
         "_source": "views"
      }
   ]
}
可以查看:
同一个索引，同一类型下，_id(1,2)的文档
POST /website/blog/_mget
{
   "ids" : [ "2", "1" ]
}

12 批量操作
1、bulk API:允许我们使用单一请求来实现多个文档的create、index、update或delete















