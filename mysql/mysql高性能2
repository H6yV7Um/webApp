第7章 MYSQL高级特性

一 分区表
分区表是一个独立的逻辑表,但是底层由多个物理子表组成. 从底层的文件系统来看,每个分区表都有一个使用#分隔命名的表文件

MYSQL实现分区表的方式对底层表的封装,意味着索引也是按照分区的子表定义的,而没有全局索引
MYSQL在创建表时使用PARTITION BY子句定义每个分区存放的数据.在执行查询的时候,优化器会根据分区定义过滤那些没有我们需要数据的分区
1 表非常大以至于无法全部放在内存中
2 分区表的数据更容易维护
3 分区表的数据可以分布在不同的机器上
4 可以使用分区表避免Innodb的单个索引互斥访问
使用限制
一个表最多只能有1024个分区,分区表达式必须是整数
如果分区字段中有主键或者唯一索引,那么所有主键列和唯一索引都必须包含进来
分区表无法使用外键约束

(1) 分区表的原理
存储引擎管理分区的各个底层表和管理普通表一样,分区表的索引只是在各个底层表上各自加上一个完全相同的索引.
MYSQL先确定这条记录属于那个分区,再将记录写入对应的底层分区表,无须对任何其他分区进行操作

(2) 分区表的类型
RANGE分区：基于属于一个给定连续区间的列值，把多行分配给分区
CREATE TABLE employees (
    id INT NOT NULL,
    fname VARCHAR(30),
    lname VARCHAR(30),
    hired DATE NOT NULL DEFAULT '1970-01-01',
    separated DATE NOT NULL DEFAULT '9999-12-31',
    job_code INT,
    store_id INT
)
 PARTITION BY RANGE (YEAR(separated)) (
    PARTITION p0 VALUES LESS THAN (1991),
    PARTITION p1 VALUES LESS THAN (1996),
    PARTITION p2 VALUES LESS THAN (2001),
    PARTITION p3 VALUES LESS THAN MAXVALUE
)；

LIST分区:类似于按RANGE分区，区别在于LIST分区是基于列值匹配一个离散值集合中的某个值来进行选择
CREATE TABLE employees (
    id INT NOT NULL,
    fname VARCHAR(30),
    lname VARCHAR(30),
    separated DATE NOT NULL DEFAULT '9999-12-31',
    job_code INT,
    store_id INT
)
 PARTITION BY LIST(store_id)
    PARTITION pNorth VALUES IN (3,5,6,9,17),
    PARTITION pEast VALUES IN (1,2,10,11,19,20),
    PARTITION pWest VALUES IN (4,12,13,14,18),
    PARTITION pCentral VALUES IN (7,8,15,16)
)；

HASH分区：基于用户定义的表达式的返回值来进行选择的分区，该表达式使用将要插入到表中的这些行的列值进行计算
CREATE TABLE employees (
    id INT NOT NULL,
    fname VARCHAR(30),
    lname VARCHAR(30),
    hired DATE NOT NULL DEFAULT '1970-01-01',
    separated DATE NOT NULL DEFAULT '9999-12-31',
    job_code INT,
    store_id INT
)
PARTITION BY HASH(store_id)
PARTITIONS 4；它表示表将要被分割成分区的数量

KEY分区:类似于按HASH分区，区别在于KEY分区只支持计算一列或多列，且MySQL 服务器提供其自身的哈希函数
CREATE TABLE tk (
    col1 INT NOT NULL,
    col2 CHAR(5),
    col3 DATE
)
PARTITION BY LINEAR KEY (col1)
PARTITIONS 3;

(3) 分区表使用注意
1 : null值会使分区过滤无效
2 : 分区列和索引列不匹配,会导致查询无法进行分区过滤.
3 : 分区都必须使用相同的存储引擎
4 : 分区函数和表达式也有一些限制
5 : 在查询where,分区的列不能使用函数

二 视图 : 视图本身是一个虚拟表,不存放任何数据.比较灵活,好维护
1 视图特点:不能创建触发器,也不能使用DROP TABLE删除视图

2 可更新视图 : 因为视图是一个虚拟表，其中没有数据，所以通过视图更新时，都是转换到基本表来更新
CHECK OPTION : 表示任何通过视图更新的行,都必须符合视图本身的where条件定义.
3 处理视图的算法: 合并算法和临时表算法
4 MYSQL视图不支持物化视图,也不支持索引

三 外键约束
InnoDB是目前MYSQL中唯一支持外键的内置存储引擎
使用外键是有成本的: 每次在修改数据时都要在另一张表执行一次查找操作
但如果想确保两个相关表始终有一致的数据,那么使用外键比在应用程序中检查一致性的性能要高得多.

四 MYSQL内部存储代码
MYSQL允许通过触发器,存储过程,函数的形式来存储代码.从MYSQL5.1开始,还可以在定时任务中存放代码,这个定时任务也被称为"事件".

存储过程和存储函数都可以接受参数然后返回值,但是触发器和事件却不可以
存储代码的优点: 在服务器内部执行,代码重用; 缺点: 存储代码效率要稍微查,难实现太复杂的逻辑

(1) 存储过程和函数
DELIMITER
    CREATE PROCEDURE proc1(OUT s int)
        BEGIN
            SELECT COUNT(*) INTO s FROM user;
        END
DELIMITER ;

(2) 触发器 : 触发器可以让你在执行INSERT,UPDATE或DELETE的时候,执行一些特定的操作
注意
对每个表的每一个事件,最多只能定义一个触发器.MYSQL只支持"基于行的触发"也就是说,触发器始终是针对一条记录的
触发器可能导致死锁和锁等待.
触发器并不能一定保证更新的原子性.如MyISAM存储引擎
INNODB表上的触发器是在同一个事务中完成的,所以他们执行的操作是原子的.
CREATE TRIGGER t_afterinsert_on_tab1
AFTER INSERT ON tab1
FOR EACH ROW
BEGIN
     insert into tab2(tab2_id) values(new.tab1_id);
END;

(3) 事件: 指定Mysql在某个时候执行一段SQL代码,或者每隔一个时间间隔执行一段SQL代码.可以把复杂的SQL都封装到一个存储过程中, 这样事件在执行的时候只需要做一个简单的CALL调用
CREATE EVENT test ON SCHEDULE EVERY 1DAY
STARTS '2012-08-22 00:00:00'
ENDS '2012-08-22 00:00:00'+INTERVAL40 DAY
ON COMPLETION PRESERVE DO
CALL test_add();// 可以是调存储过程,也是执行MYSQL语句

五 游标
MYSQL提供只读,单向的游标,而且只能在存储过程或者更底层的客户端使用.
游标中指向的对象都是存储在临时表中而不是实际查询到的数据,所以mysql游标总是只读的.它可以每行得指向查询结果,然后让程序做进一步处理

在存储过程里面用到游标，逐条更新数据
CREATE PROCEDURE CURSOR()
BEGIN
 DECLARE  no_more_record INT DEFAULT 0;
 DECLARE  pID BIGINT(20);
 DECLARE  pValue DECIMAL(15,5);
 DECLARE  cur_record CURSOR FOR   SELECT colA, colB from tableABC;  /*首先这里对游标进行定义*/
 DECLARE  CONTINUE HANDLER FOR NOT FOUND  SET  no_more_record = 1; /*这个是个条件处理,针对NOT FOUND的条件,当没有记录时赋值为1*/

 OPEN   cur_record; /*接着使用OPEN打开游标*/
 FETCH  cur_record INTO pID, pValue; /*把第一行数据写入变量中,游标也随之指向了记录的第一行*/

 WHILE   no_more_record != 1 DO INSERT  INTO testTable(ID, Value) VALUES  (pID, pValue);
 FETCH   cur_record INTO pID, pValue;

 END WHILE;
 CLOSE  cur_record;  /*用完后记得用CLOSE把资源释放掉*/
END

六 绑定变量
1 服务器只需要解析一次SQL语句
2 不需要将整个查询语句发送到服务器端,只需要传参数
3 避免SQL注入和攻击

七 用户自定义函数

八 字符集和校对 : 字符集是一种从二进制到某类字符符号的映射
MySQL使用字符集
创建数据库的时候,将根据服务器上的character_set_server设置来设定该数据库的默认字符集
创建表的时候,将根据数据库的字符集设置指定这个表的字符集设置
创建列,根据设置列的字符集设置

服务器和客户端会有字符集转换过程: character_set_client -> character_set_connection -> character_set_result

MYSQL比较两个字符串的大小 : 必须转为同一个字符集再进行比较

选择字符集和校对规则
查看字符集 : show charset
查看校验规则 : SHOW COLLATION

字符集和校对规则如何影响查询

九 全文索引 : 基于相似度的查询,而不是原来的精确数值比较
全文索引支持各种字符内容的搜索,也支持自然语言搜索和布尔搜索.
在MYSQL5.6版本正式发布后,直接使用InnoDB的全文索引.

MYISAM的全文索引作用对象是一个"全文集合".这可能是某个数据表的一列,也可能是多个列.
MYISAM的全文索引是一类特殊的B-Tree索引,包含两层: 第一层是所有关键字,然后对于每一个关键字的第二层,包含的是一组相关的文档指针
根据如下规则过滤
1 停用词列表中的词不会被索引
SELECT * FROM INFORMATION_SCHEMA.INNODB_FT_DEFAULT_STOPWORD;
2 对于ft_min_word_len的词语和长度小于ft_max_word_len的词语,都不会被索引
SHOW GLOBAL VARIABLES LIKE '%ft_%';
3 创建和使用全文索引
CREATE TABLE article (
    id INT UNSIGNED AUTO_INCREMENT NOT NULL PRIMARY KEY,
    title VARCHAR(200),
    content TEXT,
    FULLTEXT (title, content)
);
show index from article 查看表里的索引
INSERT INTO article (title, content) VALUES('jjiii','The here and the past');
SELECT * FROM article WHERE MATCH(title, content) AGAINST('jjiii The')

如果导入大量的数据,先通过命令DISABLE KEY禁用,然后导入结束后使用ENABLE KEY建立
4 MYSQL全文索引只有全部在内存中的时候,性能才好. 与其他索引类型,INSERT,UPDATE,DELETE操作进行时,全文索引代价高
5 普通索引与全文索引一起使用:
Where Match(content,filters) Agaist('jalsfjlasd +author_id_123' IN BOOLEAN MODE);

十 分布式事务
存储引擎的事务特性能够保证在存储引擎级别实现ACID
XA事务则让存储引擎级别的ACID可以扩展到数据层,甚至可以扩展到多个数据库之间

XA事务中需要有一个事务协调器来保证所有的事务参与者都完成了准备工作.如果协调器收到所有的参与者都准备好的消息,就会告诉所有的事务可以提交了
MYSQL只是XA过程中一个参与者,而不是协调者

(1) 内部XA事务
(2) 外部XA事务

十一 查询缓存
Mysql查询缓存保存查询返回的完整结果,当查询命中该缓存,Mysql会立刻返回结果
查询缓存系统会跟踪查询中涉及的每个表,如果这些表发生数据变化,那么和这个表相关的所有缓存数据将失效

(1) MYSQL判断缓存命中
当查询语句中有一些不确定的数据时,则不会被缓存.例如包含函数NOW().
如果查询中包含任何用户自定义函数,存储函数等都不会被缓存
子查询和存储过程都没有办法使用缓存

第八章 优化服务器设置

1 mysql工作原理 :
配置文件位置my.cnf
show global variables like 'port';  查看端口号
可以查看配置文件中的值

2 配置内存使用
1 每个连接需要的内存
MYSQL保持一个连接只需要少量的内存,它还要求一个基本量的内存来执行任何给定的查询.
使用许多大的临时表或复杂存储过程的查询,导致高内存消耗的原因

2 为缓存分配内存
MySQL需要为缓存分配更多的内存.它使用缓存来避免磁盘访问,磁盘访问比呃你吃访问数据要慢得多
(1)InnoDB缓冲池
(2)InnoDB日志文件和MyISAM数据的操作系统缓存
(3)MyISAM键缓存
(4)查询缓存
(5)二进制日志和表定义文件的操作系统缓存

3 InnoDB缓冲池(innodb_buffer_pool_size)
InnoDB缓冲池并不仅仅缓冲索引,它还会缓存行的数据,自适应哈希索引,插入缓冲,锁,以及其他内存数据结构
InnoDB还使用缓冲池来帮助延迟写入,这样就能合并多个写入的操作,然后一起顺序地回写.

4 MyIsAM 键缓存(key Caches)
MyISAM的键缓存也被称为键缓冲,默认只有一个键缓存,但也可以创建多个.
最重要配置项key_buffer_size,如果大部分表是Myisam表,就应该为键缓存分配比较多的内存

5 mysql键缓存块大小
可以设置MyISAM的索引块大小跟操作系统一样,避免写时读取
myisam_block_size变量控制着索引块大小.也可以指定每个索引的块大小,在create table或者create index语句中使用key_block_size.

6 线程缓存 : 线程缓存保存那些当前没有与连接关联但是准备为后面新的连接服务的线程

7 表缓存 : 每个在缓存中的对象包含相关表.frm文件的解析结果.
对于myisam存储引擎: 可以服务器避免修改myisam文件头来标记表"正在使用中"
对于innodb重要性就小多,innodb不依赖它做那么多的事件

8 innodb数据字典
innodb有自己的表缓存,可以称为表定义缓存或者数据字典.
当innodb打开一张表,就增加了一个对应的对象到数据字典

9 配置MYSQL的I/O行为
innodb的i/o配置
InnoDB不仅允许控制怎么恢复,还允许控制怎么打开和刷新.
重要内容: InnoDB日志文件大小,InnoDB怎样刷新它的日志缓冲,以及Inndb怎样执行I/O

(1)Innodb事务日志
Innodb使用日志来减少提交事务时的开销
innodb用日志把随机I/O变成顺序I/O,一旦日志安全写到磁盘,事务就持久化了,即使变更还没有写到数据文件中

(2) innodb怎样打开和刷新日志以及数据文件

(3) innodb表空间
innodb把数据保存在表空间,本质上是一个由一个或多个磁盘文件组成的虚拟文件系统.innodb用表空间实现很多功能,并不只是存储表和索引.
它还保存了回滚日志,插入缓冲,双写缓冲,以及其他内存数据结构

(4) 双写缓存: innodb用双写缓冲来避免页没写完整所导致的数据损坏

myisam的i/o配置
通过delay_key_write变量,也可以延迟索引的写入.如果这么做,修改的键缓冲块直到表被关闭才会刷新

10 配置mysql并发
innodb并发配置一 innodb的i/o配置

最基本的限制并发的方式是使用innodb_thread_concurrency变量,它会限制一次性可以有多少线程进入内核
并发值 = CPU数量 * 磁盘数量 * 2

myisam并发配置
通过设置concurrent_insert这个变量,可以配置MyISAM打开并发插入

优化BLOB和TEXT
优化排序



