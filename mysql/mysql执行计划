执行计划的查看
     id:包含一组数字，表示查询中执行select子句或操作表的顺序；
        执行顺序从大到小执行
        当id值一样的时候，执行顺序由上往下

     select_type:表示查询中每个select子句的类型（简单OR复杂），有以下几种
        1、SIMPLE：查询中不包含子查询或者UNION
        2、PRIMARY：查询中若包含任何复杂的子部分，最外层查询则被标记为PRIMARY
        3、SUBQUERY：在SELECT或WHERE列表中包含了子查询，该子查询被标记为SUBQUERY
        4、DERIVED：在FROM列表中包含的子查询被标记为DERIVED（衍生）
        5、若第二个SELECT出现在UNION之后，则被标记为UNION；
        6、若UNION包含在FROM子句的子查询中，外层SELECT将被标记为：DERIVED
        7、从UNION表获取结果的SELECT被标记为：UNION RESULT

     *type：表示MySQL在表中找到所需行的方式，又称“访问类型”，常见有以下几种
        all：MySQL将进行全表扫描；
        index：index与ALL区别为index类型只遍历索引树；
        range：对索引的扫描开始于某一点，返回匹配值域的行，常见于between、<、>等的查询；
        ref：非唯一性索引扫描，返回匹配摸个单独值的所有行。常见于使用非唯一索引或唯一索引的非唯一前缀进行的查找；
        eq_ref：唯一性索引扫描，对于每个索引键，表中只有一条记录与之匹配。常见于主键或唯一索引扫描
        const、system：当MySQL对查询某部分进行优化，并转换为一个常量时，使用这些类型访问。如将主键置于where列表中，MySQL就能将该查询转换为一个常量
        null：MySQL在优化过程中分解语句，执行时甚至不用访问表或索引

     possible_keys：
        指出MySQL能使用哪个索引在表中找到行，查询涉及到的字段上若存在索引，则该索引将被列出，但不一定被查询使用

     key：
        显示MySQL在查询中实际使用的索引，若没有使用索引，显示为NULL。当查询中若使用了覆盖索引，则该索引仅出现在key列表中

     key_len：
        表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度

     ref：表示上述表的连接匹配条件，即那些列或常量被用于查找索引列上的值

     rows：表示MySQL根据表统计信息及索引选用情况，估算的找到所需的记录所需要读取的行数

     extra：包含不适合在其他列中显示但十分重要的额外信息
        1 Using where：
          表示MySQL服务器在存储引擎受到记录后进行“后过滤”（Post-filter）,如果查询未能使用索引，Using where的作用只是提醒我们MySQL将用where子句来过滤结果集
        2 Using temporary：
          表示MySQL需要使用临时表来存储结果集，常见于排序和分组查询；
        3 Using filesort：
          MySQL中无法利用索引完成的排序操作称为“文件排序”；


