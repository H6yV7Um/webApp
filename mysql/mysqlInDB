第1章 Mysql体系结构和存储引擎

1 数据库和实例
数据库 : 物理操作系统文件或其他形式文件类型的集合.
实例: mysql数据库由后台线程以及一个共享内存区组成.是真正用于操作数据库文件的 ; 在系统上的表现就是一个进程

2 MySQL存储引擎 : 是基于表的
(1) InnoDB存储引擎 : 行锁设计,支持外键,支持全文索引
InnoDB存储引擎将数据放在一个逻辑的表空间中.InnoDB存储引擎的表单独放到一个独立的ibd文件中
InnoDB通过使用多版本并发控制来获得高并发性,并且实现了SQL标准的4种隔离级别,默认可重复读.使用next-key locking的策略来避免幻读 (所谓的间隙锁)
InnoDB存储引擎还提供了插入缓冲,二次写,自适应哈希索引,预读等高性能和高可能的功能
InnoDB采用聚集的方式,表的存储都是按主键的顺序进行存放.如果没有显式地在表定义时指定主键,InnoDB存储引擎会为每一行生成一个6字节的ROWID作为主键

(2) MyISAM存储引擎 : 表锁设计,不支持事务,支持全文索引 主要面向OLAP数据库应用
MyISAM存储引擎的另一个与众不同的地方是它的缓冲池只缓存索引文件,而不缓冲数据文件
MyISAM存储引擎表由MYD和MYI组成,MYD用来存放数据文件,MYI用来存放索引文件

(3) NDB存储引擎是一个集群存储引擎: 将数据全部放在内存中,因此主键查找的速度极快,通过添加NDB数据存储节点可以线性地提高数据库性能,是高可用,高性能的集群系统

(4) Memory存储引擎
Memory存储引擎将表中的数据存放在内存中,如果数据库重启,表中的数据都会消失.Memory存储引擎默认使用哈希索引,而不是我们熟悉的B+树索引

(5) 连接Mysql: MySql数据库提供的连接方式从本质上看都是上述提及的进程通信方式 TCP/IP

第二章 InnoDB体系架构
一 后台线程:
InnoDB存储引擎是多线程的模型,因此其后台有多个不同的后台线程,负责处理不同的任务
1 Master Thread 是一个非常核心的后台线程,主要负责将缓冲池中的数据异步刷新到磁盘,保证数据的一致性
2 IO Thread 存储引擎中大量使用了AIO来处理写IO请求,这样可以极大提高数据库的性能.而IO Thread的工作主要负责这些IO请求的回调处理.
3 Purge Thread 事务被提交后,其所使用的undolog可能不再需要,因此需要PurgeThread来回收已经使用并分配的undo页
4 Page Cleaner Thread 是将之前版本中脏页的刷新操作都放入到单独的线程中的来完成

二 内存:
1 缓冲池:是一块内存区域,通过内存的速度来弥补磁盘速度较慢对数据库性能的影响

2 缓冲池缓存的数据类型 : 索引页,数据页,undo页,插入缓冲,innoDB存储的锁信息,数据字典信息等

3 数据库中的缓冲池是通过LRU(最近最少使用)算法进行管理的.

4 重做日志缓冲: 将重做日志信息先放入到这个缓冲区,然后按一定频率将其刷新到重做日志文件.

5 额外的内存池: 在InnoDB存储引擎中,对内存的管理是通过一种称为内存堆的方式进行的

6 Checkpoint: 缩短数据库的恢复时间

三 Master Thread 工作方式
1 Master Thread 会根据数据库运行的状态在loop,background loop,flush loop 和 suspend loop中进行切换

重点 四 InnoDB 关键特性
插入缓冲
Insert Buffer:
1 主键：插入顺序是按照主键递增的顺序进行插入的 。 聚集索引唯一

2 非聚集索引的插入或更新操作,不是每一次直接插入到索引页中,而是先判断插入的非聚集索引页是否在缓冲池中,若在，则直接插入，若不在，则先放入到一个插入缓存中。
非聚集索引：使用Insert Buffer提高缓存 (插入缓存需要满足两个条件: 索引是辅助索引,索引不是唯一)。

Change Buffer 可将其视为Insert Buffer的升级 . InnoDB存储引擎可以对DML操作: insert delete update都进行缓冲

Insert Buffer的数据结构是一棵B+树

合并Merge Insert Buffer: 可能发生在以下几种情况
辅助索引页被读取到缓冲池时
Insert Buffer Bitmap页用来追踪每个辅助索引页的可用空间,并至少有1/32页的空间
Master Thread线程中每秒和每10秒会进行一次Merge Insert Buffer
2 两次写 doublewrite带给InnoDB存储引擎的是数据页的可靠性
    在应用重做日志前,用户需要一个页的副本,当写入失效时,先通过页的副本来还原该页,再进行重做.
3 自适应哈希索引 : 哈希是一种非常快的查找方法，时间复杂度为O(1)，一次查找就能定位
  是通过缓冲池的B+树页构造而来,因此建立的速度快,而且不需要对整表构建哈希索引
4 异步IO : 用户可以在发出一个IO请求后立即再发出另一个IO请求,当全部IO请求发送完毕后,等待所有IO操作完成.
5 刷新邻接页 : 当刷新一个脏页时,InnoDB存储引擎会检查该页所在区的所有页,如果是脏页,那么一起进行刷新

二、表结构定义文件
1、Mysql数据的存储是根据表进行的，每个表都会有与之对应的文件。
Mysql都有一个以frm为后缀名的文件，这个文件记录了该表的表结构定义

三、InnoDB存储引擎文件
    每个表存储引擎还有自己独有的文件。这些文件包括重做日志文件，表空间文件
(1)表空间文件
    InnoDB采用将存储的数据按表空间进行存放的设计。在默认配置下会有一个初始大小为10MB，名为ibdata1文件。该文件就是默认的表空间文件，用户可以通过参数
innodb_data_file_path对其进行设置。
可以设置共享表空间、独立表空间。














