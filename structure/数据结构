一 线性表 : 零个或多个数据元素的有限序列
1 顺序存储结构
优点 无须为表示表中元素之间的逻辑关系而增加额外的存储空间,取表中任一个位置的元素时间复杂度低O(1)
缺点 每次插入和删除元素时间复杂度O(n)

2 链式
重点: 除了要存储元素本身,还需要存储元素后继元素的地址(也就是一个指针)
数据查询时间复杂度O(n)
每次插入和删除元素时间复杂度O(1)
3 静态链表 : 让一个数组元素都是由两个数据域组成,data和cur ()
数据结构如下
typedef struct
{
    ElemType data;
    int cur;//游标
}
优点:
在插入和删除操作时,只需要修改游标,不需要移动元素,插入和删除元素时间复杂度O(1)
可以通过数组下标直接取数,取表中任一个位置的元素时间复杂度低O(1)

4 循环链表 单链表中的终端结点的指针有空指针改为指向头结点,就使整个单链表形成一个环.
与单链表的差异在于循环结束的判断上
原来是判断p->next不为空
现在是p->next不等于头结点

5 双向链表 在单链表的每个结点中,再设置一个指向其前驱结点的指针域,包含两个指针域,前驱和后继
双向循环链表
对于链表中的某个结点p,它的后继的前驱,以及前驱的后继,都是它本身
判断循环结束,于单向循环链表一样

二 栈与队列

栈 : 仅在表尾进行插入和删除操作的线性表
1 栈的顺序存储结构 : 基于数组

2 两栈共享空间 :  top1 + 1 = top2 当栈1的指针等于栈2的指针时,表示栈已经满了

3 栈的链式存储结构 : 对于空栈来说,链表定义是头指针指向空

4 栈的应用
递归
四则运算表达式求值 : 先将操作数进栈,遇到操作符出栈进行计算,再把计算进栈

5 栈出栈的时候,不需要移动元素

队列 : 在一端进行插入,在另一端进行删除的线性表
先进先出
1 队列的属性存储结构
入队列,不需要移动任何元素,时间复杂度O(1),出队列是,所有元素都得向前移动,时间复杂度O(n)
队列中使用两个指针,front指针指向对头元素,rear指针指向对尾元素的下一个位置
非循环队列 : 空队列 front = rear
2 循环队列 把队列的这种头尾相接的顺序存储结构称为循环队列
rear+1%queueSize == front

3 队列的链式存储结构,其实就是线性表的单链表,但只能尾进头出

三 串
1 串的比较是通过组成串的字符之间的编码来进行的,而字符的编码指的是字符在对应字符集的序号
2 串的顺序存储结构 是用一组地址连续的存储单元来存储串中的字符序列
3 串的链式存储结构






