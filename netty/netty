一、NIO入门
1、BIO编程
网络编程的基本模型是C/S模式，服务端提供地址信息(绑定ip地址和监听端口),客户端通过连接操作向服务器监听的
地址发起连接请求，通过三次握手建立连接，如果连接建立成功，双方就可以通过Socket进行通信
是一种同步阻塞的方式: 一个线程只能处理一个客户端连接,占用一个网络链路
提供 Socket 和 ServerSocket

2、NIO编程
非阻塞IO ， 提供了SocketChannel 和 ServerSocketChannel
(1) 缓冲区Buffer
我们首先介绍缓冲区Buffer的概念，Buffer是一个对象，它包含一些要写入或者要读出的数据。
缓冲区实质是一个数组，通常它是一个字节数组ByteBuffer，也可以使用其他种类的数组。
ByteBuffer、CharBuffer、ShortBuffer、IntBuffer、LongBuffer、FloatBuffer、DoubleBuffer

(2) 通道Channel
Channel 是一个通道，可以通过它读取和写入数据，它就像自来水管一样，网络数据通过Channel读写
Channel 分为 SelectableChannel 用于网络读写（ServerSocketChannel）
FileChannel 用于文件操作

(3) 多路复用器 Selector
Selector轮询注册在其上的Channel，如果Channel上有新的TCP连接接入，这个Channel就处于就绪状态，会被Selector
轮询出来，进行后续的I/O操作
由于是异步非阻塞的方式读写，不能保证一次性读写完成，所以要使用轮询策略

3、AIO编程
对应UNIX网络编程中的事件驱动I/0，它不需要通过多路复用器（Selector）对注册的通道进行轮询操作即可实现异步读写

二、Netty入门应用
相对于传统的NIO程序，Netty的代码更加简洁，开发难度更低，扩展性也更好，作为基础网络通信框架。

三、Netty解决（TCP粘包/拆包问题的解决）
TCP包划分：一个完整的包可能会被TCP拆分成多个包进行发送，也有可能把多个小的包封装成一个大的数据包发送
1、TCP粘包/拆包:
粘包/拆包产生的原因： write写入的字节大小大于套接口发送缓冲区大小

2、解决策略: 只能通过上层的应用协议栈设计来解决,可以消息定长

3、Netty的半包解码器来解决TCP粘包/拆包
解决TCP粘包/拆包导致的半包读写问题
LineBasedFrameDecoder和StringDecoder

四、分隔符合定长解码器
DelimiterBaseFrameDecoder : 自动完成以分隔符做结束标志的消息的解码
对于DelimiterBaseFrameDecoder，可以设置单条消息的最大长度，如果达到最大长度时，没有查到分隔符，会抛出异常
FixedLengthFrameDecoder : 自动完成对定长消息的解码

五、编解码技术
1: java 序列化　序列化ID很重要，因为如果不指定序列化ID，序列化的类如果修改了内容的话，原来序列化的结果，将无法再反序列化
java序列化缺点，无法跨语言，序列化后的码流大

六、Java序列化
Netty使用了ObjectEncoder编码器和ObjectDecoder解码器实现对普通POJO对象的序列化。

七、Google Protobuf 编辑码
1: Protobuf数据序列化框架
2: Netty在使用Protobuf是，要注意读半包的问题

Netty多协议开发: 作为一个网络框架，可以基于Http,WebSocket,UDP开发客户端和服务端

八、Http 协议开发
1、Http请求报文：请求行、消息头、请求正文
请求方法：GET,POST,HEAD,PUT,DELETE,TRACE,CONNECT,OPTIONS

2、Http响应消息：状态行，消息头，响应正文
状态 ：1xx 指示信息，2xx 成功 ，3xx 重定向 ，4xx 客户端错误 ，5xx 服务器端错误

九、WebSocket协议开发
websocket将网络套接字引入到客户端和服务器，浏览器和服务器之间可以通过套接字建立持久的链接，
双方都可以互发数据给对方，而不是之前有客户端的请求应答模式。

1、websocket是HTML5开始提供的一种浏览器与服务器进行全双工通信的网络技术,在同一时刻，即可以发送消息，也可以接收消息
服务器可以主动传递消息给客户端，不再需要客户端轮询

十 UDP协议
1、UDP是用户数据报协议，主要作用是将网络数据流量压缩成数据报形式，提供面向事务的简单信息传送服务。
UDP是无连接的，通信双方不需要建立物理链路连接。


十一 文件传输

十二 Java多线程编程在Netty中的应用
java内存模型
1、java内存模型规定所有的变量都存储在主内存中，每个线程有自己独立的工作内存，保存了被该线程使用的变量的主内存复制。

线程1 <---> 工作内存1 <--->
                            主内存
线程2 <---> 工作内存2 <--->

2、java内存交互协议
java 内存模型定义了8种操作来完成主内存和工作内存的变量访问
(1) lock   : 主内存变量，把一个变量标示为某个线程独占的状态。
(2) unlock : 主内存变量，把一个处于锁定状态变量释放出来，被释放后的变量才可以被其他线程锁定
(3) read   : 主内存变量，把一个变量的值从主内存传输到线程的工作内存中，以便随后的load动作使用
(4) load : 工作内存变量，把read读取到的主内存变量值放入工作内存的变量副本中
(5) use  : 工作内存变量，把工作内存中变量的值传递给java虚拟机执行引擎
(6) assign : 工作内存变量，把从执行引擎接收到的变量的值赋值给工作内存变量
(7) store　: 工作内存变量，把工作内存中一个变量的值传送到主内存中，以便随后的write操作使用
(8) write : 主内存变量，把store操作从工作内存中得到的变量值放入主内存的变量中

3、volatile关键字
1 :当一个变量被volatie修饰后，无论是否加锁，其他线程都可以立即看到最新的修改
2 : 防止指令重排

十三 Netty架构


































