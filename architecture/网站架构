一、第一部分
1、大型网站软件系统的特点
   高并发、大流量
   高可用
   海量数据
   用户分布广
   安全环境恶劣
   需求快速变更
   渐进式发展

二、网站架构模式
1、分层:将系统在横向维度上切分成几个部分，每部分负责一部分相对比较单一的职责。然后通过上层对下层的依赖和调用组成一个完整的系统。

2、分割:将系统在纵向方面对软件进行切分。

3、分布式：将不同模块部署在不同的服务器上，通过远程调用协同工作。
分布式方案：
   1: 分布式应用和服务
   2: 分布式静态资源
   3: 分布式数据和存储
   4: 分布式计算

4、集群 : 使用分布式虽然已经将分层和分割后的模块独立部署，但是对于用户访问集中的模块，还需要将独立部署的服务器集群化。
用多台服务器部署相同应用构成一个集群，通过负载均衡设备共同对外提供服务。

5、缓存:
   CDN:
        内容分发网络，部署在距离终端用户最近的网络服务商，用户的网络请求总是先到达他的网络服务商，在这里缓存网站的一些资源可以就近以最快速度返回给用户。

   反向代理：
        反向代理属于网站前端架构，当用户请求到达网站是，最先访问就是反向代理服务器，这里缓存网站的静态资源。无需将请求继续转发给应用服务器就能返回给用户。

   本地缓存：
        在应用服务器本地缓存着热点数据，应用程序可以在本地内存中直接访问数据，不需要再访问数据库.

   分布式缓存：将数据缓存在一个专门的分布式缓存集群中，应用程序通过网络通信访问缓存数据.

6、异步
   在单一服务器内部可通过多线程共享内存队列的方式实现异步
   在分布式系统中，多个服务器集群通过分布式消息队列实现异步，分布式消息队列可以看作内存队列的分布式部署。

7 冗余
  要保证在服务器宕机的情况下网站依然可以继续服务，不丢失数据，就需要一定程度的服务器冗余运行，数据冗余备份，这样当某台服务器宕机时，可以将其上的服务和数据
  访问转移到其他机器上。

三、架构要素
性能，可用性，伸缩性，扩展性，安全性

1、性能优化
（1） 浏览器端：通过浏览器缓存，使用页面压缩，合理布局页面，减少Cookie传输等手段改善性能。
（2） 使用CDN，将网站静态内容分发至离用户最近的网络服务商机房，使用户通过最短访问路径获取数据。
（3） 在应用服务器端，使用服务器本地缓存和分布式缓存。通过缓存在内存中的热点数据处理用户请求，加快请求处理过程，减轻数据库负载压力。
（4） 通过异步操作将用户请求发送至消息队列，等待后续任务处理。
（5） 在网站有很多用户高并发请求的情况下，可以将多台应用服务器组成一个集群共同对外服务。
（6） 在数据库端，索引，SQL优化等性能手段都已经比较成熟。NOSQL数据库通过优化数据模型，存储结构，伸缩特性等手段在性能方面的优势变的明显。

2、高可用性
   网站高可用的主要手段是冗余，应用部署在多台服务器上同时提供访问，数据存储在多台服务器上相互备份，任何一台服务器宕机都不会影响应用的整体可用，也不会导致数据丢失。

3、伸缩性
   大型网站需要面对大量用户的高并发访问和存储海量数据，不可能只用一台服务器就处理全部用户请求，存储全部数据。
   所谓伸缩性是指通过不断向集群中加入服务器的手段来缓解不断上升的用户并发访问压力。
   衡量架构伸缩性的主要标准就是是否可以用多台服务器构建集群，是否容易向集群中添加新的服务器。

4、扩展性
   衡量网站架构： 就是在网站增加新的业务产品时，是否可以不影响现有产品的功能

5、安全性
   保护网站不受恶意的攻击。

第二部分: 架构

网站的高性能架构
1、性能测试指标
（1）响应时间:发出请求到收到响应数据所需要的时间

（2）并发数:同时处理请求的数目

（3）吞吐量: 单位时间内系统处理的请求数量
     TPS（每秒事务数）、QPS（每秒查询数）

2、前端性能优化
   (1)
      减少http请求
      使用浏览器缓存
      启动压缩
      页面编写方式： css在页面上，js在页面下
      减少cookie传输
   (2)
      CDN加速: CDN能够缓存的一般是静态资源
               动态资源还要在中心机房取。
   (3)
      反向代理：缓存的一般是静态资源

3、应用服务性能优化
     缓存
     (1) 分布式缓存 ：保证缓存的可用性
         缓存的数据是经过计算处理得到的，那么被缓存的数据无需重复计算即可直接使用
         缓存访问速度快
         缓存的本质是内存的hash表： 读写的时间复杂度O(1)
     (2) 合理使用缓存
         读写比例2:1以上，才记录缓存
         只将热点数据记录缓存
         缓存数据超过失效时间，要从数据库中重新加载
         启动时，开始加载缓存，如果数据value是空，也可以加入缓存，避免查看数据的。

     异步操作
         消息队列： 有很好的削峰作用。提高响应速度

     使用集群
         避免单一服务器因负载压力过大而响应缓慢。

     代码优化

4、存储性能优化
   机械硬盘 vs 固态硬盘

   B+树 vs LSM树
   Mysql使用的是： B+树
   NoSQL采用LSM树 ：数据写操作都是内存中进行，进行读操作，先从内存中搜索，没有找到，就从磁盘查找。

   RAID vs HDFS（分布式文件系统）

网站的高可用架构
1、高可用的度量与考核
 (1)网站可用性度量
 (2)网站可用性考核

2、高可用的网站架构
   实现上述高可用架构的主要手段是数据和服务的冗余备份，一旦某些服务器宕机，就将服务切换到其他服务器上。
   需要对网站的应用层，服务层，数据层都做灾备









