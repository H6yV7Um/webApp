关系
1：依赖关系
2：组合关系 : 强
3：聚合关系 ：弱
4：关联关系
5：实现接口
6：继承关系

1、策略模式
父类A:提供一个抽象方法 function
不同的子类a,b,c 实现这个父类A的function方法，并且实现的方式不同，将不同的方法实现，封装在不同的子类中
类图
          A
     |——  |  ——|
     a    b    c

代码如下：
interface TravelStrategy{
    public function travelAlgorithm();
}

/**
 * 具体策略类(ConcreteStrategy)1：乘坐飞机
 */
class AirPlanelStrategy implements TravelStrategy {
    public function travelAlgorithm(){
        echo "travel by AirPlain", "<BR>\r\n";
    }
}

/**
 * 具体策略类(ConcreteStrategy)2：乘坐火车
 */
class TrainStrategy implements TravelStrategy {
    public function travelAlgorithm(){
        echo "travel by Train", "<BR>\r\n";
    }
}
/**
 * 具体策略类(ConcreteStrategy)3：骑自行车
 */
class BicycleStrategy implements TravelStrategy {
    public function travelAlgorithm(){
        echo "travel by Bicycle", "<BR>\r\n";
    }
}

2、观察者模式
主题对象接口， 对应一个主题实现类
观察者接口，对应一个观察者实现类
主题对象先注册后观察者，当主题对象的状态改变后，会通知观察者
类图
Subject --------->Oberver
|                   |
SubjectImp        OberverImp


3、装饰者模式
    动态给一个对象添加一些额外的职责
    一个对象:代表着被装饰者
    额外的职责:代表着装饰者
    由于装饰者是继承被装饰者，所以"装饰"后，还可以多次在装饰
Java api中 流就是使用这种模式

类图
            被装饰者接口
           |            |
被装饰者实现        装饰者接口
                    |        |
             装饰者实现1     装饰者实现2


一个Component抽象类
package decorator;
public abstract class Meal
{
    String description = "Unknown Meal";

    public String getDescription()
    {
        return description;
    }

    public abstract double cost();
}

ConcreteComponent具体类
package decorator;
public class ChineseMeal extends Meal
{
    public ChineseMeal()
    {
        description = "Chinese Meal";
    }

    @Override
    public double cost()
    {
        return 1.0;        // 一次性餐具费用
    }

}

一个Decorator抽象类
package decorator;
public abstract class Decorator extends Meal
{
    public abstract String getDescription();
}

ConcreteDecorator具体类

// 茄子豆角
public class EggplantBean extends Decorator
{
    Meal meal;

    public EggplantBean(Meal meal)
    {
        this.meal = meal;
    }
    @Override
    public String getDescription()
    {
        return meal.getDescription() + ", 茄子豆角";
    }

    @Override
    public double cost()
    {
        return 2 + meal.cost();
    }

}

4、单列模式
    保证一个类仅有一个实例，并提供一个访问它的全局访问点（public方法）
    必须提供一个private 构造方法，保证这个实例不可以被其他类单独实例化，但要提供一个public方法，保证实例化在类内部完成，并且其他内可以访问这个方法。
    注意多线程时的单列
1: 双重锁定(懒汉)
在加锁前，先判定是否已经存在实例
public class Singleton {
    private  volatile static Singleton singleton;
    private Singleton (){}
    public static Singleton getSingleton() {
    if (singleton == null) {//volatile变量
        synchronized (Singleton.class) {
            if (singleton == null) {
                singleton = new Singleton();
            }
        }
    }
    return singleton;
    }
}
2: 直接在static变量上初始化(饿汉)
public class Singleton {
    private static Singleton instance = new Singleton();
    private Singleton (){}
    public static Singleton getInstance() {
    return instance;
    }
}

3: 静态内部类实现
public class Singleton
{
    private Singleton(){ }
    public static Singleton getInstance()
    {
        return Nested.instance;
    }

    //在第一次被引用时被加载
    static class Nested
    {
        private static Singleton instance = new Singleton();
    }
}

5、代理模式: 接口的实现类和代理都实现了接口的方法，代理Proxy类，保存一个引用使得代理访问实体
类图
          接口
          |  |
接口的实现<-----代理(Proxy)

(1)Subject
package com.jackie.designpatterns.proxy;
/**
 * 抽象主题，定义主要功能
 */
public interface Subject {
   public void operate();
}
(2)RealSubject
package com.jackie.designpatterns.proxy;
/**
 * 具体主题
 */
publicclass RealSubject implements Subject{
   @Override
   publicvoid operate() {
        System.out.println("realsubject operatestarted......");
   }
}
(3)     Proxy
package com.jackie.designpatterns.proxy;
/**
 * 代理类
 */
public class Proxy implements Subject{

   private Subject subject;

   public Proxy(Subject subject) {
        this.subject = subject;
   }

   @Override
   publicvoid operate() {
        System.out.println("before operate......");
        subject.operate();
        System.out.println("after operate......");
   }
}
(4)     Client
package com.jackie.designpatterns.proxy;
/**
 * 客户
 */
public class Client {
   /**
    * @param args
    */
   public static void main(String[] args) {
        Subject subject = new RealSubject();
        Proxy proxy = new Proxy(subject);
        proxy.operate();
   }
}

动态代理
public interface Subject
{
  public void doSomething();
}
public class RealSubject implements Subject
{
  public void doSomething()
  {
    System.out.println( "call doSomething()" );
  }
}
public class ProxyHandler implements InvocationHandler
{
  private Object proxied;

  public ProxyHandler( Object proxied )
  {
    this.proxied = proxied;
  }

  public Object invoke( Object proxy, Method method, Object[] args ) throws Throwable
  {
    //在转调具体目标对象之前，可以执行一些功能处理

    //转调具体目标对象的方法
    return method.invoke( proxied, args);

    //在转调具体目标对象之后，可以执行一些功能处理
  }
}

 public static void main( String args[] )
 {
    RealSubject real = new RealSubject();
    Subject proxySubject = (Subject)Proxy.newProxyInstance(Subject.class.getClassLoader(),new Class[]{Subject.class},new ProxyHandler(real));
    proxySubject.doSomething();

 }
代理的应用场景:RPC远程调用
1： 被代理类
2： 代理处理器，将被代理类，通过构造方法，传入。这里被代理类可以任何类型，所以是动态的
3： 代理类调用方法时，会由代理处理器invoke接受，并通过反射机制调用被代理类的方法.

6、工厂模式
提供一个创建对象的Factory接口，由具体的工厂实现来确定所有创建具体对象的实现
类图
Object接口<--------Factory接口
|                        |
Object实现         Factory实现
(1) 简单工厂
public class McChicken implements Food{
    /*
     * 获取一份麦香鸡
     */
    public void get(){
        System.out.println("我要一份麦香鸡");
    }
}
public class Chips implements Food{
    /*
     * 获取一份薯条
     */
    public void get(){
        System.out.println("我要一份薯条");
    }
}
根据不同类型返回实例
public class FoodFactory {
    public static Food getFood(String type) throws InstantiationException, IllegalAccessException, ClassNotFoundException {
        if(type.equalsIgnoreCase("mcchicken")) {
            return new McChicken();
        } else if(type.equalsIgnoreCase("chips")) {
            return new Chips();
        } else {
            System.out.println("哎呀！找不到相应的实例化类啦！");
            return null;
        }
    }
}
(2) 抽象工厂模式 : 将工厂也设计也抽象，有不同的工厂实现
    public interface AbsFactory(){
        public Pizza getFood(String type);
    }

7、责任链模式 : 定义一个处理请求的接口，使多个对象继承这个处理接口，并将这些对象连成一条链，沿着这条链传递该请求，直到有一个对象处理它为止。
   用于多分支的处理场景，将每个分支做为一个处理对象，并且必须前一个对象要设置后一个对象,这样就会进入一个分支（处理对象）来处理
类图
    Handler ->Handler
    | | |
    H1H2H3


8、适配器模式 :
将一个类的接口转换成客户需要的另外一种接口，在不改变现有的类实现前提，使它能够应用于新的目标接口
主要目的扩展功能
类图
Target 目标接口
|
Adapter—>Adaptee(被适配类)
适配器

package adapter;
//DOC 源对象，只有跑的功能
public class Animal {
    public void run() {
        System.out.println("run");
    }
}

package adapter;

* DOC 目标接口，既能跑，又能飞
public interface ITarget {
    public void run();
    public void fly();
}

package adapter;

/**
 * DOC 通过构造函数引入了源对象，并实现了目标的方法
 *
 */
public class Adapter implements ITarget {
    private Animal animal;

    public Adapter(Animal animal) {
        this.animal = animal;
    }

    /**
     * DOC 拓展接口要求的新方法
     */
    public void fly() {
        System.out.println("fly");
    }

    /**
     * DOC 使用源对象的方法
     */
    public void run() {
        this.animal.run();
    }
}

9、桥接模式:
当系统可能有多角度分类，每一种分类都有可能变化，那么就把这种多角度分离出来让他们独立变化，减少他们之间的耦合
Abstraction -> Implementor
|       |       |       |
Abstr1 Abstr2   impl1   impl2

namespace CarRunOnRoad_Bridge_
 2{
 3
 4    //抽象路
 5    public abstract class AbstractRoad
 6    {
 7        protected AbstractCar car;
 8        public AbstractCar Car
 9        {
10            set
11            {
12                car = value;
13            }
14        }
15
16        public abstract void Run();
17    }
18
19    //高速公路
20    public class SpeedWay : AbstractRoad
21    {
22        public override void Run()
23        {
24            car.Run();
25            Console.WriteLine("高速公路上行驶");
26        }
27    }
28
29    //市区街道
30    public class Street : AbstractRoad
31    {
32        public override void Run()
33        {
34            car.Run();
35            Console.WriteLine("市区街道上行驶");
36        }
37    }
38}

namespace CarRunOnRoad_Bridge_
 2{
 3    //抽象汽车
 4    public abstract class AbstractCar
 5    {
 6        public abstract void Run();
 7    }
 8
 9    //小汽车;
10    public class Car : AbstractCar
11    {
12        public override void Run()
13        {
14            Console.Write("小汽车在");
15        }
16    }
17
18    //公共汽车
19    public class Bus : AbstractCar
20    {
21        public override void Run()
22        {
23            Console.Write("公共汽车在");
24        }
25    }
26}


10、命令模式
请求者持有命令对象，调用命令对象的方法，命令对象持有接受者，进而调用接受者的执行方法。

//接收者类
public class Receiver {
    //真正执行命令令逻辑的方法
   public  void action(){
       System.out.println("执行具体操作！");
   }
}

//抽象命令接口
public interface Command {
    //执行具体操作的命令
    void execute();
}

//具体命令类
public class ConcreteCommand implements Command {
    private  Receiver  receiver;//接收者作为成员变量
    public ConcreteCommand(Receiver  receiver){
        this.receiver=receiver;
    }
    //调用接收者的相关方法来执行具体逻辑
    public void execute() {
        receiver.action();
    }
}
//请求者类
public class Invoker {
    private Command command;//命令对象做成员变量
    public Invoker(Command command){
        this.command=command;
    }
    public void action(){
        //调用命令对象的相关方法，执行具体命令
        command.execute();
    }
}

11 外观模式 : 通过一个方法中，调用多个接口方法。将相关关联的方法，联系起来一起调用
class Facade
{
    private SubSystemA obj1 = new SubSystemA();
    private SubSystemB obj2 = new SubSystemB();
    private SubSystemC obj3 = new SubSystemC();

    public void Method()
    {
        obj1.MethodA();
        obj2.MethodB();
        obj3.MethodC();
    }
}

12 原型模式 : 拷贝对象，产生新的实例 ,比直接new一个对象更有效

class Prototype implements Cloneable {
    public Prototype clone(){
        Prototype prototype = null;
        try{
            prototype = (Prototype)super.clone();
        }catch(CloneNotSupportedException e){
            e.printStackTrace();
        }
        return prototype;
    }
}

class ConcretePrototype extends Prototype{
    public void show(){
        System.out.println("原型模式实现类");
    }
}
public class Client {
    public static void main(String[] args){
        ConcretePrototype cp = new ConcretePrototype();
        for(int i=0; i< 10; i++){
            ConcretePrototype clonecp = (ConcretePrototype)cp.clone();
            clonecp.show();
        }
    }
}

12、模板模式: 下面是一个列子
public abstract class Beverage {
    /**
     * 冲泡咖啡或茶...流程
     */
    public final void create(){//模板
        boilWater();//把水煮沸
        brew();//用沸水冲泡...
        pourInCup();//把...倒进杯子
        addCoundiments();//加...
    }

    public abstract void addCoundiments();//由子类执行

    public abstract void brew();//由子类执行

    public void boilWater() {//由基类执行
        System.out.println("煮开水");
    }

    public void pourInCup() {
        System.out.println("倒进杯子");
    }
}

public class Coffee extends Beverage{

    @Override
    public void addCoundiments() {
        System.out.println("添加糖和牛奶");   }

    @Override
    public void brew() {
        System.out.println("用水冲咖啡");
    }
}

public class Tea extends Beverage{

    @Override
    public void addCoundiments() {
        System.out.println("添加蜂蜜");
    }

    @Override
    public void brew() {
        System.out.println("用水冲茶");
    }

}

13 迭代器模式 : 封装遍历

14 组合模式 ：将对象聚合成树形结构来表现"整体/部分"的层次结构
abstract class AbstractFile {
    public abstract void add(AbstractFile file);
    public abstract void remove(AbstractFile file);
    public abstract AbstractFile getChild(int i);
    public abstract void killVirus();
}

public class ImageFile extends AbstractFile{
    private String name;
    public ImageFile (String name) {
        this.name = name;
    }

    public void add(AbstractFile file) {
        System.out.println("对不起，不支持该方法！");
    }

    public void remove(AbstractFile file) {
        System.out.println("对不起，不支持该方法！");
    }

    public AbstractFile getChild(int i) {
        System.out.println("对不起，不支持该方法！");
        return null;
    }

    public void killVirus() {
        // 模拟杀毒
        System.out.println("----对图像文件'" + name + "'进行杀毒----");

    }

}
public class TextFile extends AbstractFile{
    private String name;
    public TextFile (String name) {
        this.name = name;
    }

    public void add(AbstractFile file) {
        System.out.println("对不起，不支持该方法！");
    }

    public void remove(AbstractFile file) {
        System.out.println("对不起，不支持该方法！");
    }

    public AbstractFile getChild(int i) {
        System.out.println("对不起，不支持该方法！");
        return null;
    }

    public void killVirus() {
        // 模拟杀毒
        System.out.println("----对文本文件'" + name + "'进行杀毒----");

    }

}
public class Folder extends AbstractFile{
    private ArrayList<AbstractFile> fileList = new ArrayList<AbstractFile>(); // 规定集合中成员类型
    private String name;
    public Folder(String name) {
        this.name = name;
    }

    public void add(AbstractFile file) {
        fileList.add(file);
    }

    public void remove(AbstractFile file) {
        fileList.remove(file);
    }

    public AbstractFile getChild(int i) {
        return (AbstractFile)fileList.get(i); // 强制转换为类型
    }

    public void killVirus() {
        System.out.println("****对文件夹'" + name + "'进行杀毒****"); // 模拟杀毒
        // 递归调用成员构件的杀毒方法
        for (Object obj :fileList) {
            ((AbstractFile)obj).killVirus();
        }
    }
}

15 状态模式: 行为的表现取决于当前的状态,并且在行为之前，状态会相应的切换

类图

                 State接口         <-----Context
             |      |        |

  State1实现   State2实现   State3实现


public class Context {
    //持有一个State类型的对象实例
    private State state;

    public void setState(State state) {
        this.state = state;
    }
    /**
     * 用户感兴趣的接口方法
     */
    public void request(String sampleParameter) {
        //转调state来处理
        state.handle(sampleParameter);
    }
}
public interface State {
    /**
     * 状态对应的处理
     */
    public void handle(String sampleParameter);
}

public class ConcreteStateA implements State {
    @Override
    public void handle(String sampleParameter) {

        System.out.println("ConcreteStateA handle ：" + sampleParameter);
    }

}

public class ConcreteStateB implements State {
    @Override
    public void handle(String sampleParameter) {

        System.out.println("ConcreteStateB handle ：" + sampleParameter);
    }
}

public class Client {
    public static void main(String[] args){
        //创建状态
        State state = new ConcreteStateB();
        //创建环境
        Context context = new Context();
        //将状态设置到环境中
        context.setState(state);
        //请求
        context.request("test");
    }
}

16 生成器模式 : 对于复杂对象的创建。对工厂模式更复杂
Builder ：生成器接口，定义创建一个Product各个部件的操作
ConcreteBuilder：具体的生成器的实现类
Product：产品，表示被生成器构建的复杂的对象，包含多个部件
Director：主要用来使用Builder接口 ，已一个统一的接口创建Product对象

Builder
public interface PersonBuilder {
    void buildHead();
    void buildBody();
    void buildFoot();
    Person buildPerson();
}
//具体建造工具
ConcreteBuilder
public class ManBuilder implements PersonBuilder {
    Person person;
    public ManBuilder() {
        person = new Person();
    }
    public void buildbody() {
    person.setBody("建造男人的身体");
    }
    public void buildFoot() {
    person.setFoot("建造男人的脚");
    }
    public void buildHead() {
    person.setHead("建造男人的头");
    }
    public Person buildPerson() {
    return person;
}
}
//建造者
Director
public class PersonDirector {
    public Person constructPerson(PersonBuilder pb) {
        pb.buildHead();
        pb.buildBody();
        pb.buildFoot();
        return pb.buildPerson();
    }
}
Product
public class Person {
    private String head;
    private String body;
    private String foot;
    public String getHead() {
        return head;
    }
    public void setHead(String head) {
        this.head = head;
    }
    public String getBody() {
        return body;
    }
    public void setBody(String body) {
        this.body = body;
    }
    public String getFoot() {
        return foot;
    }
    public void setFoot(String foot) {
        this.foot = foot;
    }
}

Test
public class Test{
    public static void main(String[] args) {
        PersonDirector pd = new PersonDirector();
        Person person = pd.constructPerson(new ManBuilder());
        System.out.println(person.getBody());
        System.out.println(person.getFoot());
        System.out.println(person.getHead());
    }
}

17 享元模式 ：减少运行时对象实例的个数，节省内存
当一个系统中需要存在大量的对象，而且每个对象之间有很多的相同之处，我们通过将对象的属性拆分为变化的和不变化的，变化的称之为外部状态，不变的成为内部状态，将不变的部分定义成独立的对象，并在系统内部共享










