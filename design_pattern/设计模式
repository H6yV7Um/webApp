关系
1：依赖关系
2：组合关系 : 强
3：聚合关系 ：弱
4：关联关系
5：实现接口
6：继承关系

1、策略模式
父类A:提供一个抽象方法 function
不同的子类a,b,c 实现这个父类A的function方法，并且实现的方式不同，将不同的方法实现，封装在不同的子类中
类图
          A
     |——|——|
     a    b    c

代码如下：
interface TravelStrategy{
    public function travelAlgorithm();
}

/**
 * 具体策略类(ConcreteStrategy)1：乘坐飞机
 */
class AirPlanelStrategy implements TravelStrategy {
    public function travelAlgorithm(){
        echo "travel by AirPlain", "<BR>\r\n";
    }
}

/**
 * 具体策略类(ConcreteStrategy)2：乘坐火车
 */
class TrainStrategy implements TravelStrategy {
    public function travelAlgorithm(){
        echo "travel by Train", "<BR>\r\n";
    }
}
/**
 * 具体策略类(ConcreteStrategy)3：骑自行车
 */
class BicycleStrategy implements TravelStrategy {
    public function travelAlgorithm(){
        echo "travel by Bicycle", "<BR>\r\n";
    }
}

2、观察者模式
主题对象接口， 对应一个主题实现类
观察者接口，对应一个观察者实现类
主题对象先注册后观察者，当主题对象的状态改变后，会通知观察者
类图
Subject --------->Oberver
|                   |
SubjectImp <------ OberverImp


3、装饰者模式
动态给一个对象添加一些额外的职责
一个对象:代表着被装饰者
额外的职责:代表着装饰者
由于装饰者是继承被装饰者，所以"装饰"后，还可以多次在装饰
Java api中 流就是使用这种模式

类图
            被装饰者接口
           |            |
被装饰者实现        装饰者接口
                    |        |
             装饰者实现1     装饰者实现2


一个Component抽象类
package decorator;
public abstract class Meal
{
    String description = "Unknown Meal";

    public String getDescription()
    {
        return description;
    }

    public abstract double cost();
}

ConcreteComponent具体类
package decorator;
public class ChineseMeal extends Meal
{
    public ChineseMeal()
    {
        description = "Chinese Meal";
    }

    @Override
    public double cost()
    {
        return 1.0;        // 一次性餐具费用
    }

}

一个Decorator抽象类
package decorator;
public abstract class Decorator extends Meal
{
    public abstract String getDescription();
}

ConcreteDecorator具体类

// 茄子豆角
public class EggplantBean extends Decorator
{
    Meal meal;

    public EggplantBean(Meal meal)
    {
        this.meal = meal;
    }
    @Override
    public String getDescription()
    {
        return meal.getDescription() + ", 茄子豆角";
    }

    @Override
    public double cost()
    {
        return 2 + meal.cost();
    }

}

4、单列模式
保证一个类仅有一个实例，并提供一个访问它的全局访问点（public方法）
必须提供一个private 构造方法，保证这个实例不可以被其他类单独实例化，但要提供一个public方法，保证实例化在类内部完成，并且其他内可以访问这个方法。
注意多线程时的单列
1: 双重锁定(懒汉)
在加锁前，先判定是否已经存在实例
public class Singleton {
    private  volatile static Singleton singleton;
    private Singleton (){}
    public static Singleton getSingleton() {
    if (singleton == null) {//volatile变量
        synchronized (Singleton.class) {
            if (singleton == null) {
                singleton = new Singleton();
            }
        }
    }
    return singleton;
    }
}
2: 直接在static变量上初始化(饿汉)
public class Singleton {
    private static Singleton instance = new Singleton();
    private Singleton (){}
    public static Singleton getInstance() {
    return instance;
    }
}

5、代理模式:接口的实现和代理都实现了接口的方法，代理Proxy类，保存一个引用使得代理访问实体
类图
          接口
          |  |
接口的实现<-----代理（Proxy）

代理的应用场景:RPC远程调用
动态代理
1： 被代理类
2： 代理处理器，将被代理器，通过构造方法，传入。这里被代理类可以任何类型，所以是动态的
3： 代理类调用方法时，会由代理处理器接受，并通过反射机制调用被代理类的方法.

6、工厂模式
提供一个创建对象的Factory接口，由具体的工厂实现来确定所有创建具体对象的实现
类图
Object接口         Factory接口
|                        |
Object实现<--------Factory实现
(1) 简单工厂
public class McChicken implements Food{
    /*
     * 获取一份麦香鸡
     */
    public void get(){
        System.out.println("我要一份麦香鸡");
    }
}
public class Chips implements Food{
    /*
     * 获取一份薯条
     */
    public void get(){
        System.out.println("我要一份薯条");
    }
}
根据不同类型返回实例
public class FoodFactory {
    public static Food getFood(String type) throws InstantiationException, IllegalAccessException, ClassNotFoundException {
        if(type.equalsIgnoreCase("mcchicken")) {
            return new McChicken();
        } else if(type.equalsIgnoreCase("chips")) {
            return new Chips();
        } else {
            System.out.println("哎呀！找不到相应的实例化类啦！");
            return null;
        }
    }
}
(2) 抽象工厂模式 : 将工厂也设计也抽象，有不同的工厂实现
public interface AbsFactory(){
    public Pizza getFood(String type);
}

7、责任链模式 : 定义一个处理请求的接口，使多个对象继承这个处理接口，并将这些对象连成一条链，沿着这条链传递该请求，直到有一个对象处理它为止。
用于多分支的处理场景，将每个分支做为一个处理对象，并且必须前一个对象要设置后一个对象,这样就会进入一个分支（处理对象）来处理
类图
Handler ->Handler
| | |
H1H2H3

8、适配器模式 : 将一个类的接口转换成客户需要的另外一种接口，在不改变现有的类实现前提，使它能够应用于新的目标接口
主要目的扩展功能
类图
Target 目标接口
|
Adapter—>Adaptee(被适配类)
适配器

package adapter;
/**
 *
 * DOC 源对象，只有跑的功能
 *
 */
public class Animal {
    public void run() {
        System.out.println("run");
    }
}

package adapter;
/**
 * DOC 目标接口，既能跑，又能飞
 *
 */
public interface ITarget {
    public void run();
    public void fly();
}

package adapter;

/**
 * DOC 通过构造函数引入了源对象，并实现了目标的方法
 *
 */
public class Adapter implements ITarget {

    private Animal animal;

    // private animal animal2....可以适配多个对象

    public Adapter(Animal animal) {
        this.animal = animal;
    }

    /**
     * DOC 拓展接口要求的新方法
     */
    public void fly() {
        System.out.println("fly");
    }

    /**
     * DOC 使用源对象的方法
     */
    public void run() {
        this.animal.run();
    }
}

9、桥接模式:
当系统可能有多角度分类，每一种分类都有可能变化，那么就把这种多角度分离出来让他们独立变化，减少他们之间的耦合
Abstraction -> Implementor
|       |        |       |
Abstr1 Abstr2   impl1   impl2

10、命令模式
请求者持有命令对象，调用命令对象的方法，命令对象持有接受者，进而调用接受者的执行方法。

//接收者类
public class Receiver {
    //真正执行命令逻辑的方法
   public  void action(){
       System.out.println("执行具体操作！");
   }
}

//抽象命令接口
public interface Command {
    //执行具体操作的命令
    void execute();
}

//具体命令类
public class ConcreteCommand implements Command {
    private  Receiver  receiver;//接收者作为成员变量
    public ConcreteCommand(Receiver  receiver){
        this.receiver=receiver;
    }
    //调用接收者的相关方法来执行具体逻辑
    public void execute() {
        receiver.action();
    }
}
//请求者类
public class Invoker {
    private Command command;//命令对象做成员变量
    public Invoker(Command command){
        this.command=command;
    }
    public void action(){
        //调用命令对象的相关方法，执行具体命令
        command.execute();
    }
}

11 外观模式 : 通过一个方法中，调用多个接口方法。将相关关联的方法，联系起来一起调用
class Facade
{
    private SubSystemA obj1 = new SubSystemA();
    private SubSystemB obj2 = new SubSystemB();
    private SubSystemC obj3 = new SubSystemC();

    public void Method()
    {
        obj1.MethodA();
        obj2.MethodB();
        obj3.MethodC();
    }
}

12 原型模式 : 拷贝对象，产生新的实例 ,比直接new一个对象更有效

class Prototype implements Cloneable {
    public Prototype clone(){
        Prototype prototype = null;
        try{
            prototype = (Prototype)super.clone();
        }catch(CloneNotSupportedException e){
            e.printStackTrace();
        }
        return prototype;
    }
}

class ConcretePrototype extends Prototype{
    public void show(){
        System.out.println("原型模式实现类");
    }
}
public class Client {
    public static void main(String[] args){
        ConcretePrototype cp = new ConcretePrototype();
        for(int i=0; i< 10; i++){
            ConcretePrototype clonecp = (ConcretePrototype)cp.clone();
            clonecp.show();
        }
    }
}

12、模板模式: 下面是一个列子
public abstract class Beverage {
    /**
     * 冲泡咖啡或茶...流程
     */
    public final void create(){//模板
        boilWater();//把水煮沸
        brew();//用沸水冲泡...
        pourInCup();//把...倒进杯子
        addCoundiments();//加...
    }

    public abstract void addCoundiments();//由子类执行

    public abstract void brew();//由子类执行

    public void boilWater() {//由基类执行
        System.out.println("煮开水");
    }

    public void pourInCup() {
        System.out.println("倒进杯子");
    }
}

public class Coffee extends Beverage{

    @Override
    public void addCoundiments() {
        System.out.println("添加糖和牛奶");   }

    @Override
    public void brew() {
        System.out.println("用水冲咖啡");
    }
}

public class Tea extends Beverage{

    @Override
    public void addCoundiments() {
        System.out.println("添加蜂蜜");
    }

    @Override
    public void brew() {
        System.out.println("用水冲茶");
    }

}

















