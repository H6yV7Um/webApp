1、策略模式
父类A 提供一个抽象方法 function
不同的子类a,b,c 实现这个父类A的function方法，并且实现的方式不同，将不同的方法实现，封装在不同的子类中
类图
          A
     |——|——|
     a    b    c



2、观察者模式
主题对象接口， 对应一个主题实现类
观察者接口，对应一个观察者实现类
主题对象先注册后观察者，当主题对象的状态改变后，会通知观察者
类图
Subject --------->Oberver
|                   |
SubjectImp <------ OberverImp



3、装饰者模式
动态给一个对象添加一些额外的职责
一个对象:代表着被装饰者
额外的职责:代表着装饰者
由于装饰者是继承被装饰者，所以"装饰"后，还可以多次在装饰
Java api中 流就是使用这种模式

类图
            被装饰者接口
           |            |
被装饰者实现        装饰者接口
                    |        |
             装饰者实现1     装饰者实现2

4、单列模式
保证一个类仅有一个实例，并提供一个访问它的全局访问点（public方法）
必须提供一个private 构造方法，保证这个实例不可以被其他类单独实例化，但要提供一个public方法，保证实例化在类内部完成，并且其他内可以访问这个方法。
注意多线程时的单列
1: 双重锁定(懒汉)
在加锁前，先判定是否已经存在实例
2: 直接在static变量上初始化(饿汉)
