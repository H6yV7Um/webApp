网际层：
        包含两个协议ip4和ip6，ip4使用32位(4个字节)，ip6使用128位（16个字节）。数据以包在网际层传输，这些包称为数据包
        作用主要是路由和寻址，ip4包中包含源地址和目的地址
传输层：
        tcp：可靠的，允许接收方检测被破坏的包，但不保证这些包以正确的顺序传送
        udp：不可靠的，以上都不能保证

应用层：http

端口： 每台计算机一次只做一件事情，那么使用ip地址就够了，但是一个计算机完成多个事情，需要使用多个端口实现。
       每个端口可以分配给一个特定的服务。

一 流
1 字节流
输出流:OutputStream
TelnetOutputStream :    将数据写入网络连接
ByteArrayOutputStream : 将数据写入可扩展的字节数组
FileOutputStream:       将数据写入文件

输入流:InputStream
FileInputStream : 从文件中读数据
ByteArrayInputStream : 从字节数组读取数据
TelnetInputStream : 从网络连接中读取数据

对于流可以作为另一个流的构造方法参数
FileInputStream in = new FileInputStream("data.txt")
in = new BufferedInputStream(in);
大多数情况下,应当只使用链中最后一个流进行实际的读/写操作.

缓冲流:BufferedOutputStream类将写入的数据存储在缓冲区中,然后它将数据一次全部写入底层输出流

数据流:DataInputStream和DataOutputStream,可以用二进制格式读/写java的基本数据类型和字符串

2 字符流
Reader
Writer

二 Internet地址
IPv4 : 四个无符号字节(152.19.134.132)
IPv6 : 冒号分隔8块,每块是4个16进制数字(2400:cb00:2048:0001:0000:0000:6ca2:c665)

三 InetAddress类: 是java对ip地址一种表示
InetAddress localHost = InetAddress.getLocalHost();

1 可以通过getHostName(),getCanonicalHostName(),getAddress(),getHostAddress(),将主机名作为字符串返回
2 缓存,InetAddress会缓存查找结果
3 InetAddress对象是否符合某个标准
    isAnyLocalAddress,是否是通配地址
    isLoopbackAddress,是否是回送地址
    isLinkLocalAddress,是否是一个Ipv6本地链接地址
    isSiteLocalAddress,是否是一个IPv6本地网站地址
    isMulticastAddress,是否是一个组播地址
    isMCGlobal,是否全球组播地址
    isMCOrgLocal,是否是组织范围地址
    isMCSiteLocal,是否是网站范围组播地址
    isMCLinkLocal,是一个子网范围组播地址
    isMCNodeLocal,是否本地接口组播地址

4 测试可达性(能否建立一个网络链接)
    InetAddress address = InetAddress.getByName(ip);
    isReachable 方法
    判断本地机器与ip机器的连通性

5 覆盖Object方法: equals,hashcode,toString
    equals 比较的是InetAddress的ip地址

 6、NetworkInterface
四 URL
1  相对路径 再浏览 http://www.ibiblio.org/javafaq/javatutorial.html时,单击超链接<a href="javafaq.html">
   会跳转http://www.ibiblio.org/javafaq/javafaq.html

2  绝对路径 还是浏览上面的页面,单击<a href="/projects/ipv6">
   会跳转http://www.ibiblio.org/projects/ipv6

3  支持的协议包括 : http,https,ftp,mailto,file,jar

4  openStream方法(从URL获取数据)
    URL url = new URL("http://www.lolcats.com");
    try {
        System.out.write(c);
        InputStream inputStream = url.openStream();
        int c;
        while ((c = inputStream.read())!=-1)
        inputStream.close();
    } catch (IOException e) {
        e.printStackTrace();
    }
5 openConnecion方法:为指定的URL打开一个socket,并返回一个URLConnection

6 getContent: 可以下载内容

7 URL具体的信息
URL url = new URL("https://www.jd.com");
        System.out.println("File =" + url.getFile());
        System.out.println("Host =" + url.getHost());
        System.out.println("Port =" + url.getPort());
        System.out.println("Protocol =" + url.getProtocol());
        System.out.println("Ref =" + url.getRef());
        System.out.println("Query =" + url.getQuery());
        System.out.println("Path =" + url.getPath());
        System.out.println("UserInfo =" + url.getUserInfo());
        System.out.println("Authority =" + url.getAuthority());

URL相等性比较
    URL类包括通常的equals()和hashcode()方法。
    当两个URL都指向相同主机，端口和路径上的相同资源，而且有相同的片段标示符合查询字符串时才相等。
8 URI是对URL的抽象,实际使用的URI大多是URL,但大多数规范和标准都是用URI定义的

9 URLEncoder.encode("字符串",UTF-8);//对字符串进行编码
  UriUtils.encode(bodyJsonString, "utf-8") // RFC3986 标准
10 URLDecoder.decode("字符串",UTF-8);//对字符串进行解码

11 代理
   Proxy类： 允许你为不同的远程主机选择不同的代理服务器。
   代理本身用java.net.Proxy类的实例来表示。
   三种代理： Http、Socks、Direct
   代理的其他信息用SocketAddress对象标示

五 URLConnection 表示指向URL指定资源的活动连接
URL中openConnection(); 方法可以获得
1 getInputStream 读取服务器的方法
2 读取首部信息
3 缓存 在首部中会有cache-control 包括下面内容
max-age 从现在开始直到缓存项过期之前的秒数
s-maxage 从现在器,直到缓存项在共享缓存中过期之前的秒数,私有缓存可以将缓存保存更久
public
private
no-cache : 需要用一个Etag或Last-modified首部
no-store : 不缓存

六 客户端Socket : 可以将网络连接看作是另一个可以读/写字节的流
可以连接远程机器,发送数据,接收数据,关闭连接,绑定端口,监听入站数据,绑定端口上接收来自远程机器的连接
1 通过InputStream 从服务器读
2 通过OutStream 往服务器写
3 close方法关闭输入和输出,shutdownInput和shutdownOutput只关闭一半
4 Socket是java完成客户端TCP操作的基础类
5 Socket地址(SocketAddress 这些信息可以重用来创建新的Socket)
6 可以指定本地的用那个端口创建Socket连接
7 Socket异常
BindException: 没有足够的权限使用这个端口
ConnectException: 连接被远程拒绝
NoRouteToHostException: 连接超时

七 服务器Socket:ServetSocket类表示服务器Socket
服务器Socket等待连接,而客户端Socket发起连接

1: ServetSocket构造函数创建一个新的ServerSocket
2: ServetSocket使用accept()方法监听(是阻塞方法)
3: 调用getInputStream方法和getOutStream方法,与客户端通信
4: 关闭连接
5: 服务器继续监听 , 在循环里accept
6: 多线程服务器,每个请求连接,对应一个线程

八
1:创建安全客户端Socket
SocketFactory factory = SSLSocketFactory.getDefault();
Socket socket = factory.createSocket("login.ibiblio.org",7000)

2:创建安全服务器Socket
SSLServerSocketFactrory.getDefault();
createServetSocket()












