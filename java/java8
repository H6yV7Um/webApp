一： lambda表达式
Lambda表达式的语法
http://www.importnew.com/16436.html
基本语法:
(parameters) -> expression
或
(parameters) ->{ statements; }
(1)for循环
String[] atp = {"Rafael Nadal", "Novak Djokovic","Stanislas Wawrinka","David Ferrer","Roger Federer",
       "Andy Murray","Tomas Berdych",
       "Juan Martin Del Potro"};
List<String> players =  Arrays.asList(atp);

// 以前的循环方式
for (String player : players) {
     System.out.print(player + "; ");
}

// 使用 lambda 表达式以及函数操作(functional operation)
players.forEach((player) -> System.out.print(player + "; "));

(2)内部类
// 使用匿名内部类
btn.setOnAction(new EventHandler<ActionEvent>() {
          @Override
          public void handle(ActionEvent event) {
              System.out.println("Hello World!");
          }
});

// 或者使用 lambda expression
btn.setOnAction(event -> System.out.println("Hello World!"));
方法引用


// 使用匿名内部类
new Thread(new Runnable() {
    @Override
    public void run() {
        System.out.println("Hello world !");
    }
}).start();

// 使用 lambda expression
使用()替代匿名内部类
new Thread(() -> System.out.println("Hello world !")).start();
Runnable s = () -> {
    try {
        Thread.sleep(100);
    } catch (InterruptedException e) {
        e.printStackTrace();
    }
};
new Thread(s).start();


(3)排序
String[] players = {"Rafael Nadal", "Novak Djokovic",
    "Stanislas Wawrinka", "David Ferrer",
    "Roger Federer", "Andy Murray",
    "Tomas Berdych", "Juan Martin Del Potro",
    "Richard Gasquet", "John Isner"};

// 1.1 使用匿名内部类根据 name 排序 players
Arrays.sort(players, new Comparator<String>() {
    @Override
    public int compare(String s1, String s2) {
        return (s1.compareTo(s2));
    }
});
使用 lambda expression
Arrays.sort(players, (String s1, String s2) -> (s1.compareTo(s2)));
使用方法引用的方式
Arrays.sort(players , String::compareTo);


Predicate结合使用
List<String> languages = Arrays.asList("Java", "Scala", "C++", "Haskell", "Lisp");
System.out.println("Languages which starts with J :");
filter(languages, (str)->str.toString().startsWith("J"));

public static void filter(List<String> names, Predicate condition) {
    for(String name : names)  {
        if(condition.test(name)) {
            System.out.println(name + " ");
        }
    }
}

Predicate<String> startsWithJ = (n) -> n.startsWith("J");
Predicate<String> fourLetterLong = (n) -> n.length() == 4;
names.stream().filter(startsWithJ.and(fourLetterLong)).forEach((n) ->
System.out.print("nName, which starts with 'J' and four letter long is : " + n));


构造器引用：
List<String> labels = Arrays.asList("button1","button2");
Stream<Button> stream = labels.stearm().map(Button::new); //相当于new button
List<Button> buttons = stream.collect(Collectors.toList());


Java 8中使用lambda表达式的Map和Reduce
List costBeforeTax = Arrays.asList(100, 200, 300, 400, 500);
double bill = costBeforeTax.stream().map((cost) -> cost + .12*cost).reduce((sum, cost) -> sum + cost).get();
或者
double bill = costBeforeTax.stream().map((cost) -> cost + .12*cost).sum();
System.out.println("Total : " + bill);


通过过滤得到一个新的list
List<String> filtered = strList.stream().filter(x -> x.length()> 2).collect(Collectors.toList());
System.out.printf("Original List : %s, filtered list : %s %n", strList, filtered);


// 将字符串换成大写并用逗号链接起来
List<String> G7 = Arrays.asList("USA", "Japan", "France", "Germany", "Italy", "U.K.","Canada");
String G7Countries = G7.stream().map(x -> x.toUpperCase()).collect(Collectors.joining(", "));
System.out.println(G7Countries);



(4)使用Lambdas和Streams
Stream是对集合的包装,通常和lambda一起使用。
使用lambdas可以支持许多操作,如 map, filter, limit, sorted, count, min, max, sum, collect 等等。

System.out.println("下面是月薪超过 $1,400 的PHP程序员:")
phpProgrammers.stream().filter((p) -> (p.getSalary() > 1400))
.forEach((p) -> System.out.printf("%s %s; ", p.getFirstName(), p.getLastName()));


Java API 在java.util.function包中定义了许多通用的函数式接口 : 任何一个lambda表达式，都可以等价转换现在所使用的API对应的函数式接口

计算集合元素的最大值、最小值、总和以及平均值
List<Integer> primes = Arrays.asList(2, 3, 5, 7, 11, 13, 17, 19, 23, 29);
IntSummaryStatistics stats = primes.stream().mapToInt((x) -> x).summaryStatistics();
System.out.println("Highest prime number in List : " + stats.getMax());
System.out.println("Lowest prime number in List : " + stats.getMin());
System.out.println("Sum of all prime numbers : " + stats.getSum());
System.out.println("Average of all prime numbers : " + stats.getAverage());

lambda 表达式可以都得到作用域中的变量值，但是不可以在lambda表达式中，修改被引用的变量值。

二： Stream API
1 从迭代器到Stream操作
不支持并行计算
for(String w : words){
    if(w.length>12) count++;
}
支持并行计算
long count = words.parallelStream().filter(w-> w.length()>12).count();

三： 新的日期和时间API
Instant start = Instant.now();
Instant end = Instant.now();
Duration time = Duration.between(start,end);
long millis = time.toMillis();
System.out.println("=====mills===="+millis);

LocalDate today = LocalDate.now();
LocalDate alonzosBirthday = LocalDate.of(1999,6,10);

LocalTime rightNow = LocalTime.now();
LocalTime bedtime = LocalTime.of(22,30);


四 并发增强
1 原子值
当你有大量线程访问一个原子值时，由于乐观锁更新需要太多次重试
java8
LongAdder和LongAccumulator来解决该问题。
LongAdder由多个变量组成，这个变量累加的值即为当前值。
多个线程可以更新不同的被加数，当线程数量增加是会自动增加新的
可以使用LongAdder来代替AtomicLong


2 ConcurrentHashMap改进
(1)更新值：
原来的ConcurrentHashMap只有一些用于原子更新的方法，这也带来了一些糟糕的编程方式.
java8提供了许多可以更方便进行原子更新的方法。
compute方法可以通过一个键和一个函数来计算出新的值。该函数会获取键及其所关联的值，然后计算出新的值

(2)批量数据操作
批量数据操作会遍历映射并对匹配的元素进行操作。

3 并行数组操作
Arrays类现在有了许多并行化的操作，静态方法Arrays.parallelSort可以对原始类型数组或者对象数组进行排序

4 可完成的Future

五 其他内容的改进






