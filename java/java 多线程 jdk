1、信号量：是对锁的扩展，无论是内部锁synchronized 还是重入锁ReentrantLock。
    一次只允许线程访问一个资源，信号量可以指定多个线程，同时访问某一个资源。
public class SemapDemo implements Runnable{
    final Semaphore semp = new Semaphore(5); //可以同时5个线程进入
    public void run{
        try{
            semp.acquire();
            Thread.sleep(2000);
            System.out.println()
        }catch(Exception e){
        }
    }
    public static void main(String[] args){
        ExecutorService exec = Executors.newFixedThteadpool(20)
        final SemapDemo demo = new SemapDemo();
            for(int i = 0 ; i < 20 ;i++){
             exec.submit(demo)
        }
    }
}

2、读写锁 ReadWriteLock
   对于：读读操作，不需要加锁,是非阻塞的。

3、CountDownLatch: 只有当计数器降为0，才会继续执行。
http://www.jianshu.com/p/7c7a5df5bda6?ref=myread
CountDownLatch : AQS共享功能
 MerchantStrategyExample strategyExample = new MerchantStrategyExample();
        List<MerchantStrategy> merchantStrategyList = subMerchantStrategyMapper.selectByExample(strategyExample);
        final List<JSONObject> merchantInfoList = Lists.newArrayList(); //商户策略id和商户id
        int threadNum = merchantStrategyList.size();
        final CountDownLatch countDownLatch = new CountDownLatch(threadNum);
        for (int i = 0; i < threadNum; i++) {
            final int finalI = i;
            new Thread(() -> {
                try {
                    for (TradePromotVO tradePromotVO : tradePromotVOList) {
                        PromotCampaign promotCampaign = new PromotCampaign();
                        promotCampaign.setMerchantStrategyId(merchantStrategyList.get(finalI).getId());
                        ValidResultVO<ValidCampaignResp> merchantValidResult = merchantStrategy.execStrategy(tradePromotVO, promotCampaign);
                        if (!merchantValidResult.getSuccess()) {
                            JSONObject merchantInfo = new JSONObject();
                            merchantInfo.put("merchantStrategyId", merchantStrategyList.get(finalI).getId());
                            merchantInfo.put("merchantId", tradePromotVO);
                            merchantInfoList.add(merchantInfo);
                        }
                    }
                } catch (Exception e) {
                    logger.error("POI商户详情页展示，queryValidateMerchant异常,错误信息为：{}", e.getMessage());
                } finally {
                    countDownLatch.countDown();
                }
            }).start();
        }
        try {
            countDownLatch.await();
        } catch (InterruptedException e) {
            logger.error("POI商户详情页展示，queryValidateMerchant InterruptedException 异常,错误信息为：{}", e.getMessage());
        }
4、CyclicBarrier 循环栅栏

5、LockSupport 用于在线程内任意位置让线程阻塞。
   不需要先获得某个对象的锁，也不会抛出InterruptedException异常。

6、Executor框架：
   Eexcutors线程工厂类
       (1) newSingleThreadScheduledExecutor() :
       (2) newScheduledThreadPool(): 返回ScheduleExecutorService对象。
           都可以在某个固定时间的延时之后执行，或者周期性执行某个任务。
           与其他线程池不同的时，返回的是一个ScheduledExecutorService

   ThreadPoolExecutor 构造方法
       ThreadPoolExecutor(int corePoolSize, int maximumPoolSize,long keepAliveTime, TimeUnit unit,BlockingQueue<Runnable> workQueue,RejectedExecutionHandler handler)
       参数含义
           corePoolSize： 线程池维护线程的最少数量
           maximumPoolSize：线程池维护线程的最大数量
           keepAliveTime： 线程池维护线程所允许的空闲时间
           unit： 线程池维护线程所允许的空闲时间的单位
           workQueue： 线程池所使用的缓冲队列
                SynchronousQueue : 可以理解他是一个数据交换通道
                    是一个特殊的BlockingQueue。
                    没有实际容量(不存放数据，而是存放线程)
                    每个插入操作都要等待一个相应的删除操作。相反，每个删除操作都要等到相应的插入操作。
                    如果没有空闲进程，则尝试创建新的进程，如果进程数量已经达到最大值，则执行拒绝操作。
		     Executors.newCachedThreadPool()就使用了SynchronousQueue

                ArrayBlockingQueue: 有界队列
                    当使用有界的队列时
                    若有新的任务需要执行，如果线程池的实现线程数小于corePoolSize，则会优先创建新的线程
                    若大于corePoolSize，则会将新任务加入等待队列。
                    若等待队列已满，无法加入，则在总线程不大于maximumPoolSize的前提下，创建新的进程执行任务。
                    若大于maximumPoolSize,则执行拒绝策略。
                    综上：只有当有界队列满时，才可能线程数提升到corePoolSize以上。

                LinkedBlockingQueue: 无界队列
                    当有新的人到来，系统的线程数小于corePoolSize时，线程池会生产新的线程执行任务，
                    但当系统的线程数达到corePoolSize时，线程池会生成新的线程执行任务，但当系统的线程数达到maximumPoolSize，就不会继续增加。
                    随后的任务一直会加入队列中。如果处理任务的速度小于加入队列的任务速度，就会内存溢出。

                PriorityBlockingQueue: 优先级队列
                    优先任务队列时带执行优先级的队列，它PriorityBlockingQueue实现，可以控制任务的执行顺序。

           handler： 线程池对拒绝任务的处理策略
                当任务数量超过系统实际承载能力时，就是线程池中的线程已经用完，无法继续为新任务服务，同时等待队列已经排满，再也塞不下新任务。
                1、AbortPolicy：该策略会直接抛出异常
                2、CallerRunsPolicy：在调用者线程中，运行当前被丢弃的任务
                3、DiscardOledestPolicy:丢弃最老的任务，提交当前任务
                4、DiscardPolicy：如果这个任务允许丢弃，就会丢弃

           ThreadFactory: newThread方法，要新建线程时，就会调用这个方法。

           线程池的大小：公式
                    cpu 数量
                    ucpu 目标cpu使用率
                    w/c 等待时间与计算时间的比
                    nthread = cpu * ucpu * （1+w/c）

   并发容器
        1、ConcurrentHashMap：这是一个高效的HashMap。你可以理解为一个线程安全的HashMap

        2、CopyOnWriteArrayList：在读多写少的场合，List的性能非常好，远远好于Vector
           读取时完全不用加锁的，并且更好的消息是： 写入也不会阻塞读取操作。只有写入和写入之间需要进行同步。
           CopyOnWrite : 就是在写入操作时，进行一次自我复制。当这个List需要修改时，并不直接修改原有的内容。而是对原来的数据进行一次复制，
           将修改的内容写入副本。写完之后，再将修改完的副本替换原来的数据。

        3、ConcurrentLinkedQueue：高效的并发队列，使用链表实现。可以看做一个线程安全的LinkedList
           在高并发环境中性能最好的队列就可以了。
           没有任何锁操作，线程安全完全由CAS操作和队列的算法来保证.

        4、BlockingQueue：这是一个接口，JDK内部通过链表，数组等方式实现了这个接口。

        5、ConcurrentSkipListMap ：跳表的实现。这是一个Map，使用跳表的数据结构进行快速查找。

7、ThreadLoacl(不需要加锁)
        1、当前线程的局部变量，只有当前线程可以访问
           ThreadLocal<SimpleDateFormat> 可以保证每个线程都只有一个SimpleDateFormat对象.
        2、内部通过ThreadLocalMap来保证

8、CAS比较交换 : 原子变量就是使用这样的方式。
        CAS(v,e,n)
        V表示要更新的变量，E表示预期值，N表示新值。
        仅当V值等于E值时，才会将V的值设为N，如果V值和E值不同，则说明已经有其他线程做了更新，则当前线程什么都不做。

9、新框架实现(Disruptor)：无锁内存队列

10、Future模式

11、jdk1.8 CompletableFuture:增强了Future
    这个API有Future的优点，并且弥补了其缺点。即异步的任务完成后，需要用其结果继续操作时，无需等待。
    可以直接通过thenAccept、thenApply、thenCompose等方式将前面异步处理的结果交给另外一个异步事件处理线程来处理。

    参考文档：http://www.tuicool.com/articles/FFziqm











