第1部分 基本概念
1. 并发 : 线程之间如何通信及线程之间如何同步
    (1) 通信 ―― 是指线程之间如何交换信息。在命令式编程中，线程之间的通信机制有两种：共享内存和消息传递。
    (2) 同步―― 是指程序用于控制不同线程之间操作发生相对顺序的机制。在Java中，可以通过volatile，synchronized, 锁等方式实现同步。

2.主内存和本地内存
   主内存     ―― 即main memory。在java中，实例域、静态域和数组元素是线程之间共享的数据，它们存储在主内存中。
   本地内存 ―― 即local memory。 局部变量，方法定义参数 和 异常处理器参数是不会在线程之间共享的，它们存储在线程的本地内存中。
   普通变量的内存语义：
    线程可以把变量保存在本地内存（比如机器的寄存器）中，而不是直接在主存中进行读写。
    这就可能造成一个线程在主存中修改了一个变量的值，而另外一个线程还继续使用它在寄存器中的变量值的拷贝，造成数据的不一致。

3.重排序 ：重排序是指“编译器和处理器”为了提高性能，而在程序执行时会对程序进行的重排序。
    (1)重排序分为――“编译器”和“处理器”两个方面，而“处理器”重排序又包括“指令级重排序”和“内存的重排序”。
    (2)但是对于多线程程序，重排序可能会导致程序执行的结果不是我们需要的结果！因此，就需要我们通过“volatile，synchronize，锁等方式”作出正确的实现同步。

4.内存屏障 : 通过内存屏障可以禁止特定类型处理器的重排序，从而让程序按我们预想的流程去执行

5. happens-before:
   用于描述多线程操作之间的内存可见性。如果一个操作执行的结果需要对另一个操作可见，那么这两个操作之间必须存在happens-before关系。
   (1)[程序顺序规则]：一个线程中的每个操作，happens- before 于该线程中的任意后续操作。
   (2)[监视器锁规则]：对一个监视器锁的解锁，happens- before 于随后对这个监视器锁的加锁。
   (3)[volatile变量规则]：对一个volatile域的写，happens- before 于任意后续对这个volatile域的读。
   (4)[传递性]：如果A happens- before B，且B happens- before C，那么A happens- before C。

6. 数据依赖性:如果两个操作访问同一个变量，且这两个操作中有一个为写操作，此时这两个操作之间就存在数据依赖性。
   编译器和处理器不会对“存在数据依赖关系的两个操作”执行重排序
   数据依赖分下列三种类型:
   名称	    代码示例	    说明
   写后读	a = 1;b = a;	写一个变量之后，再读这个位置。
   写后写	a = 1;a = 2;	写一个变量之后，再写这个变量。
   读后写	a = b;b = 1;	读一个变量之后，再写这个变量。
   但数据依赖性：只有在单线程中可以保证执行顺序，在多线程中就不能保证了。

7.as-if-serial(不存在数据依赖性) : 对于单线程， 不管怎么重排序，程序的执行结果不能被改变
  例如:
      double pi = 3.14 // A
      double r = 1.0 // B
      double area = pi * r * r // C
      A -> B -> C
      B -> A -> C
  顺序不一样，不影响执行结果

8.顺序一致性内存模型：它是理想化的内存模型。
  有以下规则：
  (1) 一个线程中的所有操作必须按照程序的顺序来执行。
  (2) 所有线程都只能看到一个单一的操作执行顺序。在顺序一致性内存模型中，每个操作都必须原子执行且立刻对所有线程可见。

9.JMM : Java内存模型 它是Java线程之间通信的控制机制
  说明：JMM对Java程序作出保证:
        如果程序是正确同步的，程序的执行将具有顺序一致性。即，程序的执行结果与该程序在顺序一致性内存模型中的执行结果相同。

10.可见性 : 一般用于指不同线程之间的数据是否可见
    在java中,实例域、静态域和数组元素这些数据是线程之间共享的数据，它们存储在主内存中；主内存中的所有数据对该内存中的线程都是可见的。
    而局部变量，方法定义参数 和 异常处理器参数这些数据是不会在线程之间共享的，它们存储在线程的本地内存中；它们对其它线程是不可见的。
    此外，对于主内存中的数据，在本地内存中会对应的创建该数据的副本(相当于缓冲)；这些副本对于其它线程也是不可见的。

11.原子性 : 是指一个操作是按原子的方式执行的。要么该操作不被执行；要么以原子方式执行，即执行过程中不会被其它线程中断

第2部分 同步机制
1.volatile
    1.1 作用
      volatile变量自身具有下列特性：
        [可见性]：对一个volatile变量的读，总是能看到（任意线程）对这个volatile变量最后的写入。
        [原子性]：对任意单个volatile变量的读/写具有原子性，但类似于volatile++这种复合操作不具有原子性。

    1.2 volatile的内存语义
      volatile写：当写一个volatile变量时，JMM会把该线程对应的本地内存中的共享变量刷新到主内存。
      volatile读：当读一个volatile变量时，JMM会把该线程对应的本地内存置为无效。线程接下来将从主内存中读取共享变量。

    1.3 volatile和synchronize的区别
        volatile仅仅保证对单个volatile变量的读/写具有原子性；而synchronize锁的互斥执行的特性可以确保对整个临界区代码的执行具有原子性。

2.锁
2.1 作用 锁是java并发编程中最重要的同步机制。

2.2 锁的内存语义
     (1) 线程A释放一个锁，实质上是线程A向接下来将要获取这个锁的某个线程发出了（线程A对共享变量所做修改的）消息。
     (2) 线程B获取一个锁，实质上是线程B接收了之前某个线程发出的（在释放这个锁之前对共享变量所做修改的）消息。
     (3) 线程A释放锁，随后线程B获取这个锁，这个过程实质上是线程A通过主内存向线程B发送消息。

2.3 JMM如何实现锁
    公平锁
        公平锁是通过“volatile”实现同步的。公平锁在释放锁的最后写volatile变量state；在获取锁时首先读这个volatile变量。
        根据volatile的happens-before规则，释放锁的线程在写volatile变量之前可见的共享变量，
        在获取锁的线程读取同一个volatile变量后将立即变的对获取锁的线程可见。
    非公平锁
        通过CAS实现的，CAS就是compare and swap。CAS实际上调用的JNI函数，也就是CAS依赖于本地实现。
        以Intel来说，对于CAS的JNI实现函数，它保证：(1)禁止该CAS之前和之后的读和写指令重排序。(2)把写缓冲区中的所有数据刷新到内存中。


3.final
3.1 特性
    对于基本类型的final域，编译器和处理器要遵守两个重排序规则：
        (1) final写：“构造函数内对一个final域的写入”，与“随后把这个被构造对象的引用赋值给一个引用变量”，这两个操作之间不能重排序。
        (2) final读：“初次读一个包含final域的对象的引用”，与“随后初次读对象的final域”，这两个操作之间不能重排序。

    对于引用类型的final域，除上面两条之外，还有一条规则：
        (3) final写：在“构造函数内对一个final引用的对象的成员域的写入”，与“随后在构造函数外把这个被构造对象的引用赋值给一个引用变量”，这两个操作之间不能重排序。

    注意：
        写final域的重排序规则可以确保：
        在引用变量为任意线程可见之前，该引用变量指向的对象的final域已经在构造函数中被正确初始化过了。
        其实要得到这个效果，还需要一个保证：在构造函数内部，不能让这个被构造对象的引用为其他线程可见，也就是对象引用不能在构造函数中“逸出”。

3.2 JMM如何实现final
    通过“内存屏障”实现。
    在final域的写之后，构造函数return之前，插入一个StoreStore障屏。在读final域的操作前面插入一个LoadLoad屏障。


