第一部分：自动内存管理机制

第2章 java内存区域与内存溢出异常
一、运行时数据区域
(1) 程序计数器是一块较小的内存空间，它可以看作是当前线程所执行的字节码的行号指示器。
字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令
由于java虚拟机的多线程是通过线程轮流切换并分配处理执行时间的方式来实现的，在任何一个确定的时刻，一个处理器都只会执行一条线程中的指令
因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要一个独立的程序计数器，各条线程之间计数器互不影响。所有线程私有的内存
注意：
如果线程正在执行的是一个java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址
如果正在执行的是Native方法，这个计数器值为空。
是唯一一个没有OutOfMemoryError的区域

(2) java虚拟机栈
1、java虚拟机栈也是线程私有的。
虚拟机栈描述的是java方法执行的内存模型：
每个方法在执行的同时都会创建一个栈帧用于存放局部变量表，操作数栈，动态链接，方法出口的信息
局部变量表存放了编译期可知的各种基本数据类型和对象引用

其中64位长度的long和double类型的数据会占用2个局部变量空间
其余的数据类型只占用1个。
局部变量表所需的内存空间在编译期间完成分配,运行期间不会改变局部变量表的大小

2、规定了两种异常: 如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError异常;
如果虚拟机栈可以动态扩展，如果扩展无法申请到足够的内存，就会抛出OutOfMemoryError异常

(3) 本地方法栈 : 虚拟机使用到的Native方法服务。

(4) Java堆: 线程共享,内存最大
此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存
Java堆是垃圾收集器的主要区域，因此很多时候也被做"GC堆"
由于现在垃圾收集器采用分代收集算法，所以java堆中还可以细分为：新生代和老年代

(5) 方法区与java堆一样，是各个线程共享的内存区域，用于存储已被虚拟机加载的类信息，常量，静态变量，即时编译器编译后的代码等数据

(6) 运行时常量池 ： 是方法区的一部分 Class文件中除了有类的版本、字段、方法、接口等信息。
还有一项信息是常量池，用于存放编译期生成的各种字面量和符号引用。

(7) 直接内存： 并不是虚拟机运行时数据区的一部分
Channel和Buffer，它可以使用Native函数库直接分配的堆外内存，然后通过一个存储在java堆中的DirectByBuffer对象作为这块内存的引用进行操作
避免了再java堆和Native堆中来回复制数据

二、HotSpot虚拟机对象探秘
(1) 对象创建
虚拟机遇到一条new指令时，首先将去检查这个指令的参数是否在常量池中定位一个类的符号引用，并且检查这个符号引用代表的类是否被加载过
如果没有，先执行相应的类加载过程
类加载通过后，接下来虚拟机将为新生对象分配内存。对象所需内存大小在类加载完成后便可以确定。
假设java堆内存是规整的，所有用过的内存都放在一边，空闲的内存放在另一边，中间放着一个指针作为分界点的指示器，每次分配内存是把指针向空闲那边移动，这种分配的方式zh




