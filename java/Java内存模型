基础
    1、实例域、静态域和数组元素存储在堆内存中，堆内存在线程之间共享
    2、局部变量、方法参数、异常处理参数 不会共享

Java内存模型的抽象
一、java线程之间的通信由java内存模型控制
    1、JMM决定一个线程对共享变量的写入何时对另一个线程可见
    2、JMM定义了线程和主内存之间的抽象关系：
        线程之间的共享变量存储在主内存中，每个线程有一个私有的本地内存，
        本地内存中存储了该线程以读/写共享变量的副本。

二、线程A与线程B通信步骤
    1、线程A把本地内存A中更新过的共享变量刷新到主内存中
    2、线程A给线程B发消息，线程B到主内存中读取线程A之前已更新过的共享变量

三、重排序 ：编译器和处理器会对指令做重排序
    1、编译器优化的重排序：
       在不改变单线程语义的前提下，可以重新安排语句的执行顺序
    2、指令级并行的重排序:
       处理器采用了指令级并行技术来将多条指令重叠执行，如果不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序
    3、内存系统的重排序：
       处理器使用缓存和读写缓冲区，这使得加载和存储操作看上去可能是在乱序执行
    源代码都要经历上面3步后，成为最终的执行指令的序列

    上面的重排序可能会导致多线程程序出现内存可见性问题
        JMM的编译器重排序规则会禁止特定类型的编译器重排序
        JMM的处理器重排序规则会要求java编译器在生成指令序列时，插入特定类型的内存屏障指令来禁止特定类型的处理器重排序。

四、处理器重排序与内存屏障指令
    为了保证内存可见性:
        Java编译器在生成指令序列的适当位置会插入内存屏蔽指令来禁止特定类型的处理器重排序

    JMM内存屏障指令
        1: LoadLoad屏障 ：
           确保Load1数据装载，先于Load2及所有后续装载指令的装载。
        2: StoreStore屏障：
           确保Store1数据对其他处理器可见，先于Store2及所有后续存储指令的存储。
        3: LoadStore屏障：
           确保Load1数据装载，先于Store2及所有后续的存储指令刷新到内存。
        4: StoreLoad屏障：
           确保Store1数据对其他处理器变得可见，先于Load2及所有后续装载指令的装载。

五、happens-before : 从JDK5开始,java使用新的JSR-133内存模型，该模型使用happens-before的概念阐述操作之间的内存可见性。
    JMM中，如果一个操作执行的结果需要对另一个操作可见，那么这两个操作之间必须要存在happens-before关系
    happens-before 规则如下
        1、程序顺序规则 ：一个线程中的每个操作，happens-before于该线程中的任意后续操作
        2、监视器锁规则 : 一个监视器的锁，happens-before 于随后对这个监视器的加锁
        3、volatile变量规则 ： 对一个volatile域的写，happens-before 于任意后续对这个volatile域的读
        4、传递性 如果A happens-before B，且B happens-before C ，那么A happens-before C
    注意：
    两个操作之间具有happens-before关系，并不意味着前一个操作必须在后一个操作之前进行。仅仅要求前一个操作对后一个操作可见。并且前一个操作按顺序排在第二个操作之前。

六 重排序
    1、数据依赖性 : 只有在单线程中可以保证执行顺序
       如果两个操作访问同一个变量，且这两个操作中有一个写操作，此时这两个操作之间就存在数据依赖性，不会重排序

    2、as-if-serial语义: 编译器和处理器不会对存在数据依赖关系的操作做重排序，因为这种重排序会改变执行结果。但是不存在数据依赖关系，可能被重排序
        double pi = 3.14 //A
        double r = 1.0 //B
        double area = pi * r * r //C
        实际的执行顺序：A->B->C 或者 B->A->C，因为A和B没有相互依赖性关系,重排序不非法

    3、程序顺序规则
        根据happens-before的程序顺序规则，上面代码存在三个happens-before关系
            1 A happens-before B
            2 B happens-before C
            3 A happens-before C
        这里的第3个 happens-before关系，是根据happens-before的传递性得来的
        这里A happens-before B，但实际执行时B却可以排在A之前执行。
        备注：JMM并不要求A一定要在B之前执行，JMM仅仅要求前一个操作对后一个操作可见，且前一个操作按顺序排在第二个操作之前。

七、重排序对多线程的影响 :
    public class Reorder {
        int a = 0;
        boolean flag = false;

        public void writer(){
            a = 1;//操作1
            flag = true;//操作2
        }
        操作1和操作2没有数据依赖关系，编译器和处理器可以对两个操作重排序
        会对结果有影响
        public void reader(){
            if (flag)//操作3
            {
                int i  = a*a ;//操作4
            }
        }
        同样操作3和操作4没有数据依赖关系，编译器和处理器可以对两个操作重排序
        同样会对结果有影响
    }

七、顺序一致性
    1、数据竞争与顺序一致性保证(避免竞态条件)
       当程序未正确同步时，就会存在数据竞争,java内存模型对数据竞争的定义如下
          1、在一个线程中写一个变量，
          2、在另一个线程读同一个变量，
          3、而且写和读没有通过同步来排序。
       但如果一个多线程程序能正确同步，就不会有数据竞争。

       JMM对正确同步的多线程程序的内存一致性做了如下保证：如果程序是正确同步的，程序的执行将具有顺序一致性–即程序的执行结果与该程序在顺序一致性内存模型中的执行结果相同。

    2、顺序一致性内存模型特点
        一个线程中的所有操作必须按照程序员的顺序来执行。
       所有线程都只能看到一个“单一的操作执行顺序”。在顺序一致性内存模型中，每个操作都必须原子执行且立刻对所有线程可见

       顺序一致性模型有一个单一的全局内存，这个内存通过一个左右摆动的开关可以连接到任意一个线程。同时，每一个线程必须按程序的顺序来执行内存读/写操作。
       从上图我们可以看出，在任意时间点最多只能有一个线程可以连接到内存。当多个线程并发执行时，图中的开关装置能把所有线程的所有内存读/写操作串行化
       线程1   线程2   线程3    线程4
                 |
                 |
                 |
              全局内存

    3、同步程序的JMM和顺序一致性模型的效果
        class SynchronizedExample {
            int a = 0;
            boolean flag = false;

            public synchronized void writer() {
                a = 1;
                flag = true;
            }

            public synchronized void reader() {
                if (flag) {
                    int i = a;
                }
            }
        }
       该程序在JMM和顺序一致性模型中执行结果一致。 但是JMM对于临界区的代码，可以重排序，但是顺序一致性模型就不可以。

    4、未同步程序的执行特性（JMM模型和顺序一致性模型）
        共同点：JMM模型和顺序一致性模型，都不能保证未同步程序在多线程中执行结果一致性。
        不同点：
        (1) JMM不保证单线程内的操作会按程序的顺序执行，
            而顺序一致性模型保证单线程内的操作会按程序的顺序执行
        (2) JMM不保证所有线程能看到一致的操作执行顺序
            而顺序一致性模型保证所有线程只能看到一致的操作执行顺序
        (3) JMM不保证对64位的long型和double型变量的读/写操作具有原子性
            而顺序一致性模型保证对所有的内存读/写操作都具有原子性


八 volatile关键字 :理解volatile特性的一个好方法是：把对volatile变量的单个读/写，看成是使用同一个锁对这些单个读/写操作做了同步
  1、volatile变量自身具有下列特性：
   例子:
      class VolatileFeaturesExample {
          //使用volatile声明64位的long型变量
          volatile long vl = 0L;

          public void set(long l) {
              vl = l;   //单个volatile变量的写
          }

          public void getAndIncrement () {
              vl++;    //复合（多个）volatile变量的读/写
          }
          public long get() {
              return vl;   //单个volatile变量的读
          }
      }
      可见性。对一个volatile变量的读，总是能看到（任意线程）对这个volatile变量最后的写入。
      原子性：对任意单个volatile变量的读/写具有原子性，但类似于volatile++这种复合操作不具有原子性。

   2、volatile写-读建立的happens before关系
      从内存语义的角度来说，volatile与锁有相同的效果。volatile写和锁的释放有相同的内存语义;volatile读与锁的获取有相同的内存语义。

     class VolatileExample {
         int a = 0;
         volatile boolean flag = false;

         public void writer() {
             a = 1;                   //1
             flag = true;             //2
         }
         public void reader() {
             if (flag) {              //3
                 int i =  a;          //4
             }
         }
     }
    (1) 根据程序次序规则，1 happen before 2; 3 happen before 4
    (2) 根据volatile规则，2 happen before 3
    (3) 根据happen before的传递性，1 happen before 4

   3、重点：volatile写-读的内存语义
        volatile写的内存语义如下
            (1) 当写一个volatile变量时，JMM会把该线程对应的本地内存中的共享变量值刷新到主内存
            (2) 当读一个volatile变量时，JMM会把线程对应的本地内存置为无效。线程从主内存中读取变量

        volatile内存语义的实现
            JMM对volatile变量的重排序规则：
                当第二个操作是volatile写时，不管第一个操作是什么，都不能重排序
                    保证volatile写之前的操作不会被编译器重排序到volatile写之后。
                当第一个操作是volatile读时，不管第二个操作是什么，都不能重排序
                    保证volatile读之后的操作不会被编译器重排序到volatile读之前。
                当第一个操作是volatile写，第二个操作是volatile读时，不能重排序

            实现方式：在编译器生成字节码时，会在指令序列中插入内存屏障来禁止处理器重排序
                (1)在volatile写前添加：StoreStore屏障 ;在写后添加：StoreLoad屏障
                (2)在volatile读后添加：LoadLoad屏障 ;在读后添加：LoadStore屏障

九 锁
1、锁释放-锁获取的happens before关系
   Class MonitorExample{
        int a = 0;
        public synchronized void writer(){ //1
            a++;//2
        }//3
        public synchronized void reader(){//4
            int i = a;//5
        }//6
   }
   根据程序次序规则：1 happen before 2,2 happen before 3 ; 4 happens before 5 ,5 happens before 6
   根据锁规则：3 happens before 4
   根据happens before的传递性 2 happens before 5

2、锁释放和获取的内存语义
   1 当线程释放锁时，JMM会把该线程对应的本地内存中的共享变量刷新到主内存中
   2 当线程获取锁时，JMM会把该线程对应的本地内存置为无效，从而使得被监视器保护的临界区代码必须从主内存中读取变量
   总结：
        线程A释放一个锁，实质上是线程A向接下来将要获取这个锁的某个线程发出了消息
        线程B获得一个锁，实质上是线程B接收了之前某个线程发出的消息
        线程A释放锁，随后线程B获取这个锁，这个过程实质上线程A通过主内存向线程B发送消息

        锁内存语义实现: 通过ReentrantLock的源代码,来分析锁内存语义的具体实现机制
        ReentrantLock的实现依赖于java同步器框架AQS。AQS使用一个整性的volatile变量来维护同步状态。


十 final关键字：对final域的读和写更像是普通的变量访问
   对于final，编译器和处理器要遵守重排序规则 :
   1、在构造函数内对一个final域的写入，与随后把这个被构造对象的引用赋值给一个引用变量，这两个操作之间不能重排序。
   2、初次读一个包含final域的对象引用，与随后初次读这个final域，这两个操作之间不能重排序。
   public class FinalExample{
        int i; //普通变量
        final j; // final 变量
        static FinalExample obj;

        public void FinalExample(){ //构造函数
            i = 1; // 写普通变量
            j = 2; // 写final域
        }

        public static void writer(){  //写线程A执行
            obj = new FinalExample();
        }
        public static void reader(){// 读线程B执行
            FinalExample object = obj ;//读对象引用
            int a = object.i //读普通域
            int b = object.j //读final域
        }
   }

1 写final域的重排序规则
    禁止把final域的写重排序到构造方法之外。

2 读final域的重排序规则
    在一个线程中，首次读对象引用与初次读该对象的fianl域，JMM禁止处理器重排序这两个操作。




