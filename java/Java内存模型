基础

Java内存模型
所有实例域、静态域和数组元素存储在堆内存中，堆内存在线程之间共享
局部变量、方法参数、异常处理参数 不会共享

一、java线程之间的通信有java内存模型控制
JMM决定一个线程对共享变量的写入何时对另一个线程可见
JMM定义了线程和主内存之间的抽象关系：
线程之间的共享变量存储在主内存中，每个线程有一个私有的本地内存，
本地内存中存储了该线程以读/写共享变量的副本。

二、线程A与线程B通信步骤
1、线程A把本地内存A中更新过的共享变量刷新到主内存中
2、线程A给线程B发消息，线程B到主内存中读取线程A之前已更新过的共享变量

三、重排序 ：编译器和处理器会对指令做重排序
1、编译器优化的重排序：在不改变单线程语义的前提下，可以重新安排语句的执行顺序
2、指令级并行的重排序: 现在处理器采用了指令级并行技术来将多条指令重叠执行，如果不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序
3、内存系统的重排序：由于处理器使用缓存和读写缓冲区，这使得加载和存储操作看上去可能是在乱序执行
源代码都要经历上面3步后，成为最终的执行指令的序列
上面的重排序可能会导致多线程程序出现内存可见性问题
JMM:对于编译器排序规则会禁止特定类型的编译器重排序
JMM:对于处理器重排序规则会要求java编译器在生成指令序列时，插入特定类型的内存屏蔽指令，禁止特定类型的处理器重排序

四、处理器重排序与内存屏障指令
为了保证内存可见性: java编译器在生成指令序列的适当位置会插入内存屏蔽指令来禁止特定类型的处理器重排序
JMM内存屏障指令
1: LoadLoad   确保Load1数据装载，之前于Load2及所有后续装载指令的装载。
2: StoreStore 确保Store1数据对其他处理器可见（刷新到内存），之前于Store2及所有后续存储指令的存储。
3: LoadStore  确保Load1数据装载，之前于Store2及所有后续的存储指令刷新到内存。
4: StoreLoad  确保Store1数据对其他处理器变得可见（指刷新到内存），之前于Load2及所有后续装载指令的装载

五、happens-before
从JDK5开始,java使用新的JSR-133内存模型，该模型使用happens-before的概念阐述操作之间的内存可见性。
JMM中，如果一个操作执行的结果需要对另一个操作可见，那么这两个操作之间必须要存在happens-before关系
happens-before 规则如下
程序顺序规则 ：一个线程中的每个操作，happens-before于该线程中的任意后续操作
监视器锁规则 : 一个监视器的锁，happens-before 于随后对这个监视器的加锁
volatile变量规则 ： 对一个volatile域的写，happens-before 于任意后续对这个volatile域的读
传递性 如果A happens-before B，且B happens-before C ，那么A happens-before C





