第二部分
第6章 任务执行

(2) Executor框架
1、线程池 可以通过重用现有的线程而不是创建新线程，减少创建大量线程的开销，也不会等待创建线程的时间

2、Executor的生命周期
Executor的实现通常会创建线程来执行任务,但JVM只有在所有线程全部终止后才会退出，
如果无法正确地关闭Executor，那么JVM将无法结束
ExecutorService 在初始创建时处于运行状态。
shutdown方法将执行平缓的关闭过程
shutdownNow方法将执行粗暴的关闭过程

3、延迟任务与周期任务
Timer在执行所有定时任务时只会创建一个线程。如果某个任务的执行时间过长，那么将破坏其他TimerTask的定时精确性。
TimerTask没有对异常的很好的处理

4、Executor结合:任务Callable与Future

Callable可以带返回值
future.get()是阻塞到executor.submit返回结果
使用例子
ExecutorService executor = Executors.newCachedThreadPool();
Future<HashMap<Long, List<JSONObject>>> future = null;
final HashMap<Long, List<JSONObject>> cp_book_map = new HashMap<Long, List<JSONObject>>();
String path = System.getProperty("user.home") + "/file1/";

future = executor.submit(new Callable<HashMap<Long, List<JSONObject>>>() {
            @Override
            public HashMap<Long, List<JSONObject>> call() throws Exception {
                HashMap<Long, List<JSONObject>> cp_book_map = new HashMap<Long, List<JSONObject>>();
                for (Object[] book : list){
                    final Long cpId = (Long) book[0];
                    final Long bookqpId = (Long) book[1];
                    Service service = (Service) ApplicationContextUtil.getBean(Service.class);
                    service.StatisticsTest(bookqpId, cpId, cp_book_map);
                }
                return cp_book_map;
            }
        });
HashMap<Long, List<JSONObject>> map = future.get();

5、CompletionService: 通过阻塞队列维护Future
当向Executor提交批处理任务时，并且希望在它们完成后获得结果，如果用FutureTask，你可以循环获取task，并用future.get()去获取结果，但是如果这个task没有完成，你就得阻塞在这里，这个实效性不高
CompletionService的实现是维护一个保存Future对象的BlockingQueue。只有当这个Future对象状态是结束的时候，才会加入到这个Queue中，
take()方法其实就是Producer-Consumer中的Consumer。它会从Queue中取出Future对象，
如果Queue是空的，就会阻塞在那里，直到有完成的Future对象加入到Queue中。
对于所有的Future的结果没有依赖的主线程，非常适合使用这个场景

第7章 取消与关闭
一、取消和中断
1、任务取消
2、中断 : 是取消任务的最好的方式
每个线程都有一个boolean类型的中断状态，当中断线程时，这个线程的中断状态将被设置为true
interrupt方法能中断目标线程，调用interrupt并不意味着立即停止目标线程正在进行的工作，而只是传递了请求中的消息
isInterrupted方法能返回目标线程的中断状态
interrupted方法将清除当前线程的中断状态
注意： 在使用静态的interrupted时应该小心，因为它会清除当前线程的中断状态。如果在调用interrupted时返回了ture，那么除非你想屏蔽这个中断，否则必须对它进行处理
可以抛出InterruptedException,或者通过再次调用interrupt来恢复中断状态。

3、中断策略
规定线程如何解释某个中断请求，当发现中断请求时，应该做哪些工作，哪些工作单元对于中断来说是原子操作，以及以多快的速度响应中断
1：线程级取消操作或服务器取消操作： 尽快退出，在必要时进行清理，通知某个所有者线程已经退出
2：抛出中断InterruptedException，尽快退出，并把中断信息传递给调用者，从而使调用栈中的上层代码可以采取进一步的操作
3：当接收到中断请求时，可以推迟处理中断请求，并直到某个更合适的时刻。
4：如果除了将InterruptException传递给调用者外还需要执行其他操作，应该在捕获InterruptedExcepton恢复中断状态
Thread.currentThread().interrupt()

4、响应中断
1：当调用可中断的阻塞函数时，Thread.sleep或BlockingQueue.put
有两种实用策略可用于处理InterruptedException
(1)传递异常，从而使你的方法也成为可中断的阻塞方法
(2)恢复中断状态，从而使调用栈中的上层代码能够对其进行处理

5、处理不可中断的阻塞
(1) Java.io包中的同步Socket I/O
在服务器应用程序中，最常见的阻塞I/O形式就是对套接字进行读取和写入。虽然InputStream和Output中的read和write等方法都不会响应中断
但通过关闭底层的套接字，可以使得由于执行read或write等方法而被阻塞的线程抛出一个SocketException
(2) Java.io包中的同步I/O
当中断一个正在InterruptibleChannel上等待的线程时，将抛出ClosedByInterruptException并关闭连接
(3) Selector的异步I/O
如果一个线程在调用Selector.select方法时阻塞了，那么调用close或wakeup方法会使线程抛出CloseSelectorExcepton
(4) 获取某个锁 如果一个线程由于等待某个内置锁而阻塞，无法响应中断。
但是，在Lock类中提供了lockInterruptibly方法，该方法允许在等待一个锁的同时仍能响应中断

二、停止基于线程的服务
1、应用程序通常会创建拥有多个线程的服务，如线程池
正确的封装原则是：除非拥有某个线程，否则不能对线程进行操控

应用程序->线程池->工作者线程
由于线程的所有权是不可传递的，应用程序并不能拥有工作者线程,应用程序不能直接停止工作者线程
在ExecutorService中提供了shutdown和shutdownNow等方法。

2、关闭ExecutorService
shutdownNow的局限性： 强制关闭

三、处理非正常的线程终止
1、导致线程提前死亡的最主要原因是RuntimeException。
因此它们通常不会被捕获，他们不会在调用栈中逐层传递，只是在控制台输出栈的信息，并终止线程

2、防止线程泄露


四、JVM关闭
JVM即可以正常关闭，也可以强行关闭
正常关闭的触发方式有多种：当最后一个"正常（非守护）"线程结束时，或者当调用了System.exit时
强制关闭JVM

1、关闭钩子
(1)、正常关闭中，JVM首先调用所有已注册的关闭钩子
关闭钩子是指通过Runtime.addShutdownHock注册的但尚未开始的线程

(2)、JVM的关闭过程
在关闭应用程序线程时，如果有线程仍然在运行，那么这些线程会和关闭进程并发执行。
当所有关闭钩子都执行结束时，那么JVM将运行终结器，再停止。JVM并不会停止或中断任何在关闭时仍然运行的应用程序线程
当JVM最终结束时，这些线程会强行结束。
如果关闭钩子没有执行完成，那么正常关闭进程"挂起"并且JVM必须被强行关闭。

(3)、关闭钩子应该是线程安全：他们在访问共享数据时必须同步机制，并应该避免死锁

2、守护线程 ：当想创建一个线程来执行一些辅助工作，但又不希望这个线程阻碍JVM的关闭
线程可分为两种 普通线程和守护线程
在JVM启动时创建的所有线程中，除了主线程外，其他的线程都是守护线程（垃圾回收器以及其他执行辅助工作的线程）
而由主线程创建的所有线程都是普遍线程

普通线程和守护线程差异在于线程退出时发生的操作不同
当一个线程退出时，JVM会检查其他正在运行的线程，如果这些线程都是守护线程，那么jvm会正常退出操作
守护线程最好用于：周期性内存清理

3、终结器
当不在需要内存资源时，可以通过垃圾回收器回收他们，但对于其他一些资源，文件句柄或套接字句柄，当
不需要他们时，必须显示地交给操作系统，垃圾回收器对定义了finalize方法的对象进行特殊处理，在回收器释放他们后，调用它的finalize方法，从而保证一些持久化的资源释放

第八章 线程池的使用

1、需要明确地指定执行策略
 依赖性任务，大多数行为正确的任务都是独立的，他们不依赖于其他任务的执行顺序。但如果提交线程池的任务需要依赖其他的任务，那么就隐含地给执行策略带来了约束
 使用线程封闭机制，与线程池相比，单线程的Executor(newSingleThreadExecutor)能确保任务不会并发地执行
 对响应时间敏感的任务
 使用ThreadLocal，使每个线程都可以拥有某个变量的一个私有"版本"。

(1) 线程饥饿死锁 只要线程池中的任务需要无限期地等待一些必须有池中其他任务才能提交的资源，除非线程池足够大，否则将发生线程饥饿死锁
在线程池中，如果任务依赖于其他任务，那么可能产生死锁
在单线程的Executor中，如果一个任务将另一个任务提交到同一个Executor，并且等待这个被提交任务的结果，会引发死锁

(2) 运行时间较长的任务
如果任务阻塞的时间过长，那么即使不出现死锁，线程池的响应性也会变得糟糕。
改善执行时间较长任务造成的影响，即限定任务等待资源的时间，而不要无限制地等待
比如：Thread.join,BlockingQueue.put,CountDownLatch.await以及Selector.select等

2、设置线程池的大小（有公式计算）
线程池的理想大小取决于被提交任务的类型以及所部署系统的特性，一般不会固定线程池大小，应该通过某种配置机制来提供，或根据Runtime.availableProcessors来动态计算

3、配置ThreadPoolExecutor
(1)ThreadPoolExecutor为一些Executor提供了基本的实现，这些Executor是有Executors中的newCacheThreadPool,newFixedThreadPool和newScheduledThreadExecutor
ThreadPoolExecutor(int corePoolSize,int maximumPoolSize,
    long keepAliveTime,
    TimeUnit unit,
    BlockingQueue<Runnable> workQueue,ThreadFactory threadFactory,
RejectedExecutionHandler handler)

参数的含义
corePoolSize	核心线程池大小（初始大小）
maximumPoolSize	最大线程池大小
keepAliveTime	线程池中超过corePoolSize数目的空闲线程最大存活时间；可以allowCoreThreadTimeOut(true)使得核心线程有效时间
TimeUnit	    keepAliveTime时间单位
workQueue	    阻塞任务队列
threadFactory	新建线程工厂
RejectedExecutionHandler	当提交任务数超过maxmumPoolSize+workQueue之和时，任务会交给RejectedExecutionHandler来处理
列子：
(1) 定义线程池
private static ThreadPoolExecutor pool = new ThreadPoolExecutor(20, 100, 10, TimeUnit.MINUTES,new LinkedBlockingQueue<Runnable>(50),
 new ThreadPoolExecutor.AbortPolicy());
(2) 多线程执行任务
for(String bookId : bookIds){
    try{
        long bookIdNum = Long.parseLong(bookId);
        while(true){//重试
            try{
                pool.execute(new Handler(bookIdNum));
                break;
            }catch(RejectedExecutionException e){

            }
        }
    }catch(Exception e){
        log.error(e);
    }
}

(2) 管理队列任务
ThreadPoolExecutor允许提供一个BlockingQueue来保存等待执行的任务
newFixedThreadPool和newSingleThreadExecutor在默认情况下将使用一个无界的LinkedBlockingQueue。可能任务持续快速地到达，并且超过了线程处理他们的速度
这时队列将无限制增加。
一种稳定的资源管理策略是使用有界队列
newCachedThreadPool无界线程池: 对于非常大的线程池，可以使用SynchronousQueue来避免任务排队，以及直接将任务交给工作者线程
当任务之间有相互依赖关系时，使用newCachedThreadPool

(3) 饱和策略
当有界队列被填满后，饱和策略开始发挥作用
ThreadPoolExecutor的饱和策略可以通过调用setRejectedExecutionHandler来修改。
AbortPolicy : 将抛出未检查的RejectedExecution
CallerRunsPolicy ：它不会在线程池的某个线程中执行，而是在一个调用了execute的主线程中执行该任务。这时主线程不能再提交任何任务。
DiscardPolicy ：会抛弃该任务
DiscardOldestPolicy ： 会抛弃下一个将被执行的任务，然后尝试重新提交新的任务
可以使用信号量Semaphore来控制任务的提交速度

final Semaphore semp = new Semaphore(5);
public void submitTask(final Runnable command) throws InterruptedException{
    semaphore.acquire();
    try{
        //执行任务
    }catch(RejectedExecutionException e){
        semaphore.release();
    }
}

(4)线程工厂: 线程池需要创建一个线程时，都是通过线程工厂方法来完成的

四、扩展ThreadPoolExecutor




























