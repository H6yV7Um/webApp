第12章 java 内存模型与线程
Java内存模型的主要目标是定义程序中各个变量的访问规则，即在虚拟机中将变量存储到内存和从内存中取出变量这样的底层细节。
这里的变量，是共享变量

1、主内存与工作内存
    Java内存模型规定了所有的变量都存储在主内存（Main Memory）中,每条线程还有自己的工作内存,线程的工作内存中保存了被该线程使用到的变量的主内存副本拷贝。
    线程对变量的所有操作（读取、 赋值等）都必须在工作内存中进行，而不能直接读写主内存中的变量。
    不同的线程之间也无法直接访问对方工作内存中的变量，线程间变量值的传递均需要通过主内存来完成。

    java 线程1 <---> 工作内存1
    java 线程2 <---> 工作内存2     <---> save 和 load  <---> 主内存
    java 线程3 <---> 工作内存3

2、内存间交互操作 ： 从主内存拷贝到工作内存、 如何从工作内存同步回主内存
    Java内存模型中定义了以下8种操作来完成:
        主内存变量的操作
        lock（锁定）：作用于主内存的变量，它把一个变量标识为一条线程独占的状态。
        unlock（解锁）：作用于主内存的变量，它把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定。
        read（读取）：作用于主内存的变量，它把一个变量的值从主内存传输到线程的工作内存中，以便随后的load动作使用。
        write（写入）：作用于主内存的变量，它把store操作从工作内存中得到的变量的值放入主内存的变量中。

        工作内存变量的操作
        load（载入）：作用于工作内存的变量，它把read操作从主内存中得到的变量值放入工作内存的变量副本中。
        use（使用）：作用于工作内存的变量，它把工作内存中一个变量的值传递给执行引擎，每当虚拟机遇到一个需要使用到变量的值的字节码指令时将会执行这个操作。
        assign（赋值）：作用于工作内存的变量，它把一个从执行引擎接收到的值赋给工作内存的变量，每当虚拟机遇到一个给变量赋值的字节码指令时执行这个操作。
        store（存储）：作用于工作内存的变量，它把工作内存中一个变量的值传送到主内存中，以便随后的write操作使用。

    8种操作规则如下：
        不允许read和load、 store和write操作之一单独出现，即不允许一个变量从主内存读取了但工作内存不接受，
        或者从工作内存发起回写了但主内存不接受的情况出现。

        不允许一个线程丢弃它的最近的assign操作，即变量在工作内存中改变了之后必须把该变化同步回主内存。

        不允许一个线程无原因地（没有发生过任何assign操作）把数据从线程的工作内存同步回主内存中。

        一个新的变量只能在主内存中“诞生”，不允许在工作内存中直接使用一个未被初始化（load或assign）的变量，
        换句话说，就是对一个变量实施use、 store操作之前，必须先执行过了assign和load操作。

        一个变量在同一个时刻只允许一条线程对其进行lock操作，但lock操作可以被同一条线程重复执行多次，多次执行lock后，只有执行相同次数的unlock操作，
        变量才会被解锁。

        如果对一个变量执行lock操作，那将会清空工作内存中此变量的值，在执行引擎使用这个变量前，需要重新执行load或assign操作初始化变量的值。

        如果一个变量事先没有被lock操作锁定，那就不允许对它执行unlock操作，也不允许去unlock一个被其他线程锁定住的变量。

        对一个变量执行unlock操作之前，必须先把此变量同步回主内存中（执行store、 write操作）。

3、对于volatile型变量的特殊规则
 当一个变量定义为volatile之后，它将具备两种特性，
 第一是：保证此变量对所有线程的可见性，这里的“可见性”是指当一条线程修改了这个变量的值，新值对于其他线程来说是可以立即得知的。
 第二是：使用volatile变量禁止指令重排序优化

普通变量不能做到这一点，普通变量的值在线程间传递均需要通过主内存来完成，
例如，线程A修改一个普通变量的值，然后向主内存进行回写，另外一条线程B在线程A回写完成了之后,再从主内存进行读取操作，新变量值才会对线程B可见.

4、对于long和double型变量的特殊规则
允许虚拟机将没有被volatile修饰的64位数据的读写操作划分为两次32位的操作来进行
如果有多个线程共享一个并未声明为volatile的long或double类型的变量，并且同时对它们进行读取和修改操作，那么某些线程可能会读取到一个既非原值，也不是其他线程修改值
的代表了“半个变量”的数值。

5、原子性、 可见性与有序性
(1) 原子性
    由Java内存模型来直接保证的原子性变量操作包括read、 load、assign、 use、 store和write，
    我们大致可以认为基本数据类型的访问读写是具备原子性的（例外就是long和double的非原子性协定，读者只要知道这件事情就可以了，无须太过在意这些
    几乎不会发生的例外情况）

(2) 可见性 : 可见性是指当一个线程修改了共享变量的值，其他线程能够立即得知这个修改
    Java内存模型是通过在变量修改后将新值同步回主内存，在变量读取前从主内存刷新变量值这种依赖主内存作为传递媒介的方式来实现可见性的，
    无论是普通变量还是volatile变量都是如此
        volatile的特殊规则保证了新值能立即同步到主内存，以及每次使用前立即从主内存刷新。 因此，可以说volatile保证了多线程操作时变量的可见性
        普通变量则不能保证这一点。

    Java还有两个关键字能实现可见性，即synchronized和final。
        synchronized同步块的可见性是由“对一个变量执行unlock操作之前，必须先把此变量同步回主内存中
        final关键字的可见性是指：被final修饰的字段在构造器中一旦初始化完成，那在其他线程中就能看见final字段的值。







