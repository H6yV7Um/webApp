第一部分
基本概念
对象的状态是指存储在状态变量中的数据,对象的状态可能包括其他依赖对象的域。
例如HashMap的状态不仅存储在HashMap对象本身，还存储在Map.Entry对象中

要使得对象是线程安全的，需要采用同步机制来协同访问对象的可变的状态变量
java中的主要同步机制是关键字synchronized，他提供了一种独占的加锁方式，而同步还包括volatile类型变量，显示锁以及原子变量(CAS)

遇到同步问题：如果当多个线程访问同一个可变的状态变量时，没有使用合适的同步，那么程序就会出现错误
1:不在线程之间共享该状态变量 (无状态对象是线程安全的)
2:将状态变量修改为不可变的变量
3:在访问状态变量时使用同步

第2章 (线程安全性)

一、什么是线程安全性
当多个线程访问某个类时，这个类始终表现出正确的行为，这个类是线程安全的，在线程安全类中，封装了必要的同步机制

二、原子性
由于不恰当的执行时序而出现不正确的结果是一种非常重要的情况: 竞态条件
避免竞态条件问题，就必须在某个线程修改该变量时，通过某种方式防止其他线程使用这个变量

1: 线程安全类AtomicLong
incrementAndGet() 方法 : 首先会根据get()获取AtomicLong对应的long值。该值是volatile类型的变量
使用AtomicLong的状态变量，对于多线程是安全的

三、加锁机制 synchronized
同步代码块包括两部分：一个作为锁的对象引用，一个作为由这个锁保护的代码块
1、synchronized来修饰的非static方法，锁就是方法调用所在的对象
2、静态方法，锁Class对象

3、内置锁重入: 某个线程试图获得一个已经由它自己持有的锁，那么这个请求就会成功
实现原理：当线程请求一个未被持有的锁时，jvm将记下锁的持有者，并且将获取计数值设置为1
如果同一个线程再次获取这个锁，计数值将递增，而当线程退出同步代码块，计数器会相应地递减。
当计数值为0,这个锁将被释放.

如果没有不可重入
public class Widget{
    public synchronized void doSomething(){

    }
}
public class LoggingWidget extends Widget{
    public synchronized void doSomething(){
        super.doSomething();
    }
}

4、用锁来保护状态

5、性能
通过缩小同步代码块的作用范围，可以提高一些并发的性能

第3章（对象的共享）

1、可见性 : 无法保证执行读操作的线程能适时地看到其他线程写入的值，所以必须使用同步机制
(1)下面代码：不可见的例子
public class NoVisibility {
    private static boolean ready;
    private static int number;

    private static class ReaderThread extends Thread{
        public void run(){
            while (!ready)
                Thread.yield();
            System.out.println(number);
        }
    }
    public static void main(String[] args){
        new ReaderThread().start();
        number = 42;
        ready = true;
    }
}
重排序 ： 当主线程首先写入number，在没有同步的情况下写入ready，那么读线程看到的顺序可能与写入的顺序相反

(2) 非原子的64位操作
    1 当线程在没有同步的情况下读取变量时，可能会得到一个失效值
    2 非volatile类型的64位数值，long和double变量，jvm允许将64位的读操作和写操作分解为两个32位的操作，当读取一个
      非volatile类型的long变量时，如果对该变量的读操作和写操作再不同的线程中执行。
    所以多线程中使用long和double时，要使用volatile来声明。

(3) 加锁与可见性

(4) Volatile变量 用来确保将变量的更新操作通知到其他线程
    使用Volatile变量不会使执行线程阻塞，通常用做操作完成，发生中断或者状态的标志
使用条件（由于不满足原子性，所以受限制）
1:对变量的写入操作不依赖变量的当前值: boolean
2:只有一个线程对共享volatile变量执行写入操作，那么就可以安全地在这些共享的volatile变量上执行
3:内存语义
    线程A---> 内存A（volatile变量 写，会刷主内存，并通过线程B，变量修改）
                                                                            主内存
    线程B---> 内存B（volatile变量 读，变量已无效，从主内存重新取 ）

4: 重排序 编译器在生成字节码时，会在指令序列中插入内存屏障来禁止特定类型的处理器重排序

2 发布与逸出
对象不正确的发布(逸出)
1、发布对象的最简单方法:
    是将对象的引用保存到一个公有的静态变量中;
    从非私有方法中返回一个引用，同样会发布返回的对象

3、线程封闭 : 避免使用同步的方式就是不共享数据
    Java类库线程封闭技术，局部变量和ThreadLocal类
    栈封闭:局部变量
    (1) 基本类型的局部变量，不需要任何操作
    (2) 对象引用的栈封闭，如果发布了对象的引用，封闭性将被破坏

4、ThreadLocal类 : 防止对可变的单实例变量或全局变量进行共享
    使用该变量的线程都存有一份独立的副本，因此get总是返回由当前执行线程再调用set时设置的最新值
    使用场景:将JDBC的连接保存到ThreadLocal对象，每个线程都会拥有自己的连接,确保线程安全

5、不变性 final: 不可变对象一定是线程安全的

6、安全发布
不安全的发布:在没有同步的情况下发布对象
要安全发布一个对象，对象的引用以及对象的状态必须同时对其他线程可见,下面是安全发布的方式
(1) 在静态初始化函数中初始化一个对象的引用 : 有jvm在类的初始化阶段执行，由于jvm内部存在同步机制
(2) 将对象的引用保存到volatile类型的域或者AtomicReferance对象中
(3) 将对象的引用保存到某个正确构造对象的final类型域中
(4) 将对象的引用保存到一个由锁保护的域中

在线程安全容器内部的同步意味着，在将对象放入到某个容器，vector 或 synchronizedList
如果线程A将对象放入一个线程安全的容器，随后线程B读取这个对象，
那么可以确保看到A设置的X状态,即便在这段读/写 X的应用程序代码中没有包含显式的同步
java线程安全库的容器类
通过将一个键或者值放入Hashtable、synchronizedMap或者ConcurrentMap
通过把一个元素放入 Vector、CopyOnWriteArrayList、CopyOnWriteArraySet、synchronizedList
通过把一个元素放入 BlockingQueue或者ConcurrentLinkedQueue

(5) 事实不可变对象 :
如果对象从技术上是可变的，但其状态在发布后不会再改变，称为事实不可变对象
public Map<String,Date> lastLogin = Collections.synchronizedMap(new HashMap<String,Date>());
如果Date对象值放入Map就改变，那么synchronizedMap同步机制就足以使Date值被安全地发布

(6) 三种对象正确的发布
a: 不可变对象可以通过任意机制来发布
b: 事实不可变对象必须通过安全方式来发布
c: 可变对象 必须是线程安全或者有某个锁保存起来


第四章 对象的组合
1、设计线程安全的类,找出构成对象状态的所有变量
如果对象中所有的域都是基本类型的变量，那么这些域将构成对象的全部状态
如果对象的域中引用了其他对象，那么该对象的状态将包含被引用对象的域

同步策略:将不可变性，线程封闭，加锁机制等结合起来

基本的容器类并非线程安全的，例如ArrayList和HashMap,但类库提供了Collections.synchronized**工厂方法，使得这些非线程安全的类可以在多线程安全使用
原理是对底层容器都实现同步方法,使得每次只有一个线程能访问容器的状态

2、通过私有锁方式
public class privateLock {
    private final Object myLock = new Object();

    void someMethod(){
        synchronized(myLock){
        }
    }
}

第五章 基础构建模块

1、同步容器类 Vector和Hashtable，以及由Collection.synchronized

2、并发容器 : 用于改进同步容器的性能。同步容器将所有对容器状态的访问串行化，代价是严重降低并发性，
当多个线程竞争容器的锁时，吞吐量减低。
(1) ConcurrentHashMap    用于代替同步且基于散列的Map
    ConcurrentHashMap采用了分段锁的设计，只有在同一个分段内才存在竞态关系，不同的分段锁之间没有锁竞争。
    Segment 分段锁的结构
    ConcurrentHashMap中的HashEntry相对于HashMap中的Entry有一定的差异性：
    HashEntry中的value以及next都被volatile修饰，这样在多线程读写过程中能够保持它们的可见性
    相比于对整个Map加锁的设计，分段锁大大的提高了高并发环境下的处理能力

    1 提供的迭代器不会抛出ConcurrentModificationException
        ConcurrentHashMap返回的迭代器具有弱一致性，而非"及时失败"。弱一致性的迭代器可以容忍并发的修改
    2 ConcurrentHashMap没有实现对Map加锁以提供独占访问。
        在Hashtable和synchronizedMap中，获得Map的锁能防止其他线程访问这个Map
    3 额外的原子Map操作,已经支持

(2) CopyOnWriteArrayList 用于替代同步List
    队列 Queue和BlockingQueue
    Queue(非阻塞): ConcurrentLinkedQueue(并发) 和 PriorityQueue(非并发)
    BlockingQueue(阻塞)
    使用ConcurrentSkipListMap 和 ConcurrentSkipListSet 分别用SortedMap 和 SortedSet

4、CopyOnWriteArrayList
Copy-On-Write 容器的线程安全性
每次修改是，都会创建并重新发布一个新的容器副本，然后再将写好的数据，合到原来的版本上。
迭代器不会抛出ConcurrentModificationException

5、阻塞队列 (生产者-消费者模式）
(1)阻塞队列提供了可阻塞的put和take方法，以及支持定时的offer和poll方法
   如果队列已经满了，那么put方法将阻塞直到有空间可用;如果队列为空，那么take方法将会阻塞直到有元素可用
   BlockingQueue 实现LinkedBlockingQueue和ArrayBlockingQueue是FIFO队列,比同步List拥有更好的并发性能SynchronusQueue 不会为队列中元素维护存储空间，
   它维护一组线程，这些线程在等待着把元素加入或移出
   只有当有足够多的消费者，并且总是有一个消费者准备好获取交付的工作时，才适合使用同步队列

(2)串行线程封闭 : 生产者-消费者这种设计与阻塞队列一起，促使了串行线程封闭
(3)双端队列
    Deque和BlockingDeque

工作密取模式:
    传统的生产者-消费者模式：所有消费者有一个共享队列
    而工作密取，每个消费者都有自己的各自的双端队列，如果一个消费者完成了自己双端队列中的工作，那么他可以从其他消费者双端队列中获取工作

(4) 阻塞方法与中断方法
    阻塞或暂停原因有多种:等待I/O操作结束，等待获得一个锁，等待从Thread.sleep方法中醒来，wait 或是等待另一个线程的计算结果
    阻塞线程必须等待不受它控制的事件完成后，才能继续执行
    当某方法抛出InterruptedException时，表示该方法是一个阻塞方法，如果这个方法被中断，那么它将努力提前结束阻塞状态

    Thread提供了interrupt方法，用于中断线程或者查询线程是否已经被中断
        每个线程都有一个布尔类型的属性，表示线程的中断状态，当中断线程时将设置这个状态
        中断是一种协作机制。
        一个线程不能强制其他线程停止正在执行的操作而去执行其他的操作。

当在一个方法中调用了一个将抛出InterruptedException异常的方法时，这个方法也会成为一个阻塞的方法,并且必须要处理对中断的响应
方法1: 传递InterruptedException
方法2: 捕获Thread.currentThread().interrupt();

http://blog.csdn.net/sunxing007/article/details/9123363

(5) 同步工具类 : 可以根据其自身的状态来协调线程的控制流
    阻塞队列、信号量、栅栏、闭锁 都可以同步工具类
这些都封装了一些状态，这些状态将决定执行同步工具类的线程是继续执行还是等待，此外还提供了一些方法对状态进行操作

1: 闭锁(CountDownLatch) : 用来确保某些活动直到其他活动都完成后才继续执行
相当于一扇门，在闭锁到达结束状态之前，这扇门一直关闭的，并且没有任何线程能通过,当到达结束状态时，
这扇门会允许所有的线程通过。

2:FutureTask 也可以用做闭锁:用来执行多个计算，后续再使用这些多个计算的结束
表示的计算是通过Callable来实现的，相当于一种可生成结果的Runnable
Future.get的行为取决于任务的状态，如果任务已经完成，那么get会立即返回结果，否则get将阻塞直到任务进入完成状态

3:信号量 用来控制同时访问某个特定资源的操作数量，或者通过执行某个指定操作的数量
Semaphore中管理着一组虚拟的许可permit，许可的初始数量可以通过构造函数来指定。
在执行操作时可以首先获得许可，并在使用以后释放许可。如果没有许可，那么acquire将阻塞直到获得许可。release方法将获得一个许可给信号量。
如果将Semaphore的计数值初始化为池的大小，并在从池中获取一个资源之前首先调用acquire方法获取一个许可,在将资源返回给池之后调用release释放许可

4: 栅栏
必须所有线程同时到达栅栏位置，才能继续执行。

(6)构建高效且可伸缩的结果缓存
















































































