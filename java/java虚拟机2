第7章 虚拟机类加载机制
虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验、 转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型，这就是虚拟机的类加载机制

1、类加载的时机
类从被加载到虚拟机内存中开始，到卸载出内存为止，它的整个生命周期包括：
加载（Loading）、 验证（Verification）、 准备（Preparation）、 解析（Resolution）、 初始化（Initialization）、 使用（Using）和卸载（Unloading）7个阶段。
加载、 验证、 准备、 初始化和卸载这5个阶段的顺序是确定的,而解析阶段则不一定：
它在某些情况下可以在初始化阶段之后再开始，这是为了支持Java语言的运行时绑定（也称为动态绑定或晚期绑定）

主动引用
初始化阶段，虚拟机规范则是严格规定了有且只有5种情况必须立即对类进行“初始化”
(1)遇到new、 getstatic、 putstatic或invokestatic这4条字节码指令时，如果类没有进行过初始化，则需要先触发其初始化。
(2)使用java.lang.reflect包的方法对类进行反射调用的时候，如果类没有进行过初始化，则需要先触发其初始化。
(3)当初始化一个类的时候，如果发现其父类还没有进行过初始化，则需要先触发其父类的初始化。
(4)当虚拟机启动时，用户需要指定一个要执行的主类（包含main（）方法的那个类），虚拟机会先初始化这个主类
(5)当使用JDK 1.7的动态语言支持时，如果一个java.lang.invoke.MethodHandle实例最后的解析结果REF_getStatic、 REF_putStatic、 REF_invokeStatic的方法句柄，
并且这个方法句柄所对应的类没有进行过初始化，则需要先触发其初始化

被动引用
(1)、对于静态字段，只有直接定义这个字段的类才会被初始化，因此通过其子类来引用父类中定义的静态字段，只会触发父类的初始化而不会触发子类的初始化。
(2)、通过数据定义类引用类，不会触发此类的初始化
(3)、使用类的常量时，常量在编译阶段会存入调用类的常量池，本质上并没有直接引用到定义常量的类，因此不会触发类的初始化

2、类加载的过程
一、加载
虚拟机需要完成以下3件事情
1）通过一个类的全限定名来获取定义此类的二进制字节流。
2）将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。
3）在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口。

二、验证
为了确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全

三、准备: 正式为类变量(static)分配内存并设置类变量初始值的阶段，这些变量所使用的内存都将在方法区中进行分配

四、解析： 常量池内的符号引用替换为直接引用的过程
符号引用 在Class文件中它以CONSTANT_Class_info、CONSTANT_Fieldref_info、 CONSTANT_Methodref_info等类型的常量出现

在java中，一个java类将会编译成一个class文件。在编译时，java类并不知道引用类的实际内存地址，因此只能使用符号引用来代替。
比如org.simple.People类引用org.simple.Tool类，在编译时People类并不知道Tool类的实际内存地址，因此只能使用符号org.simple.Tool(假设)来表示Tool类的地址。
而在类装载器装载People类时，此时可以通过虚拟机获取Tool类 的实际内存地址，因此便可以既将符号org.simple.Tool替换为Tool类的实际内存地址，及直接引用地址。

五、初始化：真正开始执行类中定义的Java程序代码（或者说是字节码）

3、类加载器

(1) 类与类加载器

(2) 双亲委派模型
三种类加载器
第一层：启动类加载器（Bootstrap ClassLoader）:<JAVA_HOME>\lib
第二层：扩展类加载器（Extension ClassLoader）:<JAVA_HOME>\lib\ext
第三层：应用程序加载器 （Application ClassLoader）

双亲委派模型的工作过程是：如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是
如此，因此所有的加载请求最终都应该传送到顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需的类）时，子加载器才会尝试自己去加载

第8章 虚拟机字节码执行引擎
1 运行时栈帧结构
栈帧（Stack Frame）是用于支持虚拟机进行方法调用和方法执行的数据结构，它是虚拟机运行时数据区中的虚拟机栈（Virtual Machine Stack)的栈元素
每一个方法从调用开始至执行完成的过程，都对应着一个栈帧在虚拟机栈里面从入栈到出栈的过程

对于执行引擎来说，在活动线程中，只有位于栈顶的栈帧才是有效的，称为当前栈帧（Current StackFrame），与这个栈帧相关联的方法称为当前方法（Current Method）。
(1) 局部变量表（Local Variable Table）是一组变量值存储空间，用于存放方法参数和方法内部定义的局部变量.
一个Slot可以存放一个32位以内的数据类型，Java中占用32位以内的数据类型有boolean、 byte、 char、 short、int、 float、 reference和returnAddress 8种类型
对于64位的数据类型，虚拟机会以高位对齐的方式为其分配两个连续的Slot空间。Java语言中明确的64位的数据类型只有long和double两种.
值得一提的是，这里把long和double数据类型分割存储的做法与“long和double的非原子性协定”中把一次long和double数据类型读写分割为两次32位读写的做法有些类似，
不过，由于局部变量表建立在线程的堆栈上，是线程私有的数据，无论读写两个连续的Slot是否为原子操作，都不会引起数据安全问题
虚拟机通过索引定位的方式使用局部变量表，索引值的范围是从0开始至局部变量表最大的Slot数量。
如果访问的是32位数据类型的变量，索引n就代表了使用第n个Slot，如果是64位数据类型的变量，则说明会同时使用n和n+1两个Slot

(2) 操作数栈：它是一个后入先出栈。
操作数栈的每一个元素可以是任意的Java数据类型，包括long和double。 32位数据类型所占的栈容量为1，64位数据类型所占的栈容量为2。

(3) 动态连接
每个栈帧都包含一个指向运行时常量池中该栈帧所属方法的引用，持有这个引用是为了支持方法调用过程中的动态连接（Dynamic Linking）

Class文件的常量池中存有大量的符号引用，字节码中的方法调用指令就以常量池中指向方法的符号引用作为参数。
这些符号引用一部分会在类加载阶段或者第一次使用的时候就转化为直接引用，这种转化称为静态解析。
另外一部分将在每一次运行期间转化为直接引用，这部分称为动态连接

(4) 方法返回地址
无论采用何种退出方式，在方法退出之后，都需要返回到方法被调用的位置，程序才能继续执行，方法返回时可能需要在栈帧中保存一些信息，用来帮助恢复它的上层方法的执行
状态
一般来说，方法正常退出时，调用者的PC计数器的值可以作为返回地址，栈帧中很可能会保存这个计数器值。 而方法异常退出时，返回地址是要通过异常处理器表来确定的，栈
帧中一般不会保存这部分信息。
方法退出的过程实际上就等同于把当前栈帧出栈，因此退出时可能执行的操作有：恢复上层方法的局部变量表和操作数栈，把返回值（如果有的话）压入调用者栈帧的操作数栈中，调整PC计数器的值以指向方法调用指令后面的一条指令等

2 方法调用
(1) 解析 ： 方法在程序真正运行之前就有一个可确定的调用版本，并且这个方法的调用版本在运行期是不可改变的
(2) 分派
1.静态分派:
package king.concurrent;
public class StaticDispatch{
    static abstract class Human{
    }
    static class Man extends Human{
    }
    static class Woman extends Human{
    }
    public void sayHello(Human guy){
        System.out.println("hello,guy！");
    }
    public void sayHello(Man guy){
        System.out.println("hello,gentleman！");
    }
    public void sayHello(Woman guy){
        System.out.println("hello,lady！");
    }
    public static void main(String[]args){
        Human man=new Man(); // Human是静态类型，Man是实际类型
        Human woman=new Woman();
        //两个静态类型相同但实际类型,不同的变量，但虚拟机（准确地说是编译器）在重载时是通过参数的静态类型而不是实际类型作为判定依据的
        StaticDispatch sr=new StaticDispatch();
        sr.sayHello(man);
        sr.sayHello(woman);
    }
}

2、动态分派(重写):把这种在运行期根据实际类型确定方法执行版本的分派过程称为动态分派。
不再根据静态类型来决定类型决定
public class DynamicDispatch{
    static abstract class Human{
        protected abstract void sayHello（）；
    }
    static class Man extends Human{
        @Override
        protected void sayHello（）{
            System.out.println（"man say hello"）；
        }
    }
    static class Woman extends Human{
        @Override
        protected void sayHello（）{
            System.out.println（"woman say hello"）；
        }
    }
    public static void main（String[]args）{
        Human man=new Man（）；
        Human woman=new Woman（）；
        man.sayHello（）；
        woman.sayHello（）；
        man=new Woman（）；
        man.sayHello（）；
    }
}
Java虚拟机是如何根据实际类型来分派方法执行版本的呢
public static void main（java.lang.String[]）；
Code：
Stack=2，Locals=3，Args_size=1
0：new#16；//class org/fenixsoft/polymorphic/DynamicDispatch $Man
3：dup
4：invokespecial#18；//Method org/fenixsoft/polymorphic/DynamicDispatch $Man."＜init＞"：（）V
7：astore_1
8：new#19；//class org/fenixsoft/polymorphic/DynamicDispatch $Woman
11：dup
12：invokespecial#21；//Method org/fenixsoft/polymorphic/DynamicDispa
tch $Woman."＜init＞"：（）V
15：astore_2
16：aload_1
17：invokevirtual#22；//Method org/fenixsoft/polymorphic/DynamicDispatch $Human.sayHello：（）V
20：aload_2
21：invokevirtual#22；//Method org/fenixsoft/polymorphic/DynamicDispatch $Human.sayHello：（）V
24：new#19；//class org/fenixsoft/polymorphic/DynamicDispatch $Woman
27：dup
28：invokespecial#21；//Method org/fenixsoft/polymorphic/Dynam
icDispatch $Woman."＜init＞"：（）V
31：astore_1
32：aload_1
33：invokevirtual#22；//Method org/fenixsoft/polymorphic/
DynamicDispatch $Human.sayHello：（）V
36：return

3、虚拟机动态分派的实现
面对这种情况，最常用的“稳定优化”手段就是为类在方法区中建立一个虚方法表（Vritual Method Table，也称为vtable，
与此对应的，在invokeinterface执行时也会用到接口方法表――Inteface Method Table，简称itable），使用虚方法表索引来代替元数据查找以提高性能。

虚方法表： 虚方法表中存放着各个方法的实际入口地址。
如果某个方法在子类中没有被重写，那子类的虚方法表里面的地址入口和父类相同方法的地址入口是一致的都指向父类的实现入口。
如果子类中重写了这个方法，子类方法表中的地址将会替换为指向子类实现版本的入口地址。

4 基于栈的字节码解释执行引擎
虚拟机如何执行方法中的字节码指令:
解析执行（通过解析器执行）和编译执行（通过即时编译器产生本地代码执行）

1、解析执行
Java语言经常被人们定位为“解释执行”的语言，在Java初生的JDK 1.0时代，这种定义还算是比较准确的，
但当主流的虚拟机中都包含了即时编译器后，Class文件中的代码到底会被解释执行还是编译执行，就成了只有虚拟机自己才能准确判断的事情。

2、基于栈的指令集与基于寄存器的指令集

3、基于栈的解析器执行过程

第9章 类加载及执行子系统的案例与实战
通过程序进行操作:字节码生成与类加载器这两部分

1、Tomcat类加载器的架构
Common类加载器 ->Catalina类加载器和Shared类加载器
Shared类加载器 ->WebApp类加载器->Jsp类加载器

2、字节码技术与动态代理
JDK动态代理
public class DynamicProxyTest{
    interface IHello{
        void sayHello（）;
    }
    static class Hello implements IHello{
        @Override
        public void sayHello（）{
            System.out.println（"hello world"）;
        }
    }
    static class DynamicProxy implements InvocationHandler{
        Object originalObj;

        Object bind（Object originalObj）{
            this.originalObj=originalObj;
            //这个方法返回一个实现了IHello的接口，并且代理了new Hello（）实例行为的对象。
            return Proxy.newProxyInstance（originalObj.getClass（）.getClassLoader（），originalObj.getClass（）.getInterfaces（），this）;
        }

        @Override
        public Object invoke（Object proxy,Method method,Object[]args）throws Throwable{
            System.out.println（"welcome"）;
            return method.invoke（originalObj,args）;
        }
    }
    public static void main（String[]args）{
        IHello hello=（IHello）new DynamicProxy（）.bind（new Hello（））;
        hello.sayHello（）;
    }
}





