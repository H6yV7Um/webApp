第7章 虚拟机类加载机制
虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验、 转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型，这就是虚拟机的类加载机制

在Java语言里面，类型的加载、 连接和初始化过程都是在程序运行期间完成的，
这种策略虽然会令类加载时稍微增加一些性能开销，但是会为Java应用程序提供高度的灵活性，Java里天生可以动态扩展的语言特性就是依赖运行期动态加载和动态连接这个特点实现的。

1、类加载的时机
    类从被加载到虚拟机内存中开始，到卸载出内存为止，它的整个生命周期包括：
    加载（Loading）、 验证（Verification）、 准备（Preparation）、解析（Resolution）、 初始化（Initialization）、 使用（Using）和卸载（Unloading）7个阶段。
        加载:加载Class文件。
        验证:Class文件的字节流中包含的信息符合当前虚拟机的要求。
        准备：正式为类变量分配并设置类变量初始值的阶段。
        解析：常量池的符号引用替换为直接引用的过程。

    主动引用
    初始化阶段，虚拟机规范则是严格规定了有且只有5种情况必须立即对类进行“初始化”
        (1)遇到new、 getstatic、 putstatic或invokestatic这4条字节码指令时，如果类没有进行过初始化，则需要先触发其初始化。
        (2)使用java.lang.reflect包的方法对类进行反射调用的时候，如果类没有进行过初始化，则需要先触发其初始化。
        (3)当初始化一个类的时候，如果发现其父类还没有进行过初始化，则需要先触发其父类的初始化。
        (4)当虚拟机启动时，用户需要指定一个要执行的主类（包含main（）方法的那个类），虚拟机会先初始化这个主类
        (5)当使用JDK 1.7的动态语言支持时，如果一个java.lang.invoke.MethodHandle实例最后的解析结果REF_getStatic、 REF_putStatic、 REF_invokeStatic的方法句柄，
    并且这个方法句柄所对应的类没有进行过初始化，则需要先触发其初始化

    被动引用
        (1)、通过其子类来引用父类中定义的静态字段，只会触发父类的初始化，而不会触发子类的初始化。
    package org.fenixsoft.classloading；
    /**
    *被动使用类字段演示一：
    *通过子类引用父类的静态字段，不会导致子类初始化
    **/
    public class SuperClass{
        static{
            System.out.println（"SuperClass init！"）；
        }
        public static int value=123；
    }
    public class SubClass extends SuperClass{
        static{
            System.out.println（"SubClass init！"）；
        }
    }
    /
    **
    *非主动使用类字段演示
    **/
    public class NotInitialization{
        public static void main（String[]args）{
            System.out.println（SubClass.value);value是静态变量，不会初始化父类，只会初始化子类。
        }
    }
    (2)、通过数组引用类，不会触发此类的初始化
        package org.fenixsoft.classloading；
        /**
        *被动使用类字段演示二：
        *通过数组定义来引用类，不会触发此类的初始化
        **/
        public class NotInitialization{
            public static void main（String[]args）{
                SuperClass[]sca=new SuperClass[10]；
            }
        }
    (3)、使用类的常量时，常量在编译阶段会存入调用类的常量池，本质上并没有直接引用到定义常量的类，因此不会触发类的初始化
         package org.fenixsoft.classloading；
         /**
         *被动使用类字段演示三：
         *常量在编译阶段会存入调用类的常量池中，本质上并没有直接引用到定义常量的类，因此不会触发定义常量的类的初始化。
         **/
         public class ConstClass{
             static{
                System.out.println（"ConstClass init！"）；
             }
            public static final String HELLOWORLD="hello world"；
         }
         /
         **
         *非主动使用类字段演示
         **/
         public class NotInitialization{
             public static void main（String[]args）{
                System.out.println（ConstClass.HELLOWORLD）；
             }
         }

*2、类加载的过程
一、加载
    虚拟机需要完成以下3件事情
    1）通过一个类的全限定名来获取定义此类的二进制字节流。
    2）将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。
    3）在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口。

    非数组类的加载：需要使用类加载器完成
    数组类：不需要通过类加载器创建，由java虚拟机直接创建的。

    注意加载阶段与连接阶段的部分内容是交替进行的。

二、验证
    为了确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全

三、准备:
    正式为类变量(static)分配内存并设置类变量初始值的阶段，
    这些变量所使用的内存都将在方法区中进行分配

四、解析：
    常量池内的符号引用替换为直接引用的过程
    符号引用存放地址: 在Class文件中它以CONSTANT_Class_info、CONSTANT_Fieldref_info、 CONSTANT_Methodref_info等类型的常量池出现

    具体原理：
    在java中，一个java类将会编译成一个class文件。在编译时，java类并不知道引用类的实际内存地址，因此只能使用符号引用来代替。
    比如org.simple.People类引用org.simple.Tool类，在编译时People类并不知道Tool类的实际内存地址，因此只能使用符号org.simple.Tool(假设)来表示Tool类的地址。
    而在类装载器装载People类时，此时可以通过虚拟机获取Tool类 的实际内存地址，因此便可以既将符号org.simple.Tool替换为Tool类的实际内存地址，及直接引用地址。

五、初始化：真正开始执行类中定义的Java程序代码（或者说是字节码,是执行类构造器＜clinit＞（）方法的过程。
    类构造器＜clinit＞（）方法：
    1、＜clinit＞（）方法是由编译器自动收集类中的所有类变量的赋值动作和静态语句块（static{}块）中的语句合并产生的，
       编译器收集的顺序是由语句在源文件中出现的顺序所决定的。

    2、＜clinit＞（）方法与类的构造函数（或者说实例构造器＜init＞（）方法）不同，它不需要显式地调用父类构造器，
       虚拟机会保证在子类的＜clinit＞（）方法执行之前，父类的＜clinit＞（）方法已经执行完毕。

    3、＜clinit＞（）方法对于类或接口来说并不是必需的，如果一个类中没有静态语句块，也没有对变量的赋值操作，
       那么编译器可以不为这个类生成＜clinit＞（）方法。

    4、虚拟机会保证一个类的＜clinit＞（）方法在多线程环境中被正确地加锁、 同步，如果多个线程同时去初始化一个类，
       那么只会有一个线程去执行这个类的＜clinit＞（）方法，其他线程都需要阻塞等待，直到活动线程执行＜clinit＞（）方法完毕
       其他线程唤醒之后不会再次进入＜clinit＞（）方法。 同一个类加载器下，一个类型只会初始化一次。

3、类加载器
(1) 类与类加载器
    比较两个类是否“相等”，只有在这两个类是由同一个类加载器加载的前提下才有意义，否则，即使这两个类来源于同一个Class文件，被同一个虚拟机加载，只要加载它们的类加载器不同，那这两个类就必定不相等
    这里所指的“相等”，包括代表类的Class对象的equals（）方法、 isAssignableFrom（）方法、 isInstance（）方法的返回结果，也包括使用instanceof关键字做对象所属关系判定等情况。
    例子：
    /**
    *类加载器与instanceof关键字演示
    **
    @author zzm
    */
    public class ClassLoaderTest{
        public static void main（String[]args）throws Exception{
        ClassLoader myLoader=new ClassLoader（）{
            @Override
            public Class＜?＞loadClass（String name）throws ClassNotFoundException{
                try{
                        String fileName=name.substring（name.lastIndexOf（"."）+1）+".class"；
                        InputStream is=getClass（）.getResourceAsStream（fileName）；
                        if（is==null）{
                            return super.loadClass（name）；
                        }
                        byte[]b=new byte[is.available（）]；
                        is.read（b）；
                        return defineClass（name,b，0，b.length）；
                }
                catch（IOException e）{
                    throw new ClassNotFoundException（name）；
                }
            }
        };
        Object obj=myLoader.loadClass（"org.fenixsoft.classloading.ClassLoaderTest"）.newInstance（）；
        System.out.println（obj.getClass（））；
        System.out.println（obj instanceof org.fenixsoft.classloading.ClassLoaderTest）；//有自己定义的类加载器加载的类和系统类加载器是不相等的
    }
   }

(2) 双亲委派模型
    一种是启动类加载器（Bootstrap ClassLoader），这个类加载器使用C++语言实现[1]，是虚拟机自身的一部分；

    另一种就是所有其他的类加载器，这些类加载器都由Java语言实现，独立于虚拟机外部，并且全都继承自抽象类java.lang.ClassLoader。

    三种类加载器:
        第一层：启动类加载器（Bootstrap ClassLoader）:
            这个类将器负责将存放在＜JAVA_HOME＞\lib目录中的，并且是虚拟机识别的（仅按照文件名识别，如rt.jar，名字不符合的类库即使放在lib目录中也不会被加载）类库加载到虚拟机内存中
            启动类加载器无法被Java程序直接引用，用户在编写自定义类加载器时，如果需要把加载请求委派给引导类加载器，那直接使用null代替即可
        第二层：扩展类加载器（Extension ClassLoader）:
            它负责加载＜JAVA_HOME＞\lib\ext目录中的，或者被java.ext.dirs系统变量所指定的路径中的所有类库，开发者可以直接使用扩展类加载器
        第三层：应用程序加载器 （Application ClassLoader）
             它负责加载用户类路径（ClassPath）上所指定的类库，开发者可以直接使用这个类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。

    双亲委派模型的工作过程是：
    如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，
    每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到顶层的启动类加载器中，
    只有当父加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需的类）时，子加载器才会尝试自己去加载。

(3) 破坏双亲委派模型


第8章 虚拟机字节码执行引擎
java虚拟机规范中指定了虚拟机字节码执行引擎的概念模型，从概念模型的角度来讲解虚拟机的方法调用和字节码执行。

1 运行时栈帧结构
栈帧（Stack Frame）是用于支持虚拟机进行方法调用和方法执行的数据结构，它是虚拟机运行时数据区中的虚拟机栈（Virtual Machine Stack)的栈元素
    栈栈存储了方法的局部变量表，操作数栈，动态链接和方法返回地址。
    每一个方法从调用开始至执行完成的过程，都对应着一个栈帧在虚拟机栈里面从入栈到出栈的过程
    于执行引擎来说，在活动线程中，只有位于栈顶的栈帧才是有效的，称为当前栈帧（Current StackFrame），与这个栈帧相关联的方法称为当前方法（Current Method）。

(1) 局部变量表（Local Variable Table）是一组变量值存储空间，用于存放方法参数和方法内部定义的局部变量.
    局部变量表的slot为0的位，存放的是this

    32位：
        一个Slot可以存放一个32位以内的数据类型，Java中占用32位以内的数据类型有boolean、 byte、 char、 short、int、 float、 reference和returnAddress 8种类型

    64位：
        对于64位的数据类型，虚拟机会以高位对齐的方式为其分配两个连续的Slot空间。Java语言中明确的64位的数据类型只有long和double两种.
        值得一提的是，这里把long和double数据类型分割存储的做法与“long和double的非原子性协定”中把一次long和double数据类型读写分割为两次32位读写的做法有些类似，
        不过，由于局部变量表建立在线程的堆栈上，是线程私有的数据，无论读写两个连续的Slot是否为原子操作，都不会引起数据安全问题

    访问方式：
        虚拟机通过索引定位的方式使用局部变量表，索引值的范围是从0开始至局部变量表最大的Slot数量。
        如果访问的是32位数据类型的变量，索引n就代表了使用第n个Slot
        如果是64位数据类型的变量，则说明会同时使用n和n+1两个Slot

    在方法执行时，虚拟机是使用局部变量表完成参数值到参数变量列表的传递过程的

(2) 操作数栈：它是一个后入先出栈。
    操作数栈的每一个元素可以是任意的Java数据类型，包括long和double。 32位数据类型所占的栈容量为1，64位数据类型所占的栈容量为2。

    当一个方法刚刚开始执行的时候，这个方法的操作数栈是空的，在方法的执行过程中，会有各种字节码指令往操作数栈中写入和提取内容，也就是出栈/入栈操作。
    例如，在做算术运算的时候是通过操作数栈来进行的，又或者在调用其他方法的时候是通过操作数栈来进行参数传递的。

    举个例子，整数加法的字节码指令iadd在运行的时候操作数栈中最接近栈顶的两个元素已经存入了两个int型的数值，当执行这个指令时，会将这两个int值出栈并相加，然后将相加的结果入栈。

(3) 动态连接
    每个栈帧都包含一个指向运行时常量池中该栈帧所对应方法的符号引用，持有这个引用是为了支持方法调用过程中的动态连接（Dynamic Linking）

    Class文件的常量池中存有大量的符号引用，字节码中的方法调用指令就以常量池中指向方法的符号引用作为参数。
        1、这些符号引用一部分会在类加载阶段或者第一次使用的时候就转化为直接引用，这种转化称为静态解析。
        2、另外一部分将在每一次运行期间转化为直接引用，这部分称为动态连接
        符号引用转为直接引用的方式：直接引用和动态连接.

(4) 方法返回地址
    方法退出方式：
        1、遇到任意一个方法返回的字节码指令
        2、在方法执行过程中遇到了异常

        无论采用何种退出方式，在方法退出之后，都需要返回到方法被调用的位置，程序才能继续执行，方法返回时可能需要在栈帧中保存一些信息，用来帮助恢复它的上层方法的执行状态
        方法正常退出时，调用者的PC计数器的值可以作为返回地址，栈帧中很可能会保存这个计数器值。
        方法异常退出时，返回地址是要通过异常处理器表来确定的，栈帧中一般不会保存这部分信息。

        方法退出的过程实际上就等同于把当前栈帧出栈，因此退出时可能执行的操作有：
        恢复上层方法的局部变量表和操作数栈，把返回值（如果有的话）压入调用者栈帧的操作数栈中，调整PC计数器的值以指向方法调用指令后面的一条指令等

2 方法调用
(1) 解析 ：所有方法调用中的目标方法在Class文件里面都是一个常量池中的符号引用，在类加载的解析阶段，会将其中的一部分符号引用转化为直接引用
           并且必须保证方法在程序真正运行之前就有一个可确定的调用版本，并且这个方法的调用版本在运行期是不可改变的
           调用目标在程序代码写好、 编译器进行编译时就必须确定下来。 这类方法的调用称为解析


(2) 分派 : 分派调用过程将会揭示多态性特征的一些最基本的体现
    如“重载”和“重写”在Java虚拟机之中是如何实现的

1、静态分派:
    所有依赖静态类型来定位方法执行版本的分派动作，都称为静态分派，静态分派的最典型应用就是多态性中的方法重载。
	静态分派发生在编译阶段。
	下面通过一段方法重载的示例程序来更清晰地说明这种分派机制：
	class Human{
	}
	class Man extends Human{
	}
	class Woman extends Human{
	}
	public class StaticPai{
	    //方法重载是：使用静态类型，而非实际类型
		public void say(Human hum){
			System.out.println("I am human");
		}
		public void say(Man hum){
			System.out.println("I am man");
		}
		public void say(Woman hum){
			System.out.println("I am woman");
		}

		public static void main(String[] args){
			Human man = new Man();
			Human woman = new Woman();
			StaticPai sp = new StaticPai();
			sp.say(man);
			sp.say(woman);
		}
	}
    上面代码的执行结果如下：
    I am human
    I am human

    原理：
    先看如下代码：
	Human man = new Man（）;
    我们把上面代码中的“Human”称为变量的静态类型，后面的“Man”称为变量的实际类型。

	静态类型是在编译期可知的，而实际类型变化的结果在运行期才可确定。
    在调用say（）方法时，方法的调用者都为sp的前提下，使用哪个重载版本，完全取决于传入参数的数量和数据类型。

	代码中刻意定义了两个静态类型相同、实际类型不同的变量，可见编译器在重载时是通过参数的静态类型而不是实际类型作为判定依据的。
	所以在编译阶段，Javac编译器就根据参数的静态类型决定使用哪个重载版本。

2、动态分派(重写):把这种在运行期根据实际类型确定方法执行版本的分派过程称为动态分派。不再根据静态类型来决定类型决定
package org.fenixsoft.polymorphic；
/**
*方法动态分派演示
*@author zzm
*/
public class DynamicDispatch{
    static abstract class Human{
        protected abstract void sayHello（）；
    }
    static class Man extends Human{
        @Override
        protected void sayHello（）{
            System.out.println（"man say hello"）；
        }
    }
    static class Woman extends Human{
        @Override
        protected void sayHello（）{
        System.out.println（"woman say hello"）；
        }
    }
    public static void main（String[]args）{
        Human man=new Man（）；
        Human woman=new Woman（）；
        man.sayHello（）；
        woman.sayHello（）；
        man=new Woman（）；
        man.sayHello（）；
    }
}
man say hello
woman say hello
woman say hello

原理：
    动态分派与多态性的另一个重要体现――重写。
    根据对父类实例化的子类的不同，调用的是不同子类中覆写的方法，很明显，这里是要根据变量的实际类型来分派方法的执行版本的。
    而实际类型的确定需要在程序运行时才能确定下来，这种在运行期根据实际类型确定方法执行版本的分派过程称为动态分派

    单分派是指调用一个对象的方法仅由对象的类型决定。
    多分派是指调用一个对象的方法不仅由对象的类型决定，同时还由其他因素决定，比如方法参数的类型等等

*3、虚拟机动态分派的实现


*4 基于栈的字节码解释执行引擎
虚拟机如何执行方法中的字节码指令:

    1、解析执行和编译执行

       解析执行:通过解析器执行,即对字节码逐条解释执行，这种方式的执行速度相对会比较慢,尤其当某个方法或代码块运行的特别频繁时，这种方式的执行效率就显得很低

       编译执行:通过即时编译器产生本地代码执行,当虚拟机发现某个方法或代码块运行特别频繁时，就会把这些代码认定为“Hot Spot Code”（热点代码），为了提高热点代码的执行效率，在运行时，虚拟机将会把这些代码编译成与本地平台相关的机器码，并进行各层次的优化.

       两者相互互补:解释执行可以节约内存，而编译执行可以提升效率

       当程序需要迅速启动和执行时，解释器可以首先发挥作用，省去编译的时间，立即执行；

       当程序运行后，随着时间的推移，编译器逐渐会发挥作用，把越来越多的代码编译成本地代码后，可以获取更高的执行效率。

    2、基于栈的指令集与基于寄存器的指令集
       例如：执行1 + 1 操作

       基于栈的指令集
           iconst_1
           iconst_1
           iadd
           istore_0
           两次 iconst_1 指令连续把两个常量 1 压入栈后, iadd 指令把栈顶的两个值出栈并相加, 然后再把结果放回栈顶,
           最后 istore_0 把栈顶的值放到局部变量表的第0个 Slot 中

        基于寄存器的指令集
           mov eax,1
           add eax,1
           mov 指令把 EAX 寄存器的值设为1, 然后 add 指令再把这个值加1, 结果就保存在 EAX寄存器中

        栈指令集的主要缺点是:执行速度相对来说稍微慢，
        基于寄存器的机器指令更长。

    3、基于栈的解析器执行过程
       参考：http://chenzhou123520.iteye.com/blog/1607270

第9章 类加载及执行子系统的案例与实战
    通过程序进行操作:字节码生成与类加载器这两部分

    1、Tomcat类加载器的架构
    Common类加载器 ->Catalina类加载器和Shared类加载器
    Shared类加载器 ->WebApp类加载器->Jsp类加载器

    2、字节码技术与动态代理
    JDK动态代理
    public class DynamicProxyTest{
        interface IHello{
            void sayHello（）;
        }
        static class Hello implements IHello{
            @Override
            public void sayHello（）{
                System.out.println（"hello world"）;
            }
        }
        static class DynamicProxy implements InvocationHandler{
            Object originalObj;

            Object bind（Object originalObj）{
                this.originalObj=originalObj;
                //这个方法返回一个实现了IHello的接口，并且代理了new Hello（）实例行为的对象。
                return Proxy.newProxyInstance（originalObj.getClass（）.getClassLoader（），originalObj.getClass（）.getInterfaces（），this）;
            }

            @Override
            public Object invoke（Object proxy,Method method,Object[]args）throws Throwable{
                System.out.println（"welcome"）;
                return method.invoke（originalObj,args）;
            }
        }
        public static void main（String[]args）{
            IHello hello=（IHello）new DynamicProxy（）.bind（new Hello（））;
            hello.sayHello（）;
        }
    }





