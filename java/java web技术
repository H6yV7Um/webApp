第一章 深入web请求过程
    1、B/S架构
       互联网上所有资源都要用一个URL来表示
       必须基于http与服务端交互
       可以使用HttpClient模拟浏览器发http请求

    2、http解析
       http请求头：
            accept-charset :  用于指定客户端接受字符集
            accept-encoding : 用于指定可接受的内容编码
            accept-language : 用于指定一种自然语言
            host: 用于指定被请求资源的主机和端口
            user-Agent : 客户端将它的操作系统，浏览器和其他属性告诉服务器
            connection : 当前连接是否保持 Connection : Keep-Alive

       http响应头：
            Server :  使用的服务器名称
            Content-Type : 媒体类型
            Content-Encoding : 请求报头Accept-Encoding对应
            Content-Language : 与accept-language对应
            Content-Length : 实体正文的长度
            Keep-Alive : 保持连接的时间

       http状态码
            200 请求成功
            302 临时跳转、跳转的地址通过Location指定
            400 客户端请求有语法错误，不能被服务器识别
            403 服务器收到请求，但是拒绝提供服务
            404 请求的资源不存在
            500 服务器内容错误

       http缓存
            Pragma : no-cache
            Cache-Control : no-cache
            Expires : 超过这个时间值后，缓存的内容将失败
            Last-Modified/Etag : 服务器上的资源的最后修改时间，资源可以使静态或者动态的内容

       DNS域名解析 ：通过URL来发布和请求资源的，而URL中的域名需要解析成IP地址才能与远程主机建立连接
            解析过程
                1、浏览器会检查缓存中有没有这个域名对应的解析过的ip地址，如果缓存中有，这个解析过程就结束
                2、如果用户的浏览器缓存中没有，浏览器会查找操作系统缓存中是否有这个域名对应的DNS结果
                   操作系统也会有一个域名解析的过程，可以通过hosts文件来设置。如果你指定了一个域名对应ip地址，浏览器会首先使用这个ip

                3、域名服务器：在网络配置中"DNS服务器地址"这一项，这个地址就用于解决前面所说的如果两个过程无法解析时，
                   操作系统会把这个域名发送给这里设置的LDNS（本地区的域名服务器）

                4、如LDNS仍然没有命中，直接Root Server域名服务器请求解析
                5、根域名服务器返回本地域名服务器一个所查询域的主域名服务器
                6、本地域名服务器再向gTLD服务请求
                7、gTLD服务器查找并返回此域名对应的Name Server域名服务器的地址
                8、Name Server域名服务器会查询存储的域名和ip的映射关系
                9、返回域名对应的ip和ttl值

            清除缓存的域名
                1、windows : ipconfig/flushdns 命令来刷新缓存
                2、linux : /etc/init.d/nscd restart

       CDN:
            缓存静态文件的内容
            动态加速：CDN的DNS解析中通过动态的链路寻找回源最好的一条路径，然后通过DNS的调度
            将所有请求调度到选定的这条路径上回源，从而加速用户访问的效率。

       负载均衡:

第二章 ：分析java i/o的工作机制
    字节操作IO : inputStream和outputStream
    字符操作IO : writer 和 reader
       字节与字符转换: 数据持久化或网络传输都是以字节进行的，要有从字符到字节，从字节到字符的转换。
            InputStreamReader类是从字节到字符的转化桥梁，从InputStream到Reader的过程要指定编码字符集，否则将
            采用操作系统默认的字符集，可能会有乱码的问题.

            1:字节流转为字符流的列子
            FileInputStream fileInputStream = new FileInputStream("d:/text.txt");  // 定义一个指向D:/TEXT.TXT 的字节流

            InputStreamReader inputStreamReader = new InputStreamReader(fileInputStream); //字节流转换成InputStreamReader

            BufferedReader bufferedReader = new BufferedReader(inputSteamReader);//InputStreamReader 转换成带缓存的bufferedReader

            String ss = new String();可以把读出来的内容赋值给字符
            String s;
            while((s = bufferedReader.readLine())!=null){
                ss += s;
            }
       序列化文件中包含的内容： 序列化的协议，SerialVersionUID（序列化ID)


    磁盘操作IO : File

    网络操作IO : Socket : 写网络还有一步需要处理，就是让底层操作系统再将数据传送到其他地方而不是本地磁盘
        1、建立和关闭一个TCP连接
           (1)三次握手
           client发送SYN包（值为j）以及SEQ包到server端，此时client进入SYN_SEND状态。
           此为第一次握手。
           server端收到SYN包后，发送一个ACK（值为seq+1）确认包和SYN（值为k）给client，此时server进入SYN_RECV状态。
           此为第二次握手。
           client收到SYN+ACK包后，向server发送一个ACK（值为k+1），该包发送完成后，client和server均进入ESTABLISH状态。
           此为第三次握手。

           (2)四次挥手 : TCP连接是全双工（Full Duplex）的，因此造成了两个方向都需要进行关闭
           第一阶段
               1、首先client会发送一个FIN包给server（同时还有ack和seq包），这是要告诉server，我已经没有数据要发给你了，此时client处于FIN_WAIT_1状态。接收到FIN包的server处于CLOSE_WAIT的状态。
               2、server发回一个ACK（值为client传过来的seq+1）和seq（值为client传过来的ack的值）给client。client收到server发过来的包后确认关闭连接，此时client处于FIN_WAIT_2。
           第二阶段
               1、server在接收到client的FIN后，得知client要断开tcp连接了，于是在发送完ack和seq给client后，自己发送一个FIN包给client（也带有ack和seq包），告诉client我也要断开连接了，此时server处于LAST_ACK状态。
               2、client接收到server的FIN信息后，会回复server一个ack包，并且会进入TIME_WAIT状态，持续2个MSL（Max Segment Lifetime），这个时间windows下为240s。而server接收到client后便关闭连接。client在指定时间过后仍然没有接收到server的数据，确认server已经没有数据过来，也关闭了连接。
           此时双方都进入CLOSED状态。

        2、java socket的工作机制
           (1) 客户端创建一个socket
           (2) 服务端创建一个serverSocket

        3、NIO的工作方式
           (1)BIO即阻塞I/O，不管是磁盘I/O，还是网络I/O，数据在写入OutputStream或者从InputStream读取时都有可能阻塞。
              虽然一个客户端对应一个处理线程，出现阻塞时只是一个线程阻塞而不会影响其他线程工作。
              当客户端特别多时，会处理特别多的线程，非常耗资源。

           (2)NIO: Channel和 Selector 它们是NIO中的两个核心概念
                   Selector会轮询每个Channel状态。

        4、I/O调优
           (1) 磁盘I/0优化
               增加缓存，减少磁盘访问次数
               优化磁盘的管理系统 ： 磁盘阵列

           (2) TCP网络参数调优
               建立一个TCP连接，必须知道对方的IP和端口号，32位操作系统，一个有65525个端口

           (3) 网络I/O优化
               1、减少网络交互次数：要减少网络交互的次数通常需要在网络交互的两端设置缓存
               2、减少网络传输数据量的大小： 将数据压缩在传输

        5、java I/O的适配器模式
           InputStreamReader是适配器，InputStream源接口和Reader目的接口
        6、java I/O的装饰者模式
           FileInputStream是装饰者，FileInputStream是被装饰者 BufferedInputSteam是装饰者的实现


第三章:java web中的中文编码问题
    1、java中需要编码的场景 ： 都在字符到字节，或者字节到字符的转换上。

第四章:javac编译原理
       javac的任务就是将java源代码编译成java字节码，也就是jvm能够识别的二进制码

    1、词法分析器 : 读取源代码，一个字节一个字节的读进来，找出这些词法中哪些是我们定义的语言关键词。
                    词法分析的结果：就是从源代码中找出一些规范化的token流
    2、语法分析器 : 就是在词法分析中得到的token流进行语言分析，这一步就是检查这些关键词组合在一起是不是符合java语言规范
                    语法分析的结果：就是形成一个符合java语言规定的抽象语法树
    3、语义分析器 : 将复杂的语法转化成最简单的语法
    4、字节码生成器： 生成代码 (将会根据经过注释的抽象语法树生成字节码)

    JIT编译：Java 程序最初是仅仅通过解释器解释执行的，即对字节码逐条解释执行，这种方式的执行速度相对会比较慢，尤其当某个方法或代码块运行的特别频繁时，这种方式的执行效率就显得很低。
             于是后来在虚拟机中引入了 JIT 编译器（即时编译器），当虚拟机发现某个方法或代码块运行特别频繁时，
             就会把这些代码认定为“Hot Spot Code”（热点代码），为了提高热点代码的执行效率，在运行时，虚拟机将会把这些代码编译成与本地平台相关的机器码，并进行各层次的优化。


第五章：jvm指令集简介
    介绍Oolong编程语言： 执行java *.class文件 命令，会生产*.j文件

    1、class文件头


第9章： Servlet工作原理
    创建Servlet的过程：
        首先，解析web.xml文件，并且将servlet包装成Context容器中的Wrapper
        然后，Servlet的实例化： load-on-startup配置项大于0，才会实例化。调用Servlet的init方法
    Servlet如何工作：服务器如何根据这个URL来到达正确的servlet容器中的
        通过Mapper，请求可以找到正确的Servlet容器，在请求到达Servlet容器前，必须经过Filter和Listener

    Servlet的Listener：基于观察者模式
      1、ServletContextAttributeListener: 设置Attribute时会触发
      2、ServletRequestAttributeListener: request设置Attribute时会触发
      3、ServletRequestListener: HttpServletRequest调service方法会触发
      4、HttpSessionAttributeLister: session设置Attribute时会触发
      5、ServletContextListener: Context初始化和销毁时会触发
      6、HttpSessionListener：session对象创建和销毁时会触发

    Filter: 请求进来先进入Filter


第10章： 深入理解Session和Cookie
    Session与Cookie作用是为了保持访问用户与后端服务器的交互状态
    使用Session和Cookie时，要注意两个问题： Cookie数量和大小，Session的共享问题

    1: Cookie的作用：当一个用户通过HTTP访问一个服务器时，这个服务器将一些key/value键值对返回给浏览器，这个用户下次访问这个服务器，这个key/value会被带回服务器
       Cookie的属性项

    2: Session: 同一个客户端每次和服务端交互时，不需要传回所有的Cookie值，只要返回一个ID。
       服务器创建session出来后，会把session的id号，以cookie的形式回写给客户机，这样，只要客户机的浏览器不关，再去访问服务器时，都会带着session的id号去，服务器发现客户机浏览器带session id过来了，就会使用内存中与之对应的session为之服务

    3: Cookie和Session都可以跟踪客户端的访问记录，但他们的工作方式不同
       Cookie通过把所有数据通过HTTP的头部从客户端传到服务器端，又从服务端再传到客户端，所有数据都存储在客户端的浏览器中，所以这些Cookie数据可以被访问到。
       会导致不安全。
       Session的安全性要高：Session是将数据保存在服务端，只是通过Cookie传递一个SessionID

    4:分布式Session
      Cookie和Session各有优缺点： 所以有结合使用
      可以将Cookie和Session的配置项注册到zookeeper注册中心，应用服务可以从zookeeper上获取相应的内容
      Session的内容不保存在应用服务器的内存中，而是存在分布式缓存中

    5:Cookie压缩： 可以自定义一个Filter在页面输出时对Cookie进行全部或部分压缩




































