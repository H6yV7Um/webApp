package test.com.iqiyi.mams.reading.core.service.statistics;

import com.iqiyi.mams.reading.core.dao.book.BookDao;
import com.iqiyi.mams.reading.core.model.book.Book;
import com.iqiyi.mams.reading.core.model.book.BookChapter;
import com.iqiyi.mams.reading.core.model.book.BookVolume;
import com.iqiyi.mams.reading.core.service.book.BookChapterService;
import com.iqiyi.mams.reading.core.service.book.BookService;
import com.iqiyi.mams.reading.core.service.book.BookVolumeService;
import com.iqiyi.mams.reading.core.utils.StringUtil;
import com.iqiyi.mams.reading.core.utils.similar.HammingDistanceSimilarity;
import org.hibernate.Query;
import org.hibernate.criterion.ProjectionList;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.jruby.ast.types.INameNode;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import test.com.iqiyi.mams.reading.core.service.audit.impl.CommonTest;

import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Created by wangle on 2016/9/5.
 */
public class StatisticsTest extends CommonTest {

    private static Logger logger = LoggerFactory.getLogger(StatisticsTest.class);

    @Autowired
    private BookService bookService;

    @Autowired
    private BookChapterService bookChapterService;

    @Autowired
    private BookDao bookDao;
    @Test
    public void StatisticsTest() {
        //随机查1000本书
//        Query query = bookDao.createQuery("SELECT qipuId from Book ORDER BY RAND()").setFirstResult(0).setMaxResults(1000);
//
//        List<Long> list = query.list();
//        for(Long qiPuId:list){// 多条分组记录
//            statistics(qiPuId);
//        }
        statistics(205847339L);

    }

    /**
     * 统计方法
     * @param qiPuId
     */
    private void statistics(Long qiPuId) {

        Book book = bookService.getBookByQipuId(qiPuId);

        List<BookChapter> bookChapterListByBookId = bookChapterService.findBookChapterListByBookId(book.getId());

        double bookTotal = bookChapterListByBookId.size();
        double format = 0;
        for (BookChapter bookChapter : bookChapterListByBookId) {
            if (format(bookChapter.getTitle()))
                format++;
        }
        //正确格式化的章： 80%以上的书，才做统计处理
        if ((format / bookTotal * 100) > 80) {
            for (int j = 0 ; j<bookChapterListByBookId.size() ;j++){
                //规则1： 不能格式化的章title，标示-1
                //规则2： 能格式化的章title，如第1章***，标示为1；如第2章***，标示为2
                BookChapter bookChapter = bookChapterListByBookId.get(j);
                Matcher seqMatcher = rule(bookChapter.getTitle());
                if (seqMatcher.find()) {
                    if (j > 0) {
                        BookChapter beforeBookChapter = bookChapterListByBookId.get(j - 1);
                        Matcher beforeSeqMatcher = rule(beforeBookChapter.getTitle());
                        if (beforeSeqMatcher.find()) {
                            //判断是否乱序
                            if (Integer.valueOf(beforeSeqMatcher.group(1)) > Integer.valueOf(seqMatcher.group(1))) {
                                logger.info("书信息: " + bookChapter.getBookId() +
                                        " 卷信息: " + bookChapter.getVolumeId() + " 章信息: " + bookChapter.getId() + " 章标题: " + bookChapter.getTitle() + ": 章乱序 " + seqMatcher.group(1));
                            }else {
                                logger.info("书信息: " + bookChapter.getBookId() + " 卷信息: " + bookChapter.getVolumeId() + " 章信息: " + bookChapter.getId() +
                                        " 章标题: " + bookChapter.getTitle() + ": 章序号 " + seqMatcher.group(1));
                            }
                        }else {
                            logger.info("书信息: " + bookChapter.getBookId() + " 卷信息: " + bookChapter.getVolumeId() + " 章信息: " + bookChapter.getId() +
                                    " 章标题: " + bookChapter.getTitle() + ": 章序号 " + seqMatcher.group(1));
                        }
                    } else {
                        logger.info("书信息: " + bookChapter.getBookId() + " 卷信息: " + bookChapter.getVolumeId() + " 章信息: " + bookChapter.getId() +
                                " 章标题: " + bookChapter.getTitle() + ": 章序号 " + seqMatcher.group(1));
                    }
                }else {
                   logger.info("书信息: "+bookChapter.getBookId() +" 卷信息: " +bookChapter.getVolumeId() + " 章信息: " + bookChapter.getId() +
                           " 章标题: "+bookChapter.getTitle()+": 章不能格式化 "+-1);
                }
            }
        } else {
            //书不满足统计的需求
            logger.info("书不满足统计的需求qiPuId: " + qiPuId);
        }
    }

    /**
     * 匹配规则
     * @param title
     * @return
     */
    private Matcher rule(String title) {
        return Pattern.compile("第(\\s*[0-9]+\\s*)小?章").matcher(title);
    }


    /**
     * 判断是否格式化
     * @param title
     * @return
     */
    private boolean format(String title) {
        Matcher seqMatcher = rule(title);
        boolean format = false;
        while (seqMatcher.find()) {
            if (seqMatcher.groupCount() == 1) {
                format = true;
            }
        }
        return format;
    }
}
