一: 坐标元素
1:groupId
2:artifactId
3:version
4:packaging: maven项目的打包方式
5:classifier:构建附属构建

二: 依赖配置
<dependencies>
    <dependency>
        <groupId></groupId> //1: groupId,artifactId和version
        <artifactId></artifactId>
        <version></version>
        <type></type> //2: type 默认jar
        <scope></scope> // 3: scope 依赖范围
        <optional></optional> // 4: optional 标记依赖是否可选
        <exclusions> // 5: exclusions 用来排除传递性依赖
            <exclusion>
            </exclusion>
        </exclusions>
    </dependency>
</dependencies>

三:依赖范围
compile:  编译、测试、运行3种classPath都有效，例子spring-core
test:     测试依赖范围,例子JUnit
provided: 编译和测试有效,运行无效,例子servlet-api
runtime:  运行时有效，jdbc
system : maven仓库之外的类库文件
import : 导入依赖范围。编译、测试、运行3种classPath都没有影响

四:传递性依赖
1、A依赖B项目，B依赖C项目，A依赖C项目
2、依赖调解
当存在这两种依赖传递时，路径不一样时，路径短的为先
A->B->C-X(1.0)
A->D->X(2.0)
当存在这两种依赖传递时，路径一样时，根据pom依赖顺序
A->B 、B->X(可选)、B->Y(可选)

3、可选依赖<optional>
A->B,B->X(可选),B->Y(可选)
因为X,Y是可选依赖，依赖将不会得以传递

4、Maven依赖常见的技巧
1、排除传递性依赖:
当传递依赖中的版本与根项目依赖的项目版本冲突时，排除传递依赖的版本

2、归类依赖:同一项目的不同模块，版本都是相同的
可以使用相同的版本号统一管理

3、优化依赖:去除多余的依赖，显示地声明某些必须的依赖
mvn dependency:list 列出所有依赖
mvn dependency:tree 列出所有依赖（以tree的形式）


五:Maven仓库
1: 首先会查看本地仓库，如果本地仓库存在此构件，直接使用，如果本地仓库不存在此构件，去远程仓库下载。

2: 本地仓库；远程仓库（中央仓库，私服，其他公共库）

3: 远程仓库的配置(JBoss Maven)
<repositories>
    <repository>
        <id>jboss</id>
        <name>JBOSS</name>
        <url>http://repository.jboss.com/maven2</url>
        <release>
            <enabled>true</enabled>//支持发布版本下载
        </release>
        <snapshots>
            <enabled>false</enabled>//不支持快照下载
        </snapshots>
        <layout>default</layout>
    </repository>
</repositories>

4: 将项目生的构建部署至远程仓库,需要下面配置
<distributionManagement>
    <repository>
        <id>proj-releases</id>
        <name>Proj Releases Repository</name>
        <url>http://192.168.1.100/content/repositories/proj-releases</url>
    </repository>
    <snapshotRepository>
        <id>proj-snapshots</id>
        <name>Proj Snapshot Repository</name>
        <url>http://192.168.1.100/content/repositories/proj-snapshots</url>
    </snapshotRepository>
</distributionManagement>

通过mvn clean deploy命令，Maven就会将项目构建输出的构件部署到配置对应的远程仓库

5: 镜像: 能提供更快的服务
在setting.xml配置
<settings>
    <mirrors>
        <id>maven.net.cn</id>
        <name>one of the central mirrows in china</name>
        <url>http://maven.net.cn/content/group/public</url>
        <mirrorOf>central</mirrorOf>//中央仓库的镜像
    </mirros>
</setting>

六、生命周期和插件
一、生命周期
1:clean 清理上一次构建生成的文件
2:compile 编译项目的主代码。
src/main/java目录下java文件输出至主classPath目录中
3:test-comile 编译项目的测试代码
src/test/java目录下java文件输出至测试classPath目录中
4:test 使用单元测试框架运行测试，测试代码不会被打包或部署
5:package 接受编译好的代码，打包成可发布的格式，如jar
6:install 将包安装到maven本地仓库
7:deploy 将最终的包复制到远程仓库
8:site生命周期建立项目站点

二、与插件的关系
以及具体的任务是有插件完成: 插件以独立的构件形式存在,maven的生命周期与插件相互绑定
1、mvn complier生命周期对应着 maven-compiler-plugin
2、当实际项目中: 可能插件不满足实际的要求，需要在pom文件定义插件

三、插件配置
1、命令行插件配置
mvn install -Dmaven.test.skip = true 跳过单元测试
2、POM中插件全局配置
compiler时使用的插件
<plugin>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>2.0.2</version>
    <configuration>
        <source>1.6</source>
        <target>1.6</target>
        <encoding>UTF8</encoding>
    </configuration>
</plugin>
处理资源文件时，使用的插件
<plugin>
      <artifactId>maven-resources-plugin</artifactId>
                <version>2.4.2</version>
      <configuration>
                    <encoding>UTF-8</encoding>
      </configuration>
</plugin>

3: Maven调用Ant任务:配置maven-antrun-plugin插件
4: 插件仓库
<pluginRepositories>
    <pluginRepository>
        <id></id>
        <name>Maven Plugin Repository</name>
        <url>http://repol.maven.org/maven2</url>
        <layout>default</layout>
    </pluginRepository>
</pluginRepositories>

五:聚合与继承
1: 聚合
现有两个模块：account-email 和 account-persist，使用一条命令来构建这两个模块，创建一个模块account-aggregator
在account-aggregator的pom文件中,
<modules>
    <module>account-email</module>
    <module>account-persist</module>
</modules>

2: 继承 : 创建POM的父子结构，然后在父POM中声明一些配置供子POM继承
<parent>
    <artifactId></artifactId>
    <groupId></groupId>
    <version></version>
    <relativePath></relativePath>
</parent>

3:依赖管理
dependencies元素:说明依赖是会被继承的,应该与dependencyManagement元素一起使用，
即能让子模块继承到父模块的依赖配置，又能保证子模块依赖使用的灵活性,可以做到统一管理依赖

使用dependencyManagement，声明的依赖既不会给当前模块引入依赖，也不会给它的子模块引入依赖
子模块引入依赖的配置，会简化很多
注意　依赖范围import只能在dependencyManagement使用，作用将另一个模块的dependencyManagement完全引入进来

4:插件管理<pluginManagement>

5:构建顺序: 模块有依赖，先构建依赖
mvn clean install -pl module1,module2 查看module1,module2的信息，其他的模块信息忽略


六:灵活构建
1、maven 属性:
通过<properties>元素可以自定义一个或多个Maven属性

2、maven针对不同的环境生成不同的构件:
数据库配置文件properties:如下
database.jdbc.driverClass = ${db.driver}
database.jdbc.connectionURL = ${db.url}
database.jdbc.username = ${db.username}
database.jdbc.password = ${db.password}

在pom文件中
<profiles>
    <profile>
        <id>dev</id>
        <properties>
            <db.driver>com.mysql.jdbc.Driver</db.driver>
            <db.url>jdbc:mysql://192.168.1.100:3306/test</db.url>
            <db.username>dev</db.username>
            <db.password>dev-pwd</db.password>
        </properties>
    </profile>
</profiles>

通过配置插件可以件pom定义的属性设置到propreties文件
<plugin>
    <artifactId>maven-resources-plugin</artifactId>
    <version>2.4.2</version>
    <configuration>
        <encoding>UTF-8</encoding>
    </configuration>
</plugin>

(1)mvn clean install -Pdev 激活配置,可以激活多个profile(手动激活)
(2)settings文件显示激活
<settings>
    <activeProfiles>
        <activeProfile>dev</activeProfile>
    </activeProfiles>
</settings>
(3) 操作系统环境激活
<profile>
    <id>win</id>
    <activation>
    <os>
        <family>Windows</family>
    </os>
    </activation>
    <properties>
    <deploy.env.name>test</deploy.env.name>
    <deploy.env.host.name>win</deploy.env.host.name>
    <knowledge.sdk.java.version>1.3.160719-SNAPSHOT</knowledge.sdk.java.version>
    <knowledge.sdk.service.version>1.4.160809</knowledge.sdk.service.version>
    </properties>
</profile>
<profile>
    <id>mac</id>
    <activation>
        <os>
            <family>Mac</family>
        </os>
    </activation>
    <properties>
        <deploy.env.name>test</deploy.env.name>
        <deploy.env.host.name>win</deploy.env.host.name>
        <knowledge.sdk.java.version>1.3.160719-SNAPSHOT</knowledge.sdk.java.version><!-- 测试环境下奇谱的SDK镜像版本 -->
        <knowledge.sdk.service.version>1.4.160809</knowledge.sdk.service.version>
    </properties>
</profile>

(4)pom文件中默认激活
<profiles>
    <profile>
        <id>dev</id>
        <activation>
            <activeByDefault>true</activeByDefault>
        </activation>
    </profile>
</profiles>

(5)可以使用mvn help:active-profiles。查看当前激活的profile都有哪些





















































