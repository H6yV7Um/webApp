1: 单向一对一关联映射（one-to-one）
    有两种策略可以实现一对一的关联映射 :
    *主键关联：即让两个对象具有相同的主键值，以表明它们之间的一一对应的关系；数据库表不会有额外的字段来维护它们之间的关系，仅通过表的主键来关联.
    *唯一外键关联：外键关联，本来是用于多对一的配置，但是加上唯一的限制之后（采用<many-to-one>标签来映射，指定多的一端unique为true，这样就限制了多的一端的多重性为一），
    也可以用来表示一对一关联关系，其实它就是多对一的特殊情况.
    注意：因为一对一的主键关联映射扩展性不好，当我们的需要发生改变想要将其变为一对多的时候变无法操作了，所以我们遇到一对一关联的时候经常会采用唯一外键关联来解决问题，而很少使用一对一主键关联。

2 单向多对一关联映射（many-to-one)
    多对一关联映射原理：在多的一端加入一个外键，指向一的一端

3 单向一对多关联映射（one-to-many）：
    一对多关联映射和多对一关联映射原理是一致的，都是在多的一端加入一个外键，指向一的一端

    注意：它与多对一的区别是维护的关系不同
    *多对一维护的关系是：多指向一的关系，有了此关系，加载多的时候可以将一加载上来
    *一对多维护的关系是：一指向多的关系，有了此关系，在加载一的时候可以将多加载上来

4 单向多对多映射（many-to-many)
    多对多关联映射新增加一张表才完成基本映射

5 双向一对一关联映射
    对比单向一对一映射，需要在IdCard加入<one-to-one>标签，只影响加载

6 双向一对多关联映射（非常重要）：
    一对多双向关联的映射方式：
    * 在一的一端的集合上采用<key>标签，在多的一端加入一个外键
    * 在多的一端采用<many-to-one>标签
    注意：<key>标签和<many-to-one>标签加入的字段保持一致

    注释：inverse属性
        * inverse属性可以用在一对多和多对多双向关联上，inverse属性默认为false，为false表示本端可以维护关系，如果inverse为true，则本端不能维护关系，会交给另一端维护关系，本端失效。
          所以一对多关联映射我们通常在多的一端维护关系，让一的一端失效。
        * inverse是控制方向上的反转，只影响存储

7 双向多对多关联映射
    双向的目的就是为了两端都能将对方加载上来，和单向多对多的区别就是双向需要在两端都加入标签映射，需要注意的是：
    * 生成的中间表名称必须一样
    * 生成的中间表中的字段必须一样
