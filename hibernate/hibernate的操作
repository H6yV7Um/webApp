一、Session
    session.save(对象)
    session.delete(对象)
    session.load(Student.class, 1);//是会延时加载
    session.get(Student.class, 1);//不会延时加载
    session.update(对象)
        1. 用来更新离线(detached)对象，更新完成后转为persistent状态
        2. 更新瞬时(transient)对象会报错
        3. 持久化(persistent)状态的对象只要设定不同字段就会发生更新
    session.flush();
        1. 当session的事务提交后,会强制将内存(session缓存)与数据库同步。

二、Query查询接口
    HQL:
        步骤一：获得Query对象：Query query=s.createQuery(“HQL语句”);
        步骤二：为参数赋值：query.setXXX();
        步骤三：获得List对象：LIST list=query.list(); 说明，除了此方法外，Query
                接口还有一个常用的方法uniqueResult，如果明确查询的结果只有一个，便选择使用此方法。如果查询结果有多个使用此方法会报异常。
    QBC:
        步骤一： 获得Criteria对象：Criteria criteria = s.createCriteria(User.class);
        步骤二： 封装查询条件为一个Criterion对象：Criterion cr = Expression.eq("name", "new name");
                 或者 Criterion cr=Restrictions.eq("name","new name");
        步骤三： 获得带查询条件的Criteria对象：criteria.add(cr); 执行此步才使这个对象具有一个条件限制的查询操作。
        步骤四: List clist = criteria.list(); 也可以直接返回一个User对象：User user=(User) criteria.uniqueResult();

三、关系映射
    1、多对一 : 一个部门有可以有多个员工，而一个员工只属于一个部门
    Department配置
        public class Department {
            private int id;
            private String name;

            public int  getId() {   return id;   }
            public void setId(int id) {   this.id = id;  }

            public String getName() { return name;  }
            public void setName(String name) {  this.name = name; }
        }
        <hibernate-mapping package="com.asm.hibernate.domain">
            <class name="Department">
                <id name="id">
                    <generator class="native" />
                </id>
                <property name="name"></property>
            </class>
        </hibernate-mapping>

    Employee配置
        public class Employee {
            private int id;
            private String name;
            private Department depart;

            public int getId() {
                return id;
            }
            public void setId(int id) {
                this.id = id;
            }

            public String getName() {
                return name;
            }

           public void setName(String name){   
                this.name = name; 
          }

           public Department getDepart() {
                return depart;
           }

          public void setDepart(Department depart) {
               this.depart = depart;
          }
        }
        <hibernate-mapping package="com.asm.hibernate.domain">
            <class name="Employee">
                <id name="id">
                    <generator class="native" />
                </id>
                <property name="name"></property>
                <many-to-one name="depart" column="depart_id" />
            </class>
        </hibernate-mapping>


    2、一对多关系映射:如果一个部门有多个员工，则用“一对多”的关系来表示这个关系
       Department配置
        增加private Set<Employee> emps; 及相应的get/set方法。
        增加配置属性：
            <set name="emps">  
                <key column="depart_id"></key>  
                <one-to-many class="Employee"/> 
            </set>


    3、一对一映射：一个人有一个身份证，而一个身份证只属于某一个人
       Person 配置
           public class Person{
                private int id;  
                private String name;  
                private IdCard idCard; 
           }
           <hibernate-mapping package="com.asm.hibernate.domain">
                <class name="Person">
                    <id name="id">    
                        <generator class="native"/>
                    </id>
                    <property name="name"></property>
                    <one-to-one name="idCard"></one-to-one>
                </class>
           </hibernate-mapping>

       IdCard 配置
            public class IdCard {  
                private int id;  
                private Date validity;  
                private Person person;  
            }

           <hibernate-mapping package="com.asm.hibernate.domain">  
                <class name="IdCard">   
                    <id name="id">    
                        <generator class="foreign">     
                            <param name="property">person</param> 
                        </generator> 
                  </id> 
                   <property name="validity"></property> 
                    <one-to-one name="person" constrained="true"></one-to-one> 
              
                </class> 
           </hibernate-mapping> 

       配置文件说明：
            由于上面提到的是采取主键关联，即是说这里的id即是主键，同时也是（关联相关表的）外键，
            因此，以下对id的生成采取了”foreign”方式，其实这种方式也就指明了主键同时为外键。下面的<param>指定了外键的参考信息，
            此元素中的内容指明了它参考<one-to-one>的person。 注意在<one-to-one name="person" constrained="true">中设定了constrained属性，
            其作用是说明该配置文件所映射表的主键同时作为外键，参照关联类对应表的主键。














