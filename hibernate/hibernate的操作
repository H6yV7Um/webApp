一、Session
    session.save(对象)
    session.delete(对象)
    session.load(Student.class, 1);//是会延时加载
    session.get(Student.class, 1);//不会延时加载
    session.update(对象)
        1. 用来更新离线(detached)对象，更新完成后转为persistent状态
        2. 更新瞬时(transient)对象会报错
        3. 持久化(persistent)状态的对象只要设定不同字段就会发生更新
    session.flush();
        1. 当session的事务提交后,会强制将内存(session缓存)与数据库同步。

二、Query查询接口
    HQL:
        步骤一：获得Query对象：Query query=s.createQuery(“HQL语句”);
        步骤二：为参数赋值：query.setXXX();
        步骤三：获得List对象：LIST list=query.list(); 说明，除了此方法外，Query
                接口还有一个常用的方法uniqueResult，如果明确查询的结果只有一个，便选择使用此方法。如果查询结果有多个使用此方法会报异常。
    QBC:
        步骤一： 获得Criteria对象：Criteria criteria = s.createCriteria(User.class);
        步骤二： 封装查询条件为一个Criterion对象：Criterion cr = Expression.eq("name", "new name");
                 或者 Criterion cr=Restrictions.eq("name","new name");
        步骤三： 获得带查询条件的Criteria对象：criteria.add(cr); 执行此步才使这个对象具有一个条件限制的查询操作。
        步骤四: List clist = criteria.list(); 也可以直接返回一个User对象：User user=(User) criteria.uniqueResult();

三、关系映射
    1、多对一 : 一个部门有可以有多个员工，而一个员工只属于一个部门
    Department配置
        public class Department {
            private int id;
            private String name;

            public int  getId() {   return id;   }
            public void setId(int id) {   this.id = id;  }

            public String getName() { return name;  }
            public void setName(String name) {  this.name = name; }
        }
        <hibernate-mapping package="com.asm.hibernate.domain">
            <class name="Department">
                <id name="id">
                    <generator class="native" />
                </id>
                <property name="name"></property>
            </class>
        </hibernate-mapping>

    Employee配置
        public class Employee {
            private int id;
            private String name;
            private Department depart;

            public int getId() {
                return id;
            }
            public void setId(int id) {
                this.id = id;
            }

            public String getName() {
                return name;
            }

           public void setName(String name){   
                this.name = name; 
          }

           public Department getDepart() {
                return depart;
           }

          public void setDepart(Department depart) {
               this.depart = depart;
          }
        }
        <hibernate-mapping package="com.asm.hibernate.domain">
            <class name="Employee">
                <id name="id">
                    <generator class="native" />
                </id>
                <property name="name"></property>
                <many-to-one name="depart" column="depart_id" />
            </class>
        </hibernate-mapping>


    2、一对多关系映射:如果一个部门有多个员工，则用“一对多”的关系来表示这个关系
       Department配置
        增加private Set<Employee> emps; 及相应的get/set方法。
        增加配置属性：
            <set name="emps">  
                <key column="depart_id"></key>  
                <one-to-many class="Employee"/> 
            </set>


    3、一对一映射：一个人有一个身份证，而一个身份证只属于某一个人
       这里采取主键关联，这里的id即是主键，同时也是外键，因此以下id的生成采取了foreign方式，其实这种方式也就指明了主键同时为外键.
       Person 配置
           public class Person{
                private int id;  
                private String name;  
                private IdCard idCard; 
           }
           <hibernate-mapping package="com.asm.hibernate.domain">
                <class name="Person">
                    <id name="id">    
                        <generator class="native"/>
                    </id>
                    <property name="name"></property>
                    <one-to-one name="idCard"></one-to-one>
                </class>
           </hibernate-mapping>

       IdCard 配置
            public class IdCard {  
                private int id;  
                private Date validity;  
                private Person person;  
            }

           <hibernate-mapping package="com.asm.hibernate.domain">  
                <class name="IdCard">   
                    <id name="id">    
                        <generator class="foreign">     
                            <param name="property">person</param> 
                        </generator> 
                  </id> 
                   <property name="validity"></property> 
                    <one-to-one name="person" constrained="true"></one-to-one> 
              
                </class> 
           </hibernate-mapping> 

       配置文件说明：
            由于上面提到的是采取主键关联，即是说这里的id即是主键，同时也是（关联相关表的）外键，
            因此，以下对id的生成采取了”foreign”方式，其实这种方式也就指明了主键同时为外键。下面的<param>指定了外键的参考信息，
            此元素中的内容指明了它参考<one-to-one>的person。 注意在<one-to-one name="person" constrained="true">中设定了constrained属性，
            其作用是说明该配置文件所映射表的主键同时作为外键，参照关联类对应表的主键。

       外键关联：
            <hibernate-mapping package="com.asm.hibernate.domain">  
                <class name="IdCard">   
                    <id name="id">    
                        <generator class="native" /> 
                  </id> 
                  <property name="validity">
                    </property> 
                    <many-to-one name="person" column="person_id" unique="true" /> 
                </class>
            </hibernate-mapping>
            说明：由于采取了外键关联，所以这里的从表的主键将不再作为外键参考主表的主键，所以它会采取一般的方式生成主键，
            即<id>生成和以前的那此相同采取“native”方式。另注意到< many-to-one >,发现增加了unique有属性，这样尽管是多对一，但能有效保证实质是一对一。

4、多对多关系映射:一个学生可以有多个老师，同样一个老师可以有多个学生 ：需要一个中间表
   Student 配置
       public class Student {  
            private int id;  
            private String name; 
           private Set<Teacher> teachers;  
       }

       <hibernate-mapping package="com.asm.hibernate.domain">  
            <class name="Student"> 
                <id name="id">    
                   <generator class="native"/> 
              </id> 
              <property name="name"></property> 
              <set name="teachers" table="teacher_student">    
                        <key column="student_id"/> 
                        <many-to-many class="Teacher" column="teacher_id"/> 
                </set> 
             </class>
       </hibernate-mapping>

       这里重点说明最后的<set>配置
       （1）Student中Set类型的属性配置一个<set>元素，其实在前面的一对多中已经出现了<set>元素的配置，<set>中的table属性为关联表的名称。 
       （2）它的子元素<key>中的column为关联表中以该映射文件所映射的表的主键为外键的字段名称. 
       （3）<many-to-many> column属性为关联表中以欲关联类对应表的主键为外键的字段名称。

   Teacher 配置
       public class Teacher{
            private int id;  
            private String name; 
           private Set<Student> students;  
       }

       <hibernate-mapping package="com.asm.hibernate.domain">  
            <class name="Teacher">   
                <id name="id">    
                    <generator class="native"/> 
              </id> 
              <property name="name"></property>    
              <set name="students" table="teacher_student">
                    <key column="teacher_id" /> 
                    <many-to-many class="Student" column="student_id"/> 
                </set> 
            </class> 
       </hibernate-mapping>

5、组件关系映射 : 每个人有不同的名字，或者多个人可以是同一个名字，对于这种现象可以是“一个一”或者“多对一”，这样会被设计成两张表来映射，
而我们采用组件关系来映射就可以在一张表中映射实现
    public class Name {
        private String firstName;
        private String secondName;
    }
    public class People {
        private int id;
        private Name name;
    }

    <hibernate-mapping   package="com.asm.hibernate.domain">
        <class name="People">
            <id name="id">
                <generator class="native"/>
            </id>
            <component name="name">
                <property name="firstName" column="first_name"></property>
                <property name="secondName" column="second_name"></property>
            </component>
        </class>
    </hibernate-mapping>

四、其他集合类型 :
    在Hibernate中set、list、Bag、Map这三种集合类型
    1. list集合的使用:
        <list name="emps">
            <key column="depart_id" />
            <!-- 保证顺序 -->
            <list-index column="order_by" />
            <one-to-many class="Employee" />
        </list>

    2. bag集合的使用


五、级联关系
    1、级联操作（cascade）
    cascade可以在<set><list><bag><map>中进行配置
    例如
    Set<Employee> emps = new HashSet<Employee>();
        emps.add(emp1);
        emps.add(emp2);
        epart.setEmps(emps);
    当保存epart时会保错，因为emp1和emp2还没有保存，如果想进行级联操作，只需要<set>配置中增加cascade属性,比如我们现在Department.hbm.xml 的<set>元素下增加cascade="save-update"属性后，再来执行会发现正常.

    2、维护关系（inverse）
      所以通常在关联关系中，我们总是会让“多”这方来维护关系，而让“一”这方放弃维护关系
      因此我们需要在“一”的一方配置“inverse”属性，让它来放弃维护关系
      修改Department.hbm.xml文件，在<set>元素下增加“inverse="true"”属性后，再来执行“OneToManyTest”

六、懒加载:通过代理（proxy）机制来实现延迟加载
    它的具体过程：Hibernate丛数据库获取某一个对象数据时、获取某一个对象的集合属性值时，或获取某一个对象所关联的另一个对象时，由于没有使用该对象的数据，hibernate并不是数据库加载真正的数据，而只是为该对象创建一个代理对象来代表这个对象，这个对象上的所有属性都是默认值；只有在真正需要使用该对象的数据时才创建这个真实对象，真正从数据库中加载它的数据，这样在某些情况下，就可以提高查询效率。

    Hibernate中默认采用延迟加载的情况主要有以下几种
        1,当调用session上的load()加载一个实体时，会采用延迟加载。
        2，当session加载某个实体时，会对这个实体中的集合属性值采用延迟加载
        3当session加载某个实体时，会对这个实体所有单端关联的另一个实体对象采用延迟加载。

    fetch:与懒加载配置使用

七、缓存
    一级缓存： session的缓存
        (1)session的缓存只在session未关闭前有效，关闭后再查相同的数据会重新连库
        (2)我们可以手工清除session中的缓存：evict和clear
        (3)如果我们清掉session中的缓存，或是第一次查询这个数据，都会引起连库
        (4)save，update,savaOrUpdate,load,get,list,iterate,lock等方法都会将对象放在一级缓存中,具体可以在上例的基础上进行测试。
        (5)session一级缓存不能控制缓存数量，所以在大批量操作数据时可能造成内存溢出，这时我们可以用evict，clear来清除缓存中的内容
        (6)session在web开发应用中，一般只在一个用户请求时进行缓存，随后将会关闭，这个session的存活时间很短，所以它的作用不大，因此提出了二级缓存在概念。

    二级缓存:
        在主配置文件中指明支持使用二级缓存
        配置第三方缓存机制
        两种方式指定要缓存的实体类

hibernate使用知识点总结：
http://www.open-open.com/lib/view/open1329299027234.html























