一、web环境中的mvc
    spring ioc是一个独立的模块，它并不是直接在web容器中发挥作用的，如果要在web环境中使用ioc容器，需要spring为ioc设计
    一个启动过程，把ioc容器导入，并在web容器中建立起来。

二、上下文在web容器中的启动
   1、Ioc容器启动的基本过程 : ContextLoaderListener ->　ContextLoader -> XmlWebApplicationContext
      ContextLoader完成两个Ioc容器建立的过程： 一个是在web容器中建立起双亲ioc容器，另一个是生成相应的WebApplicationContext并将其初始化。
      Spring为web应用提供了上下文的扩展接口WebApplicationContext来满足启动过程的需要。

三、Spring mvc
    DispatcerServlet可以看成是Spring MVC实现中最为核心的部分，它的设计与分析也是下面分析Spring MVC的一条主线。



四、spring mvc的返回值

1.使用String 作为请求处理方法的返回值类型是比较通用的方法，这样返回的逻辑视图名不会和请求 URL 绑定，具有很大的灵活性，而模型数据又可以通过 ModelMap 控制。
2.使用void,map,Model 时，返回对应的逻辑视图名称真实url为：prefix前缀+视图名称 +suffix后缀组成。
3.使用String,ModelAndView返回视图名称可以不受请求的url绑定，ModelAndView可以设置返回的视图名称。

1、modelAndView
    通过ModelAndView构造方法可以指定返回的页面名称，也可以通过setViewName()方法跳转到指定的页面（比如jsp）
    @RequestMapping("/hello")
    public ModelAndView helloWorld() {
        String message = "Hello World, Spring 3.x!";
        return new ModelAndView("hello", "message", message);
    }

2、Map
    在jsp页面中可直通过${key1}获得到值, map.put()相当于request.setAttribute方法。
    @RequestMapping("/demo2/show")
    public Map<String, String> getMap() {
        Map<String, String> map = new HashMap<String, String>();
        map.put("key1", "value-1");
        map.put("key2", "value-2");
        return map;
    }

3、View
    可以返回pdf excel等，暂时没详细了解


4、String
    指定返回的视图页面名称，结合设置的返回地址路径加上页面名称后缀即可访问到。
    注意：如果方法声明了注解@ResponseBody ，则会直接将返回值输出到页面。

    @RequestMapping(value="/showdog")
    public String hello1(){
       return "hello";
    }

    @RequestMapping(value="/print")
    @ResponseBody
    public String print(){
        String message = "Hello World, Spring MVC!";
        return message;
    }

    @RequestMapping("/load1")
    @ResponseBody
    public String load1(@RequestParam String name,@RequestParam String password) throws IOException{
        System.out.println(name+" : "+password);
        MyDog dog=new MyDog();
        dog.setName("小哈");dog.setAge("1岁");dog.setColor("深灰");
        ObjectMapper objectMapper = new ObjectMapper();
        String jsonString=objectMapper.writeValueAsString(dog);
        System.out.println(jsonString);
        return jsonString;
    }

5、void
    如果返回值为空，则响应的视图页面对应为访问地址
    @RequestMapping("/index")
    public void index() {
        return;
    }

6、restful
对url进行规范，写restful格式的url
非rest得url ： http://.../query.action?id=001

rest的url ： http://.../items/001
    url简洁 ： 将参数通过url传到服务端

@RequsetMapping("/viewItems/{id}")
public @ResponseBody viewItems(@PathVariable("id") String id,Model model)
{
       ItemsCustom itemsCustom = itemsService.findItemsById(id);
       return itemsCustom;
}

7、mvc拦截器
一、实现HandlerIntercepter接口
实现方法：
PreHandle 在进入Handle方法之前 ： 使用场景用于身份认证，如果认证不通过，不执行handler

PostHandle 在进入Handle方法后，返回modelAndView之前执行 ： 使用场景从modelAndView，统一处理数据

afterCompletion 执行handler完成执行后执行 ：使用场景 ： 统一异常处理

二、拦截器配置
   （1）单独
        spring mvc拦截器，针对handlerMappering进行拦截设置。
        如果在某个HandlerMapping中配置拦截，经过HandlerMapping映射成功的handler最终使用该拦截器

    (2) 全局 推荐使用
        springmvc框架将配置的类似全局的拦截器注入到每个handlerMapping中。
        <mvc:interceptors>
            <mvc:intercepter>
                <mvc:mapping path="/**" />
                <bean class= "cn.itcast.ssm.filter.handlerInterceptor1"></bean>
            </mvc:intercepter>
        </mvc:intercepters>










