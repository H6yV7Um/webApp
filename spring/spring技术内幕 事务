总体描述：
    Spring事务处理模块是通过AOP功能来实现声明式事务处理的，比如事务属性的配置和读取，事务对象的抽象等。
    在Spring事务处理中，可以通过设计一个TransactionProxyFactoryBean来使用AOP功能，通过这个TransactionProxyFactoryBean可以生成
    Proxy代理对象，在这个代理对象中，通过TransactionInterceptor来完成对代理方法的拦截，正是这些AOP的拦截功能，将事务处理的功能
    织入进来。

一 spring 声明式事务
1 声明式事务处理的实现大致分为以下几个部分
  (1)读取和处理在ioc容器中配置的事务处理属性,并转化为spring事务处理需要的内部数据结构。
     这里涉及的类是TransactionAttributeSourceAdvisor,它是一个通知器，Spring使用这个通知器来生成TransactionAttribute对象。
     这些属性对象是和TransactionProxyFactoryBean拦截下来的事务方法结合起来。

  (2)spring事务处理模块实现统一的事务处理过程. 这个通用的事务过程包含处理事务配置属性,以及与线程绑定完成事务处理的过程
     spring通过TransactionInfo和TransactionStatus这两个数据对象，在事务处理过程中记录和传递相关执行场景。

  (3)spring事务处理实现,spring委托给具体的事务处理器来完成。


2 实现分析
  (1) 事务处理拦截器的配置
      在Ioc容器进行注入的时候,会创建TransactionIntercepter对象,而这个对象会创建一个TranscationAttriburePointcut,为读取TransactionAttribute做准备.
      在容器初始化的过程中,会实例化一个ProxyFactory,建立sping aop的应用.会为这个proxyFactory设置通知,目标对象,并最终返回proxy代理对象。
      在proxy代理对象建立起来后,在调用其代理方法的时候,会调用相应的TransactionIntercepter拦截器. 会根据TransactionAttribute配置的事务属性进行配置.从而为事务处理做好准备。

  (2) 事务处理配置的读入
      在aop配置完成的基础上,以TransactionAttributeSourceAdvisor的实现为入口

  (3) 事务处理拦截器的设计与实现
      在完成以上的准备工作后，经过TransactionProxyFactoryBean的aop包装，此时如果对目标对象进行调用，起作用的对象是一个Proxy对象。

3 声明式事务处理
  (
