一:HTTP概述

1: web客户端向服务器发送http请求,服务器会在http响应中返回所请求的数据 (响应中包括: 对象,对象类型,对像长度以及其他一些信息)

2: web资源: web资源是在服务器存储,比较简单的资源就是web服务器文件系统中的静态文件. 资源还可以是根据需要生成内容的软件程序(动态资源).

3: mime类型: web服务器会为所有http对象数据附加一个mime类型.web浏览器从服务器中取回一个对象时,会去查看相关的mime类型.根据mime类型进行处理
包括: text/html, text/plain,image/jpeg,image/gif,video/quicktime,application/vnd.ms-powerpoint

4: URI:统一资源标示符

5: URL:统一资源定位符,是URI最常见得形式

6: http方法: 每个http请求报文都包含一个方法. get,put,delete,post,head

7: 状态吗: 每条http响应报文返回时都会携带一个状态吗.

8: http事务由一条请求命令和一个响应结果组成,应用程序完成一项任务时通常会发布多个http事务.一个事务可以从不同的服务器获取想要的资源.

9: tcp/ip 协议

10:
代理, 位于客户端和服务器之间,接收所有http请求,并将请求转发给服务器.
缓存, 下一个请求同一文档的客户端就可以享受缓存的私有副本
网关, 将http流量转换成其他的协议

二: URL与资源
1: URL的语法: 资源可以通过不同的方案(http,ftp,smtp)来访问,因此url语法会随着方案的不同而有所不同
2: 相对URL和绝对URL, 当使用到相对URL,客户端会将相对URL转为绝对URL(根据基础URL转化)
3: URL字符集
4:
https 和 http : https使用了SSL加密机制
ftp 从FTP服务器上传和下载文件
mailto 邮件
telnet
5: URL缺点是如果资源被移走了,使用URL就无法定位,PURL实现对资源的跟踪.

三: HTTP报文
1 : http报文流 不管是请求报文还是响应报文,所有报文都会向下游流动
2 : 报文组成 起始行(对报文进行描述),首部(属性),主体(数据内容可选的)
3 : http请求的方法 7种
GET :  从服务器获取一份文档, 不包含主体
HEAD : 只从服务器获取文档首部 ,不包含主体
POST : 向服务器发送需要处理的数据 , 包含主体 (非幂等的)
PUT :  将请求的主体部分存储在服务器上 包含主体
TRACE : 对可能经过代理服务器传送到服务器上去的报文进行追踪
OPTIONS : 决定可以在服务器上执行那些方法
DELETE : 从服务器上删除文档
4 : http 状态吗
100 信息提示
200 成功
300 重定向
400 客户端错误
500 服务器错误
5 : 首部 以名/值对的列表标示
6 : 实体 http传输的内容

四 TCP
1 : tcp连接 是双向连接
2 : tcp流时分段的,由ip分组传送
3 : 用TCP套节字编程,用户创建tcp的端点数据结构,将这些端点与远程服务器的tcp端点进行连接.
4 : tcp性能
http时延就是由TCP网络时延由TCP网络时延构成的
5 : TCP连接握手的时延,小的http事务可能会在tcp建立更多的时间,但http通过重用现存连接,减少这种tcp建立时延所造成的影响.
请求新的tcp连接时,客户端要向服务器发送一个小的TCP分组
服务器向客户端回送;一个tcp分组,SYN和ACK标记,连接请求已被接受
客户端向服务器回送一条确认信息,通知它连接已成功建立
6 : TCP慢启动,限制了一个tcp端点在任意时刻可以传输的分组数
7 : http连接的处理,串行处理会产生时延
并行连接(多条tcp连接发起http请求),并行连接可能会提高页面的加载速度. 但取决于带宽.
持久连接(重用tcp连接),http事务处理结束之后,将TCP连接保持在打开状态. 但会占用客户端和服务器上的资源.
keep-alive http1.0默认不开启
persistent http1.1默认开启
管道化连接,是当有多个请求时,将请求放到一个队列中,单前一个请求发到服务器时候,队列后面的请求就可以发送请求了.(但必须是持久化连接,并且响应也是按顺序的)
正常关闭连接: 先关闭其中一端的输出信道,然后等待连接另一端的对等实体关闭它的输出信道,两端通知对方他们不会再发送任何数据之后,连接会完全关闭

五 HTTP结构
1 建立双向连接
2 接受请求报文:
3 处理请求:
4 通过对资源的映射访问资源:
5 构建响应,响应报文
(web服务器有时返回重定向响应而不是成功的报文,web服务器可以将浏览器重定向到其他地方来执行请求,也就是再发一次响应报文)
6 发送响应
7 记录日志

六 HTTP 识别
采取的方式

1 客户端IP地址识别: IP描述是机器,而不是用户.如果多个用户使用同一个机器就没法对用户区分
2 要求用户通过用户名和密码进行认证
3 在URL中嵌入识别信息的技术
4 cookie是识别用户,实现持久化的最好方式.
cookie类型: 会话cookie是一种临时cookie,用户退出浏览器会话就删除,持久化cookie,它存储在硬盘
cookie的工作原理
访问一个站点时,站点的服务器会生成一个cookie,并将这个cookie写到响应报文中发送给浏览器,浏览器会记录cookie
当再访问这个站点是,会将cookie写到请求报文,服务器得到报文时,会识别用户
cookie HTTP状态管理机制,由名值对组成.
5 cookie与会话跟踪 : 服务器会返回session-id 设置浏览器cookie中.
6 cookie与缓存 :


七 基本认证机制
1 认证协议与首部

服务器对用户进行询问时,会返回一条401 Unauthorized响应,并在www-authenticate首部说明如何以及在哪里进行认证
客户端重新发送请求时,会在Authorization首部附上加密的密码
授权请求成功时,服务器会返回一个正常的状态吗

2 基本认证的安全缺陷 : 密码是已明文形式传输的,任何人都可以读取并将其捕货

八 摘要认证的改进
1: 不以明文方式在网络上发送密码
2: 访止对报文内容的修改
3: 客户端发送的是密码摘要,摘要是一种单向函数(MD5) , MD5是由32位十六进制的字符组成
4: 通常生成的摘要还有再加上一个随机数
5: 握手机制
服务器计算一个随机数,服务器将这个随机数放在www-authenticate咨询报文,与服务器所支持的算法列表一同发往客户端
客户端选择一个算法,计算出摘要,将摘要放在authorization报文中
服务器计算出客户端相同的摘要,将服务器本地生成的摘要与网络传送过来的摘要进行比较
服务器发送预先发送下一个随机数据,放到authenticaton-info报文中.

九 安全HTTP
1 : https是最流行的http安全形式,https是在http层和tcp层之间增加了一层(SSL),SSL完成编码和解码的工作.
2 : 数字加密
密钥: 密码参数 , 加密和解密算法很容易知道,所以密钥对于安全非常重要.
对称密钥 (DES): 加密和解密的密钥是一致的 ,密钥长度要长一些. 缺点发送者和接受者相互对话前,一定要有一个共享的保密密钥. 这样才产生大量的密钥.
3 : 公开密钥加密技术没有为每对主机使用单独的加密/解密密钥,而是使用了两个非对称密钥(RSA)
4 : 数字签名是附加在报文上的特殊加密校验码.防止报文被修改.
5 : 数字证书 包含的是授信任组织的用户担保信息.

十 HTTPS
1 https概述 它在将http报文发送给tcp之前,先将其发送给了一个安全层,对其进行加密 , Http安全层是通过ssl协议.
注意http的默认端口是80,https的默认端口是443
2 https事务
建立与服务器TCP连接,SSL握手,客户端在安全层上发送http请求/在tcp上发送已加密的请求,服务器发送http响应/在tcp上发送已加密的响应,关闭SSL,关闭tcp连接.














