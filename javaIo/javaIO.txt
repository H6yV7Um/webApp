一 JAVA 同步异步,阻塞非阻塞

1、同步和异步是针对应用程序与内核(CPU)的交互而言的。
同步指的是用户进程触发IO操作并等待或者轮询的去查看IO操作是否就绪
异步是指用户进程触发IO操作以后便开始做自己的事情，而当IO操作已经完成的时候会得到IO完成的通知

2、阻塞和非阻塞是针对于进程在访问数据的时候，根据IO操作的就绪状态来采取的不同方式,阻塞方式下读取或者写入函数将一直等待，而非阻塞方式下，读取或者写入函数会立即返回一个状态值。
阻塞:当试图拿到某个资源时,如果当时没有东西可读或者暂时不可写, 程序就进入等待状态
非阻塞:如果没拿到某个资源时,马上返回,而不会等待

二 ReActor and ProActor IO事件处理模式

1、ReActor（同步）:
读取操作：
1. 应用程序注册读就绪事件和相关联的事件处理器

2. 事件分离器等待事件的发生

3. 当发生读就绪事件的时候，事件分离器调用第一步注册的事件处理器

4. 事件处理器首先执行实际的读取操作，然后根据读取到的内容进行进一步的处理

2、ProActor（异步）:
1. 应用程序初始化一个异步读取操作，然后注册相应的事件处理器，此时事件处理器不关注读取就绪事件，而是关注读取完成事件，这是区别于Reactor的关键。

2. 事件分离器等待读取操作完成事件

3. 在事件分离器等待读取操作完成的时候，操作系统调用内核线程完成读取操作（异步IO都是操作系统负责将数据读写到应用传递进来的缓冲区供应用程序操作，操作系统扮演了重要角色），并将读取的内容放入用户传递过来的缓存区中。这也是区别于Reactor的一点，Proactor中，应用程序需要传递缓存区。

4. 事件分离器捕获到读取完成事件后，激活应用程序注册的事件处理器，事件处理器直接从缓存区读取数据，而不需要进行实际的读取操作。

三 BIO、NIO、AIO
1、同步阻塞IO : BIO
2、同步非阻塞IO : NIO,ReActor模式
3、异步非阻塞IO : AIO,ProActor模式
4、各种通信协议采用的IO方式
TCP/IP : BIO方式，socket和serverSocket实现，serverSocket实现server端端口监听，socket用于建立网络io连接
不使用于处理多个请求
TCP/IP : NIO方式，使用channel和selector实现
UDP/IP : BIO方式，DatagramSocket和DatagramPacket实现
UDP/IP : NIO方式，DatagramChannel和ByteBuffer实现
